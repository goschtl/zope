coveragediff
============

``coveragediff`` is a tool that can be used to compare two directories with
coverage reports.  It reports regressions, that is, increases in the number
of untested code.

This document describes the internals of ``coveragediff.py``.  It also acts as
a test suite.


Locating coverage files
-----------------------

The function ``find_coverage_files`` looks for plain-text coverage reports
in a given directory

    >>> import z3c.coverage, os
    >>> sampleinput_dir = os.path.join(z3c.coverage.__path__[0], 'sampleinput')

    >>> from z3c.coverage.coveragediff import find_coverage_files
    >>> for filename in sorted(find_coverage_files(sampleinput_dir)):
    ...     print filename
    z3c.coverage.__init__.cover
    z3c.coverage.coveragediff.cover
    z3c.coverage.coveragereport.cover
    z3c.coverage.tests.cover

The function ``filter_coverage_files`` looks for plain-text coverage reports
 in a given location that match a set of include and exclude patterns

    >>> from z3c.coverage.coveragediff import filter_coverage_files
    >>> for filename in sorted(filter_coverage_files(sampleinput_dir)):
    ...     print filename
    z3c.coverage.__init__.cover
    z3c.coverage.coveragediff.cover
    z3c.coverage.coveragereport.cover
    z3c.coverage.tests.cover

    >>> for filename in sorted(filter_coverage_files(sampleinput_dir,
    ...                                              include=['diff'])):
    ...     print filename
    z3c.coverage.coveragediff.cover

The patterns are regular expressions

    >>> for filename in sorted(filter_coverage_files(sampleinput_dir,
    ...                                              exclude=['^z'])):
    ...     print filename


Parsing coverage files
----------------------

The function ``count_coverage`` reads a plain-text coverage reports and
returns two numbers: the number of tested code lines and the number of
untested code lines.

    >>> from z3c.coverage.coveragediff import count_coverage
    >>> filename = os.path.join(sampleinput_dir, 'z3c.coverage.tests.cover')
    >>> count_coverage(filename)
    (10, 3)


MailSender
----------

The ``MailSender`` class is responsible for assembling an RFC-2822 email
message and handing it off to an SMTP server.

    >>> from z3c.coverage.coveragediff import MailSender
    >>> mailer = MailSender('smtp.example.com', 25)

Since it wouldn't be a good idea to actually send emails from the test suite,
we'll use a stub SMTP connection class.

    >>> mailer.connection_class = None
    >>> class FakeSMTP(object):
    ...     def __init__(self, host, port):
    ...         print "Connecting to %s:%s" % (host, port)
    ...     def sendmail(self, sender, recipients, body):
    ...         from smtplib import quoteaddr
    ...         print "MAIL FROM:%s" % quoteaddr(sender)
    ...         if isinstance(recipients, basestring):
    ...             recipients = [recipients]
    ...         for recipient in recipients:
    ...             print "RCPT TO:%s" % quoteaddr(recipient)
    ...         print "DATA"
    ...         print body
    ...         print "."
    ...     def quit(self):
    ...         print "QUIT"
    >>> mailer.connection_class = FakeSMTP

Here's how you send an email:

    >>> mailer.send_email('Some Bot <bot@example.com>',
    ...                   'Maintainer <m@example.com>',
    ...                   'Test coverage regressions',
    ...                   'You broke the tests completely.  Have a nice day.')
    Connecting to smtp.example.com:25
    MAIL FROM:<bot@example.com>
    RCPT TO:<m@example.com>
    DATA
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    From: Some Bot <bot@example.com>
    To: Maintainer <m@example.com>
    Subject: Test coverage regressions
    <BLANKLINE>
    You broke the tests completely.  Have a nice day.
    .
    QUIT


ReportPrinter
-------------

The ``ReportPrinter`` class is responsible for formatting the output.

    >>> from z3c.coverage.coveragediff import ReportPrinter
    >>> printer = ReportPrinter()
    >>> printer.warn('/tmp/coverage/z3c.coverage.coveragediff.cover',
    ...              '3 new untested lines')
    z3c.coverage.coveragediff: 3 new untested lines
    >>> printer.warn('/tmp/coverage/z3c.coverage.coveragereport.cover',
    ...              '2 new untested lines')
    z3c.coverage.coveragereport: 2 new untested lines


Links to web pages
~~~~~~~~~~~~~~~~~~

Report printer can also include links to web pages with the coverage reports
(e.g. the ones you can get from ``coveragereport``).

    >>> printer = ReportPrinter(web_url='http://example.com/coverage/')
    >>> printer.warn('/tmp/coverage/z3c.coverage.coveragediff.cover',
    ...              '3 new untested lines')
    z3c.coverage.coveragediff: 3 new untested lines
    See http://example.com/coverage/z3c.coverage.coveragediff.html
    <BLANKLINE>
    >>> printer.warn('/tmp/coverage/z3c.coverage.coveragereport.cover',
    ...              '2 new untested lines')
    z3c.coverage.coveragereport: 2 new untested lines
    See http://example.com/coverage/z3c.coverage.coveragereport.html
    <BLANKLINE>


ReportEmailer
-------------

The ``ReportEmailer`` class is an alternative to ``ReportPrinter``.  It
collects warnings and sends them via email.

You pass the basic email parameters (sender, recipient and subject line)
to the constructor:

    >>> from z3c.coverage.coveragediff import ReportEmailer
    >>> emailer = ReportEmailer('Some Bot <bot@example.com>',
    ...                         'Maintainer <m@example.com>',
    ...                         'Test coverage regressions')

You add warnings about Python modules by passing the filename of the
coverage file and the message

    >>> emailer.warn('/tmp/coverage/z3c.coverage.coveragediff.cover',
    ...              '3 new untested lines')
    >>> emailer.warn('/tmp/coverage/z3c.coverage.coveragereport.cover',
    ...              '2 new untested lines')

Finally you send the email.  Since it wouldn't be a good idea to actually
send emails from the test suite, we'll use a stub MailSender class:

    >>> class FakeMailSender(object):
    ...     def send_email(self, from_addr, to_addr, subject, body):
    ...         print "From:", from_addr
    ...         print "To:", to_addr
    ...         print "Subject:", subject
    ...         print "---"
    ...         print body
    >>> emailer.mailer = FakeMailSender()
    >>> emailer.send()
    From: Some Bot <bot@example.com>
    To: Maintainer <m@example.com>
    Subject: Test coverage regressions
    ---
    z3c.coverage.coveragediff: 3 new untested lines
    z3c.coverage.coveragereport: 2 new untested lines


Links to web pages
~~~~~~~~~~~~~~~~~~

Report emailer can also include links to web pages with the coverage reports
(e.g. the ones you can get from ``coveragereport``).

    >>> emailer = ReportEmailer('Some Bot <bot@example.com>',
    ...                         'Maintainer <m@example.com>',
    ...                         'Test coverage regressions',
    ...                         web_url='http://example.com/coverage',
    ...                         mailer=FakeMailSender())
    >>> emailer.warn('/tmp/coverage/z3c.coverage.coveragediff.cover',
    ...              '3 new untested lines')
    >>> emailer.warn('/tmp/coverage/z3c.coverage.coveragereport.cover',
    ...              '2 new untested lines')
    >>> emailer.send()
    From: Some Bot <bot@example.com>
    To: Maintainer <m@example.com>
    Subject: Test coverage regressions
    ---
    z3c.coverage.coveragediff: 3 new untested lines
    See http://example.com/coverage/z3c.coverage.coveragediff.html
    <BLANKLINE>
    z3c.coverage.coveragereport: 2 new untested lines
    See http://example.com/coverage/z3c.coverage.coveragereport.html
    <BLANKLINE>


Empty reports
~~~~~~~~~~~~~

Empty reports are not sent out.

    >>> emailer = ReportEmailer('Some Bot <bot@example.com>',
    ...                         'Maintainer <m@example.com>',
    ...                         'Test coverage regressions',
    ...                         mailer=FakeMailSender())
    >>> emailer.send()

