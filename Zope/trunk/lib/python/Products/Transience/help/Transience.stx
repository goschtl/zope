Transient Object Containers

  Transient Object Overview

    A transient object persists, but for a limited period of time.
    To facilitate persistence of items for a limited duration, the
    TransientObjectContainer provides a container which stores
    TransientObjects.  A TransientObject is dictionary like; it 
    will respond to dictionary semantics.  The TransientObjectContainer 
    maintains a time-out mechanism to flush out expired entries.
    The container also has a notification mechanism whereby it can
    notify a script or method that an object has been added or removed
    from the container.

  Using Transient Objects

    One uses the 'new_or_existing' or 'new' methods of a
    TransientObjectContainer to obtain a TransientObject.  The
    TransientObjectContainer only accepts string keys to name objects;
    you may not use objects as keys.

    When a new item is created, the add notification target on the
    container is notified about the object via a callback.  Similarly,
    when the item is deleted, either explicitly or by timeout, the
    delete notification target is called back.

    TransientObjects, since they behave as a dictionary, may contain
    any arbitrarily keyed data.  However, the TransientObject cannot inspect
    the contents of what it stores to determine if it has been changed,
    thus, it is important to explicitly set data on the TransientObject
    itself in the event some nested data has changed and requires saving.

    For example, consider the following python script::

       # Create a transientObject
       t = container.transient_container.new_or_existing('Foobar')

       # Create a dictionary
       d = {}

       # Store the dictionary in the transientObject
       t['d'] = d

    And a similar python script::

       # Retrieve our transientObject
       t = container.transient_container.new_or_existing('Foobar')

       # Retreive the dictionary
       d = t['d']

       # Update the dictionary
       d[1] = 1

    In this second example, the contents of the transientObject will not
    be saved, because the transientObject itself was not modified.  It
    is important to update the object to signal it that it must save its
    state.


  See Also

     - "Transient Object API":TransienceInterfaces.py
