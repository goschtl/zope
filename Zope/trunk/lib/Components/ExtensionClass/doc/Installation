Installation

   The ExtensionClass distribution now uses the "Universal Unix
   Makefile for Python extensions", 'Makefile.pre.in', which was
   introduced as part of Python1.4.  Copies of this file for Python
   1.4 and Python 1.5 are included with this release.  See the
   instructions in the make file, itself.  Note that you will need to
   copy or rename the the file for the Python version you're using to
   Makefile.pre.in.

Files

  ExtensionClass.stx   -- This file in structured text format
     
  ExtensionClass.html  -- This file in HTML format

  Installation         -- Installation instructions in structured text
		          format.  

  Installation.html    -- Installation instructions in HTML
		          format.  

  Acquisition.stx      -- Acquisition documentation in structured text
		          format.  

  Acquisition.html     -- Acquisition documentation in HTML
		          format.  

  MultiMapping.stx     -- The MultiMapping example in structured text
		          format.  

  MultiMapping.html    -- The MultiMapping example in structured text
		          format.  
 
  release.notes        -- Release notes in structured text
		          format.  
 
  release.html         -- Release notes in HTML format.  

  README               -- A file that says to read this file.
    
  Makefile.pre.in-1.4  -- The Universal Unix Makefile for Python
			  extensions.  This is the Python 1.4
			  version.  Copy this to Makefile.pre.in
			  before using it.
    
  Makefile.pre.in-1.5  -- The Universal Unix Makefile for Python
			  extensions.  This is the Python 1.5
			  version.  Copy this to Makefile.pre.in
			  before using it.
  
  Setup                -- a configuration file used by the Universal
			  Unix Makefile for Python extensions 
 
  ExtensionClass.c     -- The ExtensionClass source
 
  ExtensionClass.h     -- The ExtensionClass header file
 
  Acquisition.c        -- The source for the 'Acquisition' module
			  that provides mix-in classes to support
			  environmental acquisition
 
  MethodObject.c       -- The source for the 'MethodObject' module
			  that provides a mix-in class for
			  user-defined method types.  To create a
			  user-defined method type, just create an
			  extension subclass of
			  'MethodObject.MethodObject' that has an
			  '__call__' method.
 
  Missing.c            -- The source for the 'Missing' module
			  that provides a class for objects that
			  model "missing" or unknown data.  Missing
			  objects have the property that all
			  mathematical operations yield a missing
			  value.  This is included mainly as an
			  example (and test) of a numeric extension
			  base class.

  MultiMapping.c        -- The source for a slightly enhanced
			   'MultiMapping' module that is based on the
			   'MultiMapping' example given in this
			   paper.  If present, document templates [2]
			   will take advantage of this module to
			   significantly increase rendering
			   performance. 
  
  Sync.py               -- A Python module that provides a
			   'Synchonized' mix-in class that limits access
			   to an object's methods to one thread at a
			   time.  This requires the installation of
			   the ThreadLock module.
  
  ThreadLock.c          -- The source for the 'ThreadLock' module that
			   provides 'ThreadLock' objects.  These are
			   similar to the lock objects provided by
			   the 'thread' modules.  Unlike normal
			   Python lock objects, 'ThreadLock' objects
			   can be acquired (and released) more than
			   once by the same thread.
  
  In addition to the files listed above, several "test" modules are
  included. These are modules that I used to test ExtensionClass.
  They do not constitute a regression testing suit and I've made
  little effort to assure that they actually work, although that
  would be a good thing to do if time permits.
