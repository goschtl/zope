cPickle, A C Pickle Implementation

  "cPickle", http://www.digicool.com/releases/cPickle/cPickle-1.0b2.tar.gz,
  is a C implementation of the Python module, pickle.py, and is
  fully compatible with pickle: all types picklable by pickle can be
  pickled using cPickle [1], and pickles generated using pickle may be
  unpickled using cPickle and vice versa.

  The basic interface for cPickle is nearly the same as pickle's, the
  only difference being that an optional value may be specified as the
  final argument to Pickler(), dump, and dumps(), specifying that
  binary mode should be used.  For instance, to pickle an object, ob,
  to file, f, which has been opened for binary writing::

    p = cPickle.Pickler(f, 1)
    p.dump(ob)

  alternately::

    cPickle.dump(ob, f, 1)

  Using binary format produces smaller pickles and increases the speed of
  pickling and unpickling.  Note, however, old versions of pickle
  cannot read binary pickles and files containing binary pickles
  should be opened in binary mode.  

  Customization  

     For this release of cPickle, a small amount of customization is
     possible for the Pickler and Unpickler.  Specifically, the
     persistent_id attribute of the Pickler and the persistent_load
     attribute of the Unpickler may be set to user-defined functions by
     setting attributes.  For instance::

         def peristent_id(object):
	     ... return appropriate persistent id string ...
  
         p = cPickle.Pickler(f)
         p.persistent_id = persistent_id
  
    
         def persistent_load(pers_id):
	     ... return appropriate object, given a persistent id ...
  
         u = cPickle.Unpickler(f)
         u.persistent_load = persistent_load

     Note that this mechanism works with the current pickle module too.

     The cPickle module does not support customization through inheritance
     as pickle.py does.

  Pickling Extension Types

     When the pickler encounters an object it doesn't know how to pickle,
     it checks to see if the object has a __reduce__ method.  This should
     return a tuple consisting of an callable object, a tuple of arguments, and
     an optional object state value.  If a state value is supplied, it will be
     passed to the newly created object's __setstate__ method.  If the object
     has no __setstate__ method, it will be added to the object's __dict__
     (note that the state value must be a dictionary in this case).
     The contents of this tuple will be saved, and, on unpickling, the callable
     object will be called with the arguments to create the instance.

     The callable object must either be:

        - a Class,

        - registered in the set of safe constructors (see below),

        - or have an attribute, __safe_for_unpickling__, with a true value.

     Note that the __reduce__ method may also return a string value.  In this
     case, the value of the global variable with the name given by the string
     value is used.

     The module copy_reg.py provides an interface for registering pickling 
     functions::

        def pickle(ob_type, pickle_function, constructor = None):
           '''Register the function, 'pickle_function' to be called
              to pickle objects of type 'ob_type'.

     The pickle function must behave in the same manner as the __reduce__
     method described above.  If the argument 'constructor' is specified,
     then it will be registered as an object that is safe for unpickling
     objects. 
 
     copy_reg.py also provides an interface for updating a registry of safe
     constructors to be used when unpickling::

        def constructor(object):
           'Register the object as safe for unpicking objects'

     The following example shows how one might add support for pickling 
     complex numbers::

        import copy_reg

        def pickle_complex(z):
            return (complex, (z.real, z.imag))

        copy_reg.pickle(type(complex(0,0)), pickle_complex, complex)

  This release also includes the latest release of the cStringIO
  module.  The cStringIO module is a C implementation of the Python
  StringIO module; it is used internally by cPickle.  It may also
  be used outside of cPickle as a much faster StringIO implementation.
  
  A new version of pickle.py is also provided.  This version adds support
  for writing and reading binary pickles.
  
  Status

    The current release of cPickle is "1.0b2",
    http://www.digicool.com/releases/cPickle/cPickle-1.0b2.tar.gz.
    This release requires Python version 1.4 or higher.

    This version introduces a special binary mode format for floats.
    Since this could not be implemented in the python version, it is
    disabled by default in cPickle.  To enable the new float format,
    see the instructions in the Makefile.

  Installation

    The cPickle distribution now uses the "Universal Unix Makefile for
    Python extensions", 'Makefile.pre.in', which was introduced as
    part of Python1.4.  A copy of this make file is included with this
    release.  See the instructions in the make file, itself.  

    Note that cPickle requires that both copy_reg and cStringIO be importable.

  Files
  
     Makefile.pre.in  -- The Universal Unix Makefile for Python extensions
     
     Setup	      -- a configuration file used by the Universal
		         Unix Makefile for Python extensions 

     cPickle.stx      -- This file in structured text format
     	
     cPickle.html     -- This file in HTML format
     	
     cPickle.c        -- The cPickle source
     	
     cStringIO.c      -- The cStringIO source
     	
     cStringIO.h      -- The cStringIO C-API definition
     	
     pickle.py        -- The Python implementation of pickle with cPickle
                   	 Extensions
     	
     copy_reg.py      -- An auxilary module used to keep Pickle registration
                   	 information used by cPickle

  Release Notes

     0.1 -- Initial (Alpha) Release

     0.2 -- Second release incorporating many fixes and improvements over
            initial release.  This is the first Beta release.

            0.2.1 -- Bug fix release and slight format enhancement

               Bugs fixed:

               - Objects placed in memo when pickling were not
                 actually retained, causing weird behavior when
                 additional objects were created with the same ids
                 (i.e. addresses).

               - Objects saved via the '__reduce__' mechanism were not
                 placed in memo when pickling.

               In addition, binary floating point format was added.
	       This uses code from the new struct module.
	       Unfortunately, this cannot be supported in the current
	       Python version.  Support of this format is disabled by
	       default. To enable this feature, edit the make file
	       'CFLAGS' variable as described in the make file,
	       'Makefile'. 
		 
            0.2.2 -- Bug fix release

               Bugs fixed:

               - Incomplete initialization of Pickler and Unpickler objects
                 caused core dump if an error occured while creating either
                 of the objects.

               - Empty tuples saved in non-binary mode when using pickle.py
                 produced an extra MARK if there was already an empty tuple
                 in the memo.

               - Too few POPs written for recursive tuples.
    
               - Lists and dictionaries were not being placed into the memo
                 before their items were saved
  
               - Only placing objects with a reference count > 1 in the memo
                 was not always safe.

               - PyMapping_HasKey() leaked memory

     0.3 -- Bug fixes and minor new features
     
        New features:
     
        - In cStringIO, Guido added an unused softspace attribute for
          compatibility with file objects.
     
        - In cStringIO, the getvalue() method now accepts an
          optional argument.  If the argument is true, then the
          string returned is the contents of the StringIO up to
          the current file position.  Otherwise, the entire
          contents are returned.
     
        - In cPickle, made some minor optimizations in
          pickling.
     
        - In cPickle, added clear_memo method to Pickler
          objects.  This is useful when reusing Picklers.
     
        Bug fixes
     
        - In cStringIO, getvalue() returned it's contents
          only up to the file position, rather than the entire
          contents. 
     
        - In cPickle, added logic from pickle.py to avoid
          picking '__main__' as a class' module when pickling
          classes.
     
        - Fixed bug (pointed out by Mark Lake) in saving
     	 tuples that participate in circular references.
     
        This release includes a number of changes made for 1.5,
        and changes to make 'gcc -Wall -pedantic' happy.

	0.3.1 -- Bug Fix

	  - Fixed a reference counting bug in the code that
	    unpickles global objects.  (I incorrectly assumed that
	    PyEval_GetGlobals incremented the reference count of the
	    object it returned.)  This bug caused really bizarre
	    things to happen after unpickling a pickle with lots of
	    global references.


     1.0b1 -- Official release (almost)

        This is the release that I expect to be included in Python
        1.5 final.

	Old new features

          Some important features were added in earlier releases, but
          are not mentioned above.

          - Flexible module import.  Now cPickle calles __import__
            so it works with ni and other specialized import
            mechanisms.

	  - New unpickler methods and features to support persistent
	    object systems:

	    - The persistent_load attribute can be set to a list instead
	      of a function.  In this case, persistent ids encountered
	      during unpickling are added to the list.

	    - Unpickler 'noload' method is like 'load' except that
	      it doesn't create any objects.  This is useful in
	      finding persistent ids in a pickle::

	        f=StringIO(some_pickle)
		u=Unpickler(f)
		ids=[]
		u.persistent_load=ids
		u.noload()
	        # at this point, ids contains any persistent ids
		# found in the pickle.

	      Note that this technique works even if instances are
	      encountered for classes defined in modules that cannot
	      be imported, since no attempt is made to actually
	      instantiate the instances.
	      

        New feature

        - In cPickle, cPickle checks to see if a class has a __module__
          attribute and, if present, uses that attribute to pickle the
          class.

	- A new instance pickling/unpickling protocol is used.  If
	  a class defines no __getinitargs__ method, then __init__
	  method is not called when an instance is unpickled.

	- Support for restricted execution environments was finished
	  in cPickle.  

        Bug Fix

        - Changed the way __version__ is created to avoid seg fault when
          different C version strings are used.

        Cleanup

        - A number of cleanups done by Guido were incorporated.

     1.0b2 -- I forgot a few things in 1.0b1

        New features

	- Loading non-binary string pickles checks for insecure
	  strings. This is needed because cPickle (still) uses
	  a restricted eval to parse non-binary string pickles.
	  This change is needed to prevent untrusted pickles like::

	    "S'hello world'*2000000\012p0\012."

	  from hosing an application.

	- User-defined types can now support unpickling without
	  executing a constructor.

	  The second value returned from '__reduce__' can now be None,
          rather than an argument tuple.  On unpickling, if the
	  second value returned from '__reduce__' during pickling was
	  None, then rather than calling the first value returned from
          '__reduce__', directly, the '__basicnew__' method of the
          first value returned from '__reduce__' is called without
	  arguments.

	Cleanup

	- Incorporated Guido's changes to cStringIO.h and copy_reg.py

	- Removed pickle.py from cPickle distribution.
	  
  To do


    - Support for pickling humongous arrays. Konrad Hinsen summed up
      the issue:

      	"With pickle.py, NumPy derives special pickler/unpickler
      	classes that know how to deal with arrays. With cPickle, I'd
      	have to use the method described under "pickling extension
      	types". Unless I have missed something essential, that means I
      	have to find a representation of the extension type in terms
      	of built-in Python types. For large arrays, this will
      	certainly eat up all speed advantage that cPickle can offer,
      	and in addition it creates memory problems.

      	Is there any specific reason for not simply allowing an extension
      	type to pickle und unpickle itself with special methods?"

      cPickle and it's associated version of pickle.py use a new
      "reduce" protocol to handle new types.  Unfortunately, the
      intermediate objects created in this protocol are imprectical
      when working with millions of numbers.  Konrad and I have
      discussed a number of options, but I'm not happy enough with any
      of them to have implemented them. 
    

.. [1] An earlier version of the pickle module provided for saving
    extension type instances that had __class__ attributes.  Using
    cPickle, extension types can only be be pickled using the
    mechanism described in the section "Pickling Extension Types"
    above.

