# Zope2 build and install Makefile.

# We do as much as possible in Python in order to avoid needing to
# learn autoconf or some other awful thing. ;-)

NAME=Zope
MAJOR_VERSION=<<ZOPE_MAJOR_VERSION>>
MINOR_VERSION=<<ZOPE_MINOR_VERSION>>
RELEASE_TAG=<<VERSION_RELEASE_TAG>>
PACKAGE_NAME=${NAME}-${MAJOR_VERSION}.${MINOR_VERSION}-${RELEASE_TAG}

PYTHON="<<PYTHON>>"
PREFIX=<<PREFIX>>
BASE_DIR=<<BASE_DIR>>
BUILD_BASE=<<BUILD_BASE>>
DISTUTILS_OPTS=<<DISTUTILS_OPTS>>
INSTALL_FLAGS=<<INSTALL_FLAGS>>
BUILD_SUBDIR=build
BUILD_FLAGS=--build-base="${BUILD_BASE}" \
            --build-lib="${BUILD_BASE}/${BUILD_SUBDIR}" \
            --build-scripts="${BUILD_BASE}/${BUILD_SUBDIR}/build_scripts.tmp" \
            --build-temp="${BUILD_BASE}/${BUILD_SUBDIR}/build_temp.tmp"

RM=rm -f
RMRF=rm -rf
FIND=find
XARGS=xargs
CD=cd
LN=ln -sf
CP=cp

.PHONY : clean install uninstall instance untestinst testinst
.PHONY : default

default: build
	@echo
	@echo Zope built.  Next, do \'make install\' \(or \'make instance\'
	@echo to run a Zope instance directly from the build directory\).
	@echo

build:
	${PYTHON} "${BASE_DIR}/setup.py" \
           ${DISTUTILS_OPTS} build ${BUILD_FLAGS}

install: build
	${PYTHON} "${BASE_DIR}/setup.py" ${DISTUTILS_OPTS} install \
	   --home="${PREFIX}" ${BUILD_FLAGS} ${INSTALL_FLAGS}
	@echo
	@echo Zope binaries installed successfully.
	@echo Now run \'${PREFIX}/bin/mkzopeinstance\'

instance:
	${PYTHON} "${BASE_DIR}/setup.py" ${DISTUTILS_OPTS} build_ext -i
	${PYTHON} "${BASE_DIR}/bin/mkzopeinstance" .

# testinst makes an instance home in the build directory without asking
# any questions.  this is useful when testing.  instances made with
# this can be removed via "make untestinst"
testinst: build
	${PYTHON} "${BASE_DIR}/setup.py" ${DISTUTILS_OPTS} build_ext -i
	${PYTHON} "${BASE_DIR}/bin/mkzopeinstance" --user=admin:admin .

# remove the instance files made with testinst (w/ prejudice)
untestinst:
	${RM} "${BASE_DIR}/bin/zopectl.py"
	${RM} "${BASE_DIR}/bin/ntservice.py"
	${RMRF} "${BASE_DIR}/etc"
	${RMRF} "${BASE_DIR}/log"

uninstall:
	${RMRF} "${PREFIX}"

TESTOPTS=-v1 -e -d lib/python

test: build
	${PYTHON} "${BASE_DIR}/utilities/testrunner.py" ${TESTOPTS}

clean:
	${RMRF} "${BUILD_BASE}/${BUILD_SUBDIR}"
	${FIND} "${BASE_DIR}" -name '*.py[co]' -o -name 'core*' | ${XARGS} ${RM}

clobber: clean untestinst
	${FIND} "${BASE_DIR}/lib/python" -name '*.so' | ${XARGS} ${RM}
