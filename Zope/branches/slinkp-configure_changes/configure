#!/bin/sh

# Zope configure script
# $Id$
# $Rev$

#####################################################################
#                    BEGIN EDITABLE PARAMETERS                      #
#####################################################################

# Place the Zope major version number below.
ZOPE_VERS=2.8

# Order a list of "preferred" python version numbers (as returned by
# sys.version) below in "best" to "worst" order.
# Up to four preferred python versions are allowed.
# below
PREFERRED="2.3.3 2.3.4"

# Order a list of "acceptable" python version numbers (as returned by
# sys.version) below in "best" to "worst" order, not including the
# preferred version.  Up to six acceptable python versions are allowed.
# Do not include preferred version numbers in this list!
ACCEPTABLE="2.3.2 2.3.1 2.3"

# provide the executable names for all the acceptable versions
# (and the preferred versions) below
EXENAMES="python python2 python2.3"

#####################################################################
#                    END EDITABLE PARAMETERS                        #
#####################################################################

# where are we?
HERE=`dirname $0`

# should we be quiet?
QUIET=""

usage()
{
    echo
    echo "configure [--help] [--quiet] [--with-python=path] [--prefix=path] "
    echo "          [--build-base=path] [--ignore-largefile] [--ignore-zlib]"
    echo "          [--optimize]"
    echo
    echo " Creates a Makefile suitable for building and installing Zope"
    echo
    echo " Options: "
    echo "  --help              shows usage and quits"
    echo "  --quiet             suppress nonessential output"
    echo "  --with-python       specify a path to a Python interpreter to use"
    echo "  --prefix            specify an installation path for binary data"
    echo "  --build-base        specify a temporary path for build files"
    echo "  --ignore-largefile  ignore large file support warnings"
    echo "  --ignore-expat      ignore warnings about expat/pyexpat"
    echo "  --ignore-zlib       ignore warnings about zlib"
    echo "  --optimize          optimize compiled Python bytecode"
    echo "  --no-compile        Dont compile Python bytecode"
    echo
    echo " Given no options, configure will search your PATH for a suitable"
    echo " Python interpreter and will use '/opt/Zope-$ZOPE_VERS' as a prefix."
    echo
}

# bootstrap ourselves by finding a Python interpreter if necessary
get_python() {
    OLDIFS="$IFS"
    IFS=":"
    FOUND=""
    VERSION=""
    FOUNDLIST=""
    PREF_FOUNDLIST=""
    out "Testing for an acceptable Python interpreter..."
    out ""
    for DIR in $PATH; do
        IFS="$OLDIFS"
        for EXECUTABLE in $EXENAMES; do
            FULL="$DIR/$EXECUTABLE"
            if [ -x "$FULL" ]; then
                CMD="import string,sys;a=string.split(sys.version)[0]"
		# Strip trailing + from version number
		CMD="$CMD;a=(a[-1]=='+')and(a[:-1])or(a);print a"
                VERSION=`"$FULL" -c "$CMD"`
                out "  Python version $VERSION found at $FULL"
		i=0;
                for P in $PREFERRED; do
		    i=`expr $i + 1`
		    echo "XXX I: $i"
		    for SLOT in $PREF_FOUNDLIST; do
			if [ $SLOT -eq $i ]; then
                            # slot "i" already populated.  
			    # This means we've
                            # already found this particular version of
                            # python.  Continue the for ACC in 
                            # $PREFERRED loop and don't overwrite the
                            # one we already found (interpreters first
                            # on the path win).
			    continue 2
			fi
		    done
		    if [ "$VERSION" = "$P" ]; then
			PREF_FOUNDLIST="$PREF_FOUNDLIST $i"
			eval "PREF$i=$FULL"
			eval "PREFVERSION$i=$VERSION"
			break 2
		    fi
		done
                if [ -z "$PREF_FOUNDLIST" ]; then
                    i=0;
                    for ACC in $ACCEPTABLE; do
                        i=`expr $i + 1`
			echo "I XXX $i"
			for SLOT in $FOUNDLIST; do
                            if [ $SLOT -eq $i ]; then
                                # slot "i" already populated.  This means we've
                                # already found this particular version of
                                # python.  Continue the for ACC in 
                                # $ACCEPTABLE loop and don't overwrite the
                                # one we already found (interpreters first
                                # on the path win).
                                continue 2
                            fi
                        done
                        if [ "$VERSION" = "$ACC" ]; then
                            FOUNDLIST="$FOUNDLIST $i"
                            eval "ACC$i=$FULL"
                            eval "ACCVERSION$i=$VERSION"
                        fi
                    done
                fi
            fi
        done
    done
    # now pick the best of the found versions.
    if [ "$PREF_FOUNDLIST" ]; then
	if [ -n "$PREF1" ]; then
	    FOUND=$PREF1
	    FOUNDVERSION=$PREFVERSION1
	elif [ -n "$PREF2" ]; then
	    FOUND=$PREF2
	    FOUNDVERSION=$PREFVERSION2
	elif [ -n "$PREF3" ]; then
	    FOUND=$PREF3
	    FOUNDVERSION=$PREFVERSION3
	elif [ -n "$PREF4" ]; then
	    FOUND=$PREF4
	    FOUNDVERSION=$PREFVERSION4
	fi
        out ""
        out "  A preferred Python version ($FOUNDVERSION) was found at $FOUND."
    elif [ -z "$ACC1" ] && [ -z "$ACC2" ] && [ -z "$ACC3" ] &&
         [ -z "$ACC4" ] && [ -z "$ACC5" ] && [ -z "$ACC6" ] ; then
        out ""
        out "  No suitable Python version found.  You should install"
        out "  python with a preferred version ($PREFERRED) before continuing."
        out "  Versions $ACCEPTABLE also work, but not as optimally."
        exit 1
    else
        if   [ -n "$ACC1" ]; then
            FOUND=$ACC1
            FOUNDVERSION=$ACCVERSION1
        elif [ -n "$ACC2" ]; then
            FOUND=$ACC2
            FOUNDVERSION=$ACCVERSION2
        elif [ -n "$ACC3" ]; then
            FOUND=$ACC3
            FOUNDVERSION=$ACCVERSION3
        elif [ -n "$ACC4" ]; then
            FOUND=$ACC4
            FOUNDVERSION=$ACCVERSION4
        elif [ -n "$ACC5" ]; then
            FOUND=$ACC5
            FOUNDVERSION=$ACCVERSION5
        elif [ -n "$ACC6" ]; then
            FOUND=$ACC6
            FOUNDVERSION=$ACCVERSION6
        fi
        out ""
        out "  !! WARNING !! "
        out "  An acceptable, but non-optimal Python version ($FOUNDVERSION) "
        out "  was found at '$FOUND'."
        out "  But consider installing a preferred version ($PREFERRED) and"
	out "  re-running 'configure' before running 'make'. "
        out "  If this isn't the Python version or interpreter instance"
        out "  you wish to use, you may specify a Python interpreter"
        out "  manually by rerunning the ./configure script with the "
        out "  '--with-python' option."
    fi
    out ""
}

out() {
    
    if [ -z "$QUIET" ]; then
        echo $1
    fi
}

NEWOPTS=""

for OPT in $@; do
    case "$OPT" in
    --h* | -h*)
        usage
        exit 0
        ;;
    --with-python=*)
        # pop this argument from the arglist, it is not valid to
        # pass this along to the Python configurator.
        shift;
        FOUND=`echo $OPT | sed -e 's/--with-python\=//'`
        # use eval to do tilde expansion below
        eval "FOUND='$FOUND'"
        out ""
        out "Using Python interpreter at $FOUND"
        ;;
    --with-python)
	# in case someone passed in a --with-python without a value,
        # we raise an error instead of passing it along to configure.py
        # (which would raise an inscrutable error were it to receive this
        # option).
        out "--with-python argument requires an option"
	exit 1
        ;;
    --quiet* | -q*)
        QUIET="true"
        NEWOPTS="$NEWOPTS $OPT"
        ;;
    *)
        NEWOPTS="$NEWOPTS $OPT"
        ;;
    esac
done

out ""
out "Configuring Zope installation"
out ""

if [ -z "$FOUND" ]; then
    get_python
fi

# run the Python configurator
"$FOUND" "$HERE/inst/configure.py" $NEWOPTS
