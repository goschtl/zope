[buildout]
develop = .
parts = test selenium nginx nginx-ctl instance memcached
find-links = http://download.zope.org/distribution

[test]
recipe = zc.recipe.testrunner
eggs = lovely.remoteinclude [test]

[zope3]
location =

[app]
recipe = zc.zope3recipes:app
servers = zserver
site.zcml =
   <include package="lovely.remoteinclude.demo"/>
eggs = lovely.remoteinclude [test]

[instance]
recipe = zc.zope3recipes:instance
application = app
address = 8034
zope.conf = ${database:zconfig}

[database]
recipe = zc.recipe.filestorage


[selenium-app]
recipe = zc.zope3recipes:app
servers = zserver
site.zcml =
   <include package="lovely.remoteinclude.demo"/>
   <include package="zc.selenium"/>
eggs = lovely.remoteinclude [test]

[selenium-instance]
recipe = zc.zope3recipes:instance
application = selenium-app
zope.conf =
    <server http0>
      type WSGI-HTTP
      address 8034
    </server>

    <zodb>
      <demostorage>
      </demostorage>
    </zodb>

    <accesslog>
      <logfile>
        path STDOUT
      </logfile>
    </accesslog>

    <eventlog>
      <logfile>
        path STDERR
      </logfile>
    </eventlog>

[selenium]
recipe = zc.recipe.egg:scripts
eggs = ${selenium-app:eggs}
script = selenium
entry-points = selenium=zc.selenium.selenium:main
initialization =
    sys.argv.insert(1, '${selenium-instance:run-directory}/zope.conf')

[nginx]
recipe = zc.recipe.cmmi
url = http://sysoev.ru/nginx/nginx-0.5.22.tar.gz
extra_options = --with-poll_module

[nginx-ctl]
recipe = lovely.recipe:mkfile
path = ${buildout:bin-directory}/nginx
mode = 0755
content =
 #!/bin/sh
 PIDFILE=${nginx:location}/logs/nginx.pid
    case "$1" in
      start)
       ${nginx:location}/sbin/nginx -c ${buildout:directory}/src/lovely/remoteinclude/demo/nginx.conf
        ;;
      stop)
        kill -QUIT `cat $PIDFILE`
        ;;
      reload)
        kill -HUP `cat $PIDFILE`
      ;;
      restart|force-reload)
        $0 stop
        sleep 1
        $0 start
        ;;
      *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
        exit 1
        ;;
    esac

[memcached]
recipe = zc.recipe.cmmi
url = http://www.danga.com/memcached/dist/memcached-1.2.2.tar.gz
extra_options = --with-libevent=${libevent:location}

[memcached-ctl]
recipe = lovely.recipe:mkfile
path = ${buildout:bin-directory}/memcached
mode = 0755
content =
 #!/bin/sh
 PIDFILE=${memcached:location}/memcached.pid
    case "$1" in
      start)
       ${memcached:location}/bin/memcached -d -P $PIDFILE
        ;;
      stop)
        kill `cat $PIDFILE`
        ;;
      restart|force-reload)
        $0 stop
        sleep 1
        $0 start
        ;;
      *)
        echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
        exit 1
        ;;
    esac


[libevent]
recipe = zc.recipe.cmmi
url = http://www.monkey.org/~provos/libevent-1.3b.tar.gz
