=================
Pagelet directive
=================

Show how we can use the pagelet directive. Register the meta configuration for 
the directive.

  >>> import os, sys, tempfile
  >>> from zope import interface, component
  >>> from zope.configuration import xmlconfig
  >>> import z3ext.layout
  >>> context = xmlconfig.file('meta.zcml', z3ext.layout)

We need also a custom pagelet class:

  >>> from z3ext.layout.pagelet import BrowserPagelet
  >>> class MyPagelet(BrowserPagelet):
  ...     """Custom pagelet"""

Make them available under the fake package ``custom``:

  >>> sys.modules['custom'] = type(
  ...     'Module', (), 
  ...     {'MyPagelet': MyPagelet})()

Register a pagelet within the directive with minimal attributes:

  >>> context = xmlconfig.string("""
  ... <configure xmlns:z3ext="http://namespaces.zope.org/z3ext">
  ...   <z3ext:pagelet
  ...       name="index.html"
  ...       class="custom.MyPagelet"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... """, context)

Let's get the pagelet

  >>> import zope.component
  >>> from zope.publisher.browser import TestRequest
  >>> pagelet = zope.component.queryMultiAdapter((object(), TestRequest()), 
  ...     name='index.html')

and check them:

  >>> pagelet
  <z3ext.layout.zcml.PageletClass from <class 'MyPagelet'> ...>

  >>> pagelet.context
  <object object at ...>

Register the pagelet with a different name and more attributes provided from
the directive. We also use a custom attribute called label here.
Also we don't use BrowserPagelet as parent class, pagelet directive automaticly
adds BrowserPagetlet to bases classes. Let's define some more components...

  >>> class SecondPagelet(object):
  ...     label = u''

  >>> import zope.interface
  >>> class IContent(zope.interface.Interface):
  ...     """Content interface."""

  >>> class Content(object):
  ...     zope.interface.implements(IContent)

register the new classes in the custom module...

  >>> sys.modules['custom'].IContent = IContent
  >>> sys.modules['custom'].Content = Content
  >>> sys.modules['custom'].SecondPagelet = SecondPagelet

and use them in the directive:

  >>> context = xmlconfig.string("""
  ... <configure xmlns:z3ext="http://namespaces.zope.org/z3ext">
  ...   <z3ext:pagelet
  ...       name="custom.html"
  ...       class="custom.SecondPagelet"
  ...       for="custom.IContent"
  ...       permission="zope.Public"
  ...       label="my Label" />
  ... </configure>
  ... """, context)

Get the pagelet for the new content object

  >>> import zope.component
  >>> pagelet = zope.component.queryMultiAdapter((Content(), TestRequest()), 
  ...     name='custom.html')

and check them:

  >>> pagelet
  <z3ext.layout.zcml.PageletClass from <class 'SecondPagelet'> ...>

  >>> pagelet.label
  u'my Label'

We also can provide another interface then the IPagelet within the directive.
Such a interface must be inherited from IPagelet.

  >>> class NewPagelet(BrowserPagelet):
  ...     """New pagelet"""
  >>> sys.modules['custom'] = type(
  ...     'Module', (), 
  ...     {'NewPagelet': NewPagelet})()


Now register the pagelet within a interface.

  >>> class INewPagelet(interface.Interface):
  ...     """New pagelet interface."""
  >>> sys.modules['custom'] = type(
  ...     'Module', (), 
  ...     {'INewPagelet': INewPagelet, 'NewPagelet': NewPagelet})()

  >>> context = xmlconfig.string("""
  ... <configure xmlns:z3ext="http://namespaces.zope.org/z3ext">
  ...   <z3ext:pagelet
  ...       name="new.html"
  ...       class="custom.NewPagelet"
  ...       permission="zope.Public"
  ...       provides="custom.INewPagelet" />
  ... </configure>
  ... """, context)

And if we get the pagelet, we can see that the object provides the new 
pagelet interface:

  >>> pagelet = zope.component.queryMultiAdapter((object(), TestRequest()), 
  ...     name='new.html')
  >>> pagelet
  <z3ext.layout.zcml.PageletClass from <class 'NewPagelet'> ...>

  >>> INewPagelet.providedBy(pagelet)
  True

We can create pagelet without specific class

  >>> context = xmlconfig.string("""
  ... <configure xmlns:z3ext="http://namespaces.zope.org/z3ext">
  ...   <z3ext:pagelet
  ...       name="noclass.html"
  ...       permission="zope.Public" />
  ... </configure>
  ... """, context) 

  >>> pagelet = zope.component.queryMultiAdapter((object(), TestRequest()), 
  ...     name='noclass.html')
  >>> pagelet
  <z3ext.layout.zcml.PageletClass from None ...>


We can create pagelet with template:

  >>> context = xmlconfig.string("""
  ... <configure xmlns:z3ext="http://namespaces.zope.org/z3ext">
  ...   <z3ext:pagelet
  ...       name="unknown.html"
  ...       template="unknown.pt"
  ...       permission="zope.Public" />
  ... </configure>
  ... """, context)
  Traceback (most recent call last):
  ...
  ZopeXMLConfigurationError: File "<string>", line 3.2-6.33
  ConfigurationError: ('No such file', ...unknown.pt')

  >>> temp_dir = tempfile.mkdtemp()
  >>> template = os.path.join(temp_dir, 'pagelet.pt')
  >>> open(template, 'w').write('''<div>My pagelet</div>''')

  >>> context = xmlconfig.string("""
  ... <configure xmlns:z3ext="http://namespaces.zope.org/z3ext">
  ...   <z3ext:pagelet
  ...       name="template.html"
  ...       template="%s"
  ...       permission="zope.Public" />
  ... </configure>
  ... """%template, context)

  >>> pagelet = zope.component.queryMultiAdapter((object(), TestRequest()), 
  ...     name='template.html')
  >>> pagelet
  <z3ext.layout.zcml.PageletClass from None ...>

  >>> pagelet.template
  <BoundPageTemplateFile of <z3ext.layout.zcml.PageletClass from None ...>>

Pagelet rendering

  >>> print pagelet.render()
  <div>My pagelet</div>
  <BLANKLINE>

We should use page template as template for pagelet or we should
provide IPageTemplate adapter for pagelet

  >>> pagelet = zope.component.queryMultiAdapter((object(), TestRequest()), 
  ...     name='noclass.html')
  >>> pagelet.render()
  Traceback (most recent call last):
  ...
  LookupError: Can't find IPageTemplate for pagelet.

  >>> from zope.pagetemplate.interfaces import IPageTemplate
  >>> from zope.app.pagetemplate import ViewPageTemplateFile
  >>> pt = ViewPageTemplateFile(template)
  >>> def getPT(context, request):
  ...     return pt
  >>> component.getSiteManager().registerAdapter(
  ...     getPT, (pagelet.__class__, interface.Interface), IPageTemplate, '')

  >>> print pagelet.render()
  <div>My pagelet</div>
  <BLANKLINE>

Now we need to clean up the custom module.

  >>> del sys.modules['custom']
