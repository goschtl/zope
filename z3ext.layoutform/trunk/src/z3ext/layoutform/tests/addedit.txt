========
Add form
========

  >>> from zope import interface, component, schema
  >>> from zope.app.component.hooks import setSite
  >>> from zope.app.testing.functional import getRootFolder
  >>> from zope.testbrowser.testing import Browser
  >>> from zope.security.checker import defineChecker, Checker, CheckerPublic
  >>> from zope.app.security.protectclass import protectSetAttribute

  >>> from z3ext.layoutform import Fields
  >>> from z3ext.layoutform.add import PageletAddForm
  >>> from z3ext.layoutform.edit import PageletEditForm
  >>> from z3ext.layoutform import subform, interfaces

  >>> root = getRootFolder()

  >>> class IPerson(interface.Interface):
  ...
  ...     name = schema.TextLine(
  ...         title=u'Name',
  ...         missing_value = u'',
  ...         required=True)
  ...
  ...     age = schema.Int(
  ...         title=u'Age',
  ...         description=u"The person's age.",
  ...         min=0,
  ...         default=20,
  ...         required=False)

  >>> from z3ext.layoutform.tests.tests import Person

  >>> interface.classImplements(Person, IPerson)

  >>> required = {'name': CheckerPublic,
  ...             'age': CheckerPublic,
  ...             'info': CheckerPublic}
  >>> defineChecker(Person, Checker(required))

  >>> protectSetAttribute(Person, 'name', CheckerPublic)
  >>> protectSetAttribute(Person, 'age', CheckerPublic)
  >>> protectSetAttribute(Person, 'info', CheckerPublic)

implmenent and register person add form

  >>> class AddPersonForm(PageletAddForm):
  ...
  ...     fields = Fields(IPerson)
  ...     
  ...     def create(self, data):
  ...         person = Person()
  ...         person.name = data['name']
  ...         person.age = data['age']
  ...         return person
  ...     
  ...     def add(self, content):
  ...         self.context['person'] = content
  ...         return self.context['person']

  >>> required = {'__call__': CheckerPublic,
  ...             'browserDefault': CheckerPublic,
  ...             'publishTraverse': CheckerPublic}
  >>> defineChecker(AddPersonForm, Checker(required))

  >>> component.getSiteManager().registerAdapter(
  ...     AddPersonForm, (interface.Interface, interface.Interface),
  ...     interface.Interface, name='addperson.html')

  >>> actor = Browser()
  >>> actor.addHeader("Authorization", "Basic mgr:mgrpw")
  >>> actor.handleErrors = False

  >>> actor.open('http://localhost/addperson.html')
  >>> actor.getControl('Cancel').click()
  >>> actor.url
  'http://localhost/'

  >>> actor.open('http://localhost/addperson.html')
  >>> actor.getControl('Add').click()
  >>> 'Please fix indicated errors.' in actor.contents
  True

  >>> actor.getControl('Name').value = 'Nikolay'
  >>> actor.getControl('Age').value = '30'
  >>> actor.getControl('Add').click()

  >>> print list(root.keys())
  [u'person']


  >>> class EditPersonForm(PageletEditForm):
  ...
  ...     fields = Fields(IPerson)
  ...     
  ...     def nextURL(self):
  ...         assert super(EditPersonForm, self).nextURL() == ''
  ...         return './edit.html'

  >>> required = {'__call__': CheckerPublic,
  ...             'browserDefault': CheckerPublic,
  ...             'publishTraverse': CheckerPublic}
  >>> defineChecker(EditPersonForm, Checker(required))

  >>> component.getSiteManager().registerAdapter(
  ...     EditPersonForm, (Person, interface.Interface),
  ...     interface.Interface, name='edit.html')

  >>> actor.open('http://localhost/person/edit.html')

  >>> actor.getControl('Name').value = ''
  >>> actor.getControl('Age').value = ''
  >>> actor.getControl('Save').click()

  >>> print actor.contents
  <html>
  ...
  ...Please fix indicated errors...
  ...
  <div class="z-form-fieldset">
    <div class="z-form-field error">
    <label for="form-widgets-name" title="">Name</label>
    <span class="z-form-fieldRequired">&nbsp;</span>
    <div class="error">Required input is missing.</div>
    <div>
       <input id="form-widgets-name" name="form.widgets.name"
              class="text-widget required textline-field"
              value="" type="text" />
    </div>
  </div>
  ...
  </html>

  >>> actor.getControl('Name').value = 'Nikolay Kim'
  >>> actor.getControl('Age').value = '25'
  >>> actor.getControl('Save').click()

  >>> 'Data successfully updated.' in actor.contents
  True

  >>> root['person'].name, root['person'].age
  (u'Nikolay Kim', 25)


  >>> class IPersonInfo(interface.Interface):
  ...
  ...     info = schema.Datetime(
  ...         title=u'Information',
  ...         required=False)

  >>> interface.classImplements(Person, IPersonInfo)

  >>> class PersonInfo(subform.PageletEditSubForm):
  ...     interface.implements(interfaces.IPageletSubform)
  ...
  ...     weight = 10
  ...     fields = Fields(IPersonInfo)

  >>> component.getSiteManager().registerAdapter(
  ...     PersonInfo, (interface.Interface,EditPersonForm,interface.Interface),
  ...     interfaces.IPageletSubform, name='info')

  >>> from pytz import utc
  >>> from datetime import datetime
  >>> root['person'].info = datetime.now(utc)

  >>> actor.open('http://localhost/person/edit.html')

  >>> actor.getControl('Information').value = "09/12/01 10:00"
  >>> actor.getControl('Save').click()

  >>> 'Data successfully updated.' in actor.contents
  True

  >>> del root['person'].info

  >>> actor.getControl('Information').value = "09/12/01 10:00"
  >>> actor.getControl('Save').click()

  >>> 'Data successfully updated.' in actor.contents
  True

  >>> actor.getControl('Save').click()
  >>> 'No changes were applied.' in actor.contents
  True

  >>> root['person'].name, root['person'].age, root['person'].info
  (u'Nikolay Kim', 25, datetime.datetime(...))
