zope.introspectorui.util
************************

Helpers for the zope.introspectorui

:Test-Layer: functional

This module provides some helpers, mainly for dealing with
URLs.

CodeBreadcrumbProvider
======================

An adapter that provides HTML breadcrumbs for a certain code view.

We construct a package representation for ``zope.introspector``::

  >>> from zope.introspector.code import Package
  >>> pkg = Package('zope.introspector')

The package must be located to be referencable by an URL. We fake a
location tree with a faked root::

  >>> from zope.location.location import located
  >>> root = object()
  >>> pkg_zope = located(Package('zope'), root, 'zope')
  >>> pkg_introspector = Package('zope.introspector')
  >>> pkg = located(pkg_introspector, pkg_zope, 'introspector')

Now we get the appropriate info object for this representation. This
is normally done using adapters, but we can shorten the way here and
use the ``PackageInfo`` directly::

  >>> from zope.introspector.code import PackageInfo
  >>> info = PackageInfo(pkg)

To create an appropriate view, however, we need a request::

  >>> from zope.publisher.browser import TestRequest
  >>> request = TestRequest()

Finally we can create the view::

  >>> from zope.introspectorui.code import Package as PackageView
  >>> view = PackageView(info, request)

We can now get breadcrumbs for this view using the adapter. This
adapter provides support for objects, that implement
``zope.introspectorui.interfaes.ICodeView`` only::

  >>> from zope.introspectorui.interfaces import IBreadcrumbProvider
  >>> from zope.component import getAdapter
  >>> provider = IBreadcrumbProvider(view)
  >>> provider
  <zope.introspectorui.util.CodeBreadcrumbProvider object at 0x...>

This provider gives us the breadcrumbs for the view of the
`zope.introspector` package as HTML code::

  >>> provider.getBreadcrumbs()
  '<a href="http://.../zope">zope</a>.<a href="http://.../zope/introspector">introspector</a>'


`get_doc_format(module)`
------------------------

This function was taken from ``zope.app.apidoc``. It inspects a module
to determine the supported documentation format. The function returns
a valid renderer source factory id.

If the `__docformat__` module attribute is specified, its value will
be used to look up the factory id:

  >>> from zope.introspectorui.util import get_doc_format
  >>> from zope import introspector
  >>> get_doc_format(introspector)
  'zope.source.plaintext'

By default and different to ``zope.app.apidoc``, plain text is returned:

  >>> from zope.introspectorui import tests
  >>> get_doc_format(tests)
  'zope.source.plaintext'

The `__docformat__` attribute can also optionally specify a language field. We
simply ignore it:

  >>> class Module(object):
  ...     pass
  >>> module = Module()
  >>> module.__docformat__ = 'structuredtext en'
  >>> get_doc_format(module)
  'zope.source.stx'

The third supported source factory id is 'restructuredtext'::

  >>> module.__docformat__ = 'restructuredtext'
  >>> get_doc_format(module)
  'zope.source.rest'
