       ##############################################################################
       #
       # Copyright (c) 2011 Zope Foundation and Contributors.
       # All Rights Reserved.
       #
       # This software is subject to the provisions of the Zope Public License,
       # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
       # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
       # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
       # FOR A PARTICULAR PURPOSE.
       #
       ##############################################################################
    1: """Mongo Persistence Testing Support"""
    1: from __future__ import absolute_import
    1: import doctest
    1: import pymongo
    1: import re
    1: import transaction
    1: from zope.testing import module, renormalizing
       
    1: from mongopersist import datamanager, serialize
       
    1: checker = renormalizing.RENormalizing([
    1:     (re.compile(r'datetime.datetime(.*)'),
    1:      'datetime.datetime(2011, 10, 1, 9, 45)'),
    1:     (re.compile(r"ObjectId\('[0-9a-f]*'\)"),
    1:      "ObjectId('4e7ddf12e138237403000000')"),
    1:     (re.compile(r"object at 0x[0-9a-f]*>"),
    1:      "object at 0x001122>"),
           ])
       
       OPTIONFLAGS = (doctest.NORMALIZE_WHITESPACE|
    1:                doctest.ELLIPSIS|
    1:                doctest.REPORT_ONLY_FIRST_FAILURE
                      #|doctest.REPORT_NDIFF
                      )
       
    1: def setUp(test):
   46:     module.setUp(test)
   46:     test.globs['conn'] = pymongo.Connection('localhost', 27017, tz_aware=False)
   46:     test.globs['DBNAME'] = 'mongopersist_test'
   46:     test.globs['conn'].drop_database(test.globs['DBNAME'])
   46:     test.globs['commit'] = transaction.commit
   46:     test.globs['dm'] = datamanager.MongoDataManager(
   46:         test.globs['conn'],
   46:         default_database=test.globs['DBNAME'],
   46:         root_database=test.globs['DBNAME'])
       
    1: def tearDown(test):
   46:     module.tearDown(test)
   46:     transaction.abort()
   46:     test.globs['conn'].drop_database(test.globs['DBNAME'])
   46:     test.globs['conn'].disconnect()
   46:     serialize.SERIALIZERS.__init__()
