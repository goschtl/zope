HACKING:

- you need the wosc-test-stacking branch of zope.interface, too
- after buildout, delete _zope_interface_coptimizations.so
  (until we get to the point about C-code on the todo list)


TODO:

* zope.component

major:

- persisting/pickling stackables

  * scope for persistent stackables: the currently running process, i.e. it's
    okay not to persist the stackable-registry

  * we might not have to do anything special for persistent component
    registries, since the ZODB synchronizes changes to all copies of a
    persistent object on transaction boundaries.

  - support stackable(PersistentList/PersistentMapping)
    (makes trouble on unpickling, does not restore stackable.stack right now)

  * we have a conflict of roles:
  a stackable object needs to fulfill three roles:
  1. the object it delegates to
  2. its own concerns
  3. (new) persistence

  Two of these (1+3) are outside of our control, which especially means we
  can't control the method names in play, and it could (and does) happen that 1
  has methods itself that reappear in 3. (example: PersistentList has its own
  idea about __setstate__ and friends, which the Stackable itself needs too,
  for its own persistence). --> conflict

  Idea: use proxying behaviour, i.e. intercept the persistence protocol, use it
  for Stackable's purpose *and* pass it on to the delegated object. [rejected]

  Idea: Stackable doesn't have to do anything about the persistence of the
  delegated object (will be handled automagically by the ZODB).
  Stackable doesn't even have state of its own except the ``stack`` attribute
  (which then takes care of itself since it's a PersistentList).

  Problem: unexpected, obscure exception:
  File "ZODB/Connection.py", line 549, in tpc_begin
    self._normal_storage.tpc_begin(transaction)
  AttributeError: 'NoneType' object has no attribute 'tpc_begin'

  - put stackable() into persistentregistry.py
  - stackable.stack needs to be a PersistentList

- Tests for zope.component-Stacking: can we run the existing tests on a push
  and then pop "level"? (Maybe use another existing application as a
  cross-check, too).

- zope.interface uses C-code for some parts. Is it a performance problem that
  'stackable' is Python-code? (This should only apply to tests, since we're
  going to want to create a way to bypass the stackable stuff)

- Name StackableBase methods with a prefix so they don't conflict with
  delegated methods (e.g. pop).

minor:

- rewrite persistence test to use DemoStorage instead of FileStorage


* Stackable:
- Needs a better name
- Create separate egg?

- stackable.reset() needs to take into account "dying" stackables

- have a name or "stack context", so you can say push('zope.component')
- do we leak memory regarding unregistering of stackables?


* later
- Do we have to make _v_subregistries stackable, i.e. do we want/need to
  support changing __bases__ and restoring that after pop?
