===============
Calendar Widget
===============


Configuration
-------------

    >>> from zope.interface.verify import verifyObject
    >>> from zc.datetimewidget.datetimewidget import (
    ...     CalendarWidgetConfiguration, ICalendarWidgetConfiguration)

Let's create a standard configuration object:

    >>> conf = CalendarWidgetConfiguration('field.x')
    >>> verifyObject(ICalendarWidgetConfiguration, conf)
    True

Fields have their default values:

    >>> conf.daFormat
    u'%Y/%m/%d'
    >>> conf.singleClick
    True
    >>> print conf.flat
    None

We can customize some attributes during instantiation:

    >>> import datetime
    >>> conf = CalendarWidgetConfiguration('x', date=datetime.date(2006, 8, 25))
    >>> conf.date
    datetime.date(2006, 8, 25)


Dumping JavaScript
------------------

Configuration can be dumped as JavaScript.  First an empty configuration:

    >>> print CalendarWidgetConfiguration('field.x').dumpJS()
    Calendar.setup({
    <BLANKLINE>
    });

Now let's add a few customizations:

    >>> conf = CalendarWidgetConfiguration('x', daFormat=u'%m-%d',
    ...     inputField='inp', eventName=None, date=conf.date)
    >>> print conf.dumpJS()
    Calendar.setup({
      inputField: 'inp',
      eventName: null,
      daFormat: '%m-%d',
      date: date(2006, 7, 25)
    });

Invalid arguments are not accepted:

    >>> conf = CalendarWidgetConfiguration('x', foo='bar')
    Traceback (most recent call last):
        ...
    ValueError: unknown arguments: foo


Date set widget
---------------

    >>> from zc.datetimewidget.datetimewidget import DateSetWidget
    >>> from zope.schema import Set
    >>> from zope.publisher.browser import TestRequest

    >>> request = TestRequest()
    >>> field = Set()
    >>> field.context = set()
    >>> widget = DateSetWidget(field, object(), request)

    >>> print widget() # doctest: +REPORT_NDIFF
    <BLANKLINE>
    <input class="textType" id="field." name="field." size="30" type="text" value=""  />
    <input type="button" value="..." id="field._trigger">
    <script type="text/javascript">
    <BLANKLINE>
      var multi_field_ = [];
      Calendar.setup({
      inputField: 'field.',
      button: 'field._trigger',
      ifFormat: '%Y-%m-%d',
      onClose: getMultipleDateClosedHandler("field.", multi_field_),
      multiple: multi_field_
    });
    <BLANKLINE>
    </script>
    <BLANKLINE>

