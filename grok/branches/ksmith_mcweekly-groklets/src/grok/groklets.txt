========
Groklets
========

Groklets are like viewlets but without viewletmanagers.

Example Code
------------

The following registers a groklet for MyView named view::
	      
 class MyView(grok.View):
     grok.context(App)
     grok.name('index')

 class MyGroklet(Groklet): # registers directly with the view
     grok.context(MyView)
     grok.name('center') # the 'provider' name
     order = 10 # optional

     def render(self):
        return "<h2>groklet 1</h2>"

 class MyGroklet2(Groklet):
     grok.context(MyView) # associate with view or interface
     grok.name('center')
     order = 20

     def render(self):
        return "<h2>groklet 2</h2>"

The groklets are available using the 'groklet' tal namespace.
app_templates/myview.pt::

 <span tal:replace="structure view/groklet:center" />

Output...::

 <h2>groklet 1</h2><h2>groklet2</h2>


Comparison to Viewlet
---------------------

Typicla registration for a traditional viewlet...::

 class MyView(grok.View):
     grok.context(App)
     grok.name('index')
 
 class MyViewletManager(ViewletManager):
     # unless customized, this is a dead chicken
     grok.context(MyView)
     grok.name('center')

 class MyViewlet1(Viewlet):
     grok.viewletmanager(MyViewletManager)
     order =10

     def render(self):
        return "<h2>viewlet 1</h2>"

 class MyViewlet2(Viewlet):
     grok.viewletmanager(MyViewletManager)
     order = 20

     def render(self):
        return "<h2>viewlet 2</h2>"

app_templates/myview.pt::

 <span tal:replace="structure view/provider:center" />

output...::

 <h2>viewlet 1</h2><h2>viewlet2</h2>

In this example it may not seem obvious, but when you have a 'left',
'center', 'right', 'header', 'footer' providers, the dead chickens
pile up quick, since in the common case the viewletmanager does
nothing more than associate the provider name.


TODO
----

* Allow groklets to act as viewletmanagers for custom rendering solutions.