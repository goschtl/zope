==================================
Plugging in new template languages
==================================

:Author: Lennart Regebro

Introduction
------------
Grok uses Zope Page Templates as default templating language, since this is
the default of Zope 3. Of course you can use whatever templating language you
want in Grok, but to get the automatic association between template
objects/files and views you need to do a little bit of extra work.


Inline templates
----------------
"Inline" templates are templates where the template code is written inside the
python class. To get the automatic association to a view class, you need to
write a class that subclasses from grok.components.GrokTemplate. There are 
however some methods you need to override, namely the fromFile and fromString
factory methods, and the render method.

Here is an example of a minimal page template integration:

.. code-block:: python

class MyPageTemplate(grok.components.GrokTemplate):

    def fromTemplate(self, template):
        return MyTemplate(template)

    def fromFile(self, filename, _prefix=None):
        file = open(os.path.join(_prefix, filename))
        return MyTemplate(file.read())

    def render(self, view):
        return self.getTemplate().render(**self.getNamespace(view))

With this class finished you can create an inline template, like this:

.. code-block:: python

>>> class AView(grok.View):
>>>     pass
>>>     
>>> aview = MyPageTemplate('<html><body>Some text</body></html>')

And also you can create a filebase template, inline:

.. code-block:: python

>>> class AView(grok.View):
>>>     pass
>>>     
>>> aview = MyTemplateFile('lasceuax.html')


Templates in the _templates directory
-------------------------------------

The most common usecase is however to place the templates in the views
template directory. To do that, a global utility that generates
MyPageTemplates from the filenames found is needed. That utility needs to
implement the ITemplateFileFactory interface. 

.. code-block:: python

class MyPageTemplateFactory(grok.GlobalUtility):

    grok.implements(grok.interfaces.ITemplateFileFactory)
    grok.name('mtl')

    def __call__(self, filename, _prefix=None):
        return MyPageTemplate(filename=filename, _prefix=_prefix)

When your module gets grokked, Grok will now pick up on the
MyPageTemplateFactory class, register it as a global utility for templates
with the '.mtl' extension and you can start creating .mtl files in the
template directory for your class.

That's all you need! Have fun!
