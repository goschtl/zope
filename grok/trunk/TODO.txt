====
TODO
====

Meta
====

- setup homepage (grok.zope.org or zope.org/grok, wiki or rest) (faassen)

- tutorial (faassen)

- reference (theuni)


Core
====

- tests: does suppressing of pagetemplateresources work?

- choice fields / sources (theuni)

- containers

- annotations (faassen)

- testing strategy for the tutorial (faassen)

- security: grok.permission, grok.require, ... and the needed additions

  to the security policy (philikon, theuni)

- traversal - not megrok.routes (philikon)

- global utilities (wosc)

- interfaces (nothing to do there)

- xml-rpc (theuni)

- make it easier to write tests (wosc, faassen)

- local registrations (philikon)

- grok.App (philikon)

- add forms

- schema driven development (faassen, wosc)

- error reporting during grokking (provide file/line-number information
  on our extrinsically generated errors) (philikon)

- do not accept automatic directory guessing convention for __init__.py, bail
  out with grok error instead

Need to discuss
---------------

- fall back to a static resource that is defined in a package on a higher
  level if no static resource directory is defined locally in a package?

- change naming convention for template directories from
  "<modulename>" to "template_<modulename>" or similar, to avoid
  confusion?

- grok buildout integration

- grok.grokkable (to allow grokking of imported things)

- skins

- form redirect

- grok.resourcedir (multiple? per package? ...?)

- authentication (pau integration) (faassen)

- sessions (get the session information for something, similar to
  annotations?)

- menus - define a menu, associate a view with a menu (module-level,
  class-level)

- making new widgets (faassen, philikon)

- local persistent utilities (e.g. catalog) (faassen, wosc)

- Admin UI (faassen, jw)

- catalog (faassen, wosc)

- IMPORTANT: different strategies: grok.definefoo() versus n =
  grok.Foo(), watch out for consistency/symmetry/...

- have a custom security policy that is easier to understand than the
  default Zope 3 policy

- use ZCML's conflict resolution machinery

- FooBase convention + grok.baseclass to not grok certain classes

Punt
----

- making new fields

- viewlets / content providers (LATER)

- RDB - via extension: megrok.sqlalchemy for example - make it easy to
  go between the different schema implementations

- containment constraints (wait for zope 3 to do them right)

- reload


Open Questions
==============

- grok.name, grok.template class restrictions (e.g. grok.template
  should only be usable from grok.View subclasses)

- support grok.template(template) in addition to
  grok.template('name_of_template')?

- support grok.resource on view class level?
