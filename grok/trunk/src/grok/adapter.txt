Adapter
=======

  >>> import grok
  >>> grok.grok('grok.tests.adapter')

  >>> from grok.tests.adapter import IHome, Home, Cave
  >>> cave = Cave()
  >>> home = IHome(cave)

  >>> IHome.providedBy(home)
  True
  >>> isinstance(home, Home)
  True

If no model can be found in the module, we get an error:

  >>> grok.grok('grok.tests.nomodel')
  Traceback (most recent call last):
    ...
  GrokError: Adapter without context

Clean up component registry:

  >>> from zope.testing.cleanup import cleanUp
  >>> cleanUp()

Imported model and adapter won't be grokked:

  >>> grok.grok('grok.tests.importedmodel')
  >>> home = IHome(cave)
  Traceback (most recent call last):
    ...
  TypeError: ('Could not adapt', <grok.tests.adapter.Cave object at ...>, <InterfaceClass grok.tests.adapter.IHome>)

Clean up:

  >>> cleanUp()

Grok error because import model doesn't count as context:

  >>> grok.grok('grok.tests.importedmodel2')
  Traceback (most recent call last):
    ...
  GrokError: Adapter without context

Clean up:

  >>> cleanUp()

Grok does not depend on the alphabetical order:

  >>> grok.grok('grok.tests.alphabetical')

  >>> from grok.tests.alphabetical import IHome, Home, ZCave
  >>> cave = ZCave()
  >>> home = IHome(cave)

  >>> IHome.providedBy(home)
  True
  >>> isinstance(home, Home)
  True

Clean up:

  >>> cleanUp()

If the model is defined after the adapter, it should still be grokked
properly:

  >>> grok.grok('grok.tests.order')

  >>> from grok.tests.order import IHome, Home, Cave
  >>> cave = Cave()
  >>> home = IHome(cave)

  >>> IHome.providedBy(home)
  True
  >>> isinstance(home, Home)
  True

Clean up:

  >>> cleanUp()

Multiple models lead to ambiguity:

  >>> grok.grok('grok.tests.multiple')
  Traceback (most recent call last):
    ...
  GrokError: Ambiguous contexts, please use grok.context.

Clean up:

  >>> cleanUp()

Explicit module-level context in case of multiple models:

  >>> grok.grok('grok.tests.modulecontext')

  >>> from grok.tests.modulecontext import IHome, Home, Cave
  >>> cave = Cave()
  >>> home = IHome(cave)

  >>> IHome.providedBy(home)
  True
  >>> isinstance(home, Home)
  True

Clean up:

  >>> cleanUp()

Explicit module-level context for an imported model:

  >>> grok.grok('grok.tests.modulecontextimported')

  >>> from grok.tests.modulecontextimported import IPainting, Painting, Cave
  >>> cave = Cave()
  >>> painting = IPainting(cave)

  >>> IPainting.providedBy(painting)
  True
  >>> isinstance(painting, Painting)
  True

Clean up:

  >>> cleanUp()

You can't call grok.context multiple times on module level:

  >>> import grok.tests.modulecontextmultiple
  Traceback (most recent call last):
    ...
  GrokError: grok.context can only be called once per class or module.

Clean up:

  >>> cleanUp()

Explicit class-level context in case of multiple models:

  >>> grok.grok('grok.tests.classcontext')

  >>> from grok.tests.classcontext import IHome, Home, Cave
  >>> cave = Cave()
  >>> home = IHome(cave)

  >>> IHome.providedBy(home)
  True
  >>> isinstance(home, Home)
  True

Clean up:

  >>> cleanUp()

Explicit class-level context for an imported model:

  >>> grok.grok('grok.tests.classcontextimported')

  >>> from grok.tests.classcontextimported import IPainting, Painting, Cave
  >>> cave = Cave()
  >>> painting = IPainting(cave)

  >>> IPainting.providedBy(painting)
  True
  >>> isinstance(painting, Painting)
  True

Clean up:

  >>> cleanUp()

You can't call grok.context multiple times on class level:

  >>> import grok.tests.classcontextmultiple
  Traceback (most recent call last):
    ...
  GrokError: grok.context can only be called once per class or module.

Clean up:

  >>> cleanUp()

You can't call grok.context from a function:

  >>> from grok.tests.functioncontext import func, SomeClass
  >>> func()
  Traceback (most recent call last):
    ...
  GrokError: grok.context can only be used on class or module level.

You can't call grok.context from a method either:

  >>> SomeClass().meth()
  Traceback (most recent call last):
    ...
  GrokError: grok.context can only be used on class or module level.
