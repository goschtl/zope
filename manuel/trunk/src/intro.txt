Introduction
============

Manuel lets you mix and match traditional doctests with custom test syntax.

Several plug-ins that provide new syntaxes are included.  You can also make
your own.

For example, if you've ever wanted to include a large chunk of Python in a
doctest but were irritated by all the ">>>" and "..." prompts required, you'd
like the :mod:`manuel.codeblock` module.  It lets you execute code using
Sphinx-style "..  code-block:: python" directives.  The markup looks like
this::

    .. code-block:: python

        import foo

        def my_func(bar):
            return foo.baz(bar)

Incidentally, the implementation of :mod:`manuel.codeblock` is only 22 lines of
code.

For a large example of creating test syntax, take a look at the
:ref:`fit-table-example` or for all the details, :ref:`theory-of-operation`.

Also, the plug-ins included in Manuel make good examples while being quite
useful in their own right.  All the included plug-ins are listed in the next
section.


Included Functionality
======================

Manuel includes quite a bit of functionality out of the box.

:ref:`manuel.codeblock <code-blocks>`
    executes code in ".. code-block:: python" blocks

:ref:`manuel.doctest <doctest>`
    provides traditional doctest processing as a Manuel plug-in

:ref:`manuel.footnote <footnotes>`
    executes code in reST-style footnodes each time they're referenced (good
    for getting incedental code out of the main flow of a document)

:ref:`manuel.ignore <ignore>`
    ignores parts of a document while running tests

:ref:`manuel.isolation <isolation>`
    makes it easier to have test isolation in doctests
