.. _doctest:

Doctests
========

Manuel is all about making testable documents and well-documented tests.  Of
course, Python's doctest module is a long-standing fixture in that space, so it
only makes sense for Manuel to support doctest syntax.

Handling doctests is easy:

.. code-block:: python

    import manuel.doctest

    m = manuel.doctest.Manuel()
    suite = manuel.testing.TestSuite(m, 'my-doctest.txt')

Of course you can mix in other Manuel syntax plug-ins as well (including ones
you write yourself).

.. code-block:: python

    import manuel.doctest
    import manuel.codeblock

    m = manuel.doctest.Manuel()
    m += manuel.codeblock.Manuel()
    suite = manuel.testing.TestSuite(m, 'my-doctest-with-code-blocks.txt')

The :class:`manuel.doctest.Manuel` constructor also takes :data:`optionflags`
and :data:`checker` arguments.

.. code-block:: python

    m = manuel.doctest.Manuel(optionflags=optionflags, checker=checker)

See the `doctest documentation <http://docs.python.org/library/doctest.html>`_
for more information about the `available options
<http://docs.python.org/library/doctest.html#doctest-options>`_  and `output
checkers <http://docs.python.org/library/doctest.html#outputchecker-objects>`_


.. note:: :mod:`zope.testing.renormalizing` provides an :class:`OutputChecker`
   for smoothing out differences between actual and expected output for things
   that are hard to control (like memory addresses and time).  See the
   `module's doctests <http://svn.zope.org/zope.testing/trunk/src/zope/testing/renormalizing.py?view=markup>`_
   for more information on how it works.
