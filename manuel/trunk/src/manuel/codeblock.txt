.. _code-blocks:

Code Blocks
===========

`Sphinx <http://sphinx.pocoo.org/>`_ and other docutils `extensions
<http://docutils.sourceforge.net/sandbox/code-block-directive/docs/syntax-highlight.html>`_
provide a `"code-block" directive <http://sphinx.pocoo.org/markup/code.html>`_,
which allows inlined snippets of code in `reST
<http://docutils.sourceforge.net/rst.html>`_ documents.

For example a block of Python would be prefixed with ".. code-block:: python"::

    .. code-block:: python

        print 'hello'

The :mod:`manuel.codeblock` module provides the ability to execute the contents
of Python code-blocks.

.. code-block:: python

    import manuel.codeblock

.. Let's create a reST document with a code block.

    >>> document = manuel.Document("""
    ... Here is a code-block:
    ...
    ... .. code-block:: python
    ...
    ...     x = 'hello'
    ...
    ... A little prose to separate the examples.
    ...
    ...     >>> print x
    ...     hello
    ...
    ... """)

.. Since the above document mixes code-blocks and doctests, we'll mix in the
   doctest handler.

    >>> import manuel.doctest
    >>> m = manuel.codeblock.Manuel()
    >>> m += manuel.doctest.Manuel()
    >>> document.process_with(m, globs={})

    Both code blocks were found (for a total of five regions -- text, block,
    text, block, and text):

    >>> len(list(document))
    5

    We can see that none of the tests in the document failed:

    >>> print document.formatted(),

If the code-block generates some sort of error...

.. code-block:: python

    .. code-block:: python

        print does_not_exist

.. -> source

    >>> document = manuel.Document(source, location='fake.txt')

.. the document above was specially formulated to have nothing before or after
   the code-block

    >>> document.source.startswith('.. code-block')
    True
    >>> document.source.endswith('print does_not_exist\n')
    True

...that error will be reported:

    >>> document.process_with(m, globs={})
    Traceback (most recent call last):
        ...
    NameError: name 'does_not_exist' is not defined

If you find that you want to include a code-block in a document but don't want
Manuel to execute it, use :ref:`manuel.ignore <ignore>` to ignore that
particular block.


Invisible Code Blocks
---------------------

At times you'll want to have a block of code that is executed but not displayed
in the rendered document (like some setup for later examples).

When using doctest's native format (">>>") that's easy to do, you just put the
code in a reST comment, like so:

::

    .. this is some setup, it is hidden in a reST comment

        >>> a = 5
        >>> b = a + 3

However, if you want to include a relatively large chunk of Python, you'd
rather use a code-block, but that means that it will be included in the
rendered document.  Instead, :mod:`manuel.codeblock` also understands a variant
of the code-block directive (".. code-block:: python") that is actually a reST
comment: ".. invisible-code-block:: python" (note the single colon)::

    .. invisible-code-block:: python

        a = 5
        b = a + 3

.. -> source

    >>> import manuel
    >>> document = manuel.Document(source)
    >>> document.process_with(m, globs={})
    >>> print document.formatted()
