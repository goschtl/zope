.. _isolation:

Test Isolation
==============

One of the advantages of unittest over doctest is that the individual tests are
isolated from one-another.

In large doctests the later tests often depend on incedental details of earlier
tests, making the tests more brittle and harder to change.

Test isolation is one approach to reducing this intra-doctest coupling.  The
:mod:`manuel.isolation` module provides a plug-in to help.

    >>> import manuel.isolation
    >>> m = manuel.isolation.Manuel()

The ".. reset-globs" directive resets the globals in the test.  Let's create a
Manuel document to test isolation with:

    >>> document = manuel.Document("""
    ... We define a variable.
    ...
    ...     >>> x = 'hello'
    ...
    ... It is still defined.
    ...
    ...     >>> print x
    ...     hello
    ...     
    ... Now we can reset the globals and it will be gone.
    ...
    ... .. reset-globs
    ...
    ...     >>> print x
    ... """)

Since the above document mixes isolation and doctests, we'll mix in the doctest
handler.

    >>> import manuel.doctest
    >>> m.extend(manuel.doctest.Manuel())

We can see that after the globals have been reset, the "print x" line raises an
error.

    >>> document.process_with(m, globs={})
    >>> print document.formatted(),
    File "<memory>", line 2, in <memory>
    Failed example:
        print x
    Exception raised:
        ...
        NameError: name 'x' is not defined

Of course, resetting to an empty set of global variables isn't always what's
wanted.  In that case there is a ".. capture-globs" directive that saves a
baseline set of globals that will be restored at each reset.


    >>> document = manuel.Document("""
    ... We define a variable.
    ...
    ...     >>> x = 'hello'
    ...
    ... It is still defined.
    ...
    ...     >>> print x
    ...     hello
    ...
    ... We can capture the currently defined globals:
    ...
    ... .. capture-globs
    ...
    ... Of course capturing the globals doesn't disturb them.
    ...
    ...     >>> print x
    ...     hello
    ... 
    ... Now if we define a new global...
    ...
    ...     >>> y = 'goodbye'
    ...     >>> print y
    ...     goodbye
    ...
    ... .. reset-globs
    ...
    ... ...it will disappear after a reset.
    ...
    ...     >>> print y
    ...     Traceback (most recent call last):
    ...         ...
    ...     NameError: name 'y' is not defined
    ...     
    ... But the captured globals will still be defined.
    ...
    ...     >>> print x
    ...     hello
    ...
    ... """)
    >>> document.process_with(m, globs={})
    >>> print document.formatted(),
