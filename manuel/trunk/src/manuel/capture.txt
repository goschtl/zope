.. _capture:

Capturing Blocks
================

When writing documentation the need often arrises to describe the contents of
files or other non-python information.  You may also want to put that
information under test.  :mod:`manuel.capture` helps with that.

If you were writing the problems for a programming contest, you might want to
describe the input and output files for each challenge.

You would then show the contestant the expected output of their program.  But
you want to be sure that your examples are correct.

To do that you might write your document like this:

::

    Given this example input file::

        6
        1
        8
        20
        11
        65
        2

    .. -> input

    Your program should generare this output file::

        1
        2
        6
        8
        11
        20
        65

    .. -> expected

        >>> correct = '\n'.join(
        ...     map(str, sorted(map(int, input.splitlines())))) + '\n'
        >>> expected == correct
        True

.. -> source

    >>> import manuel
    >>> document = manuel.Document(source)
    >>> import manuel.capture
    >>> m = manuel.capture.Manuel()
    >>> import manuel.doctest
    >>> m += manuel.doctest.Manuel()
    >>> document.process_with(m, globs={})
    >>> print document.formatted(),

This uses the syntax implemented in :mod:`manuel.collect` to capture a block of
text into a varible (the one named after "->").

Whenever a line of the structure ".. -> VAR" is detected, the text of the
*previous* block will be stored in the given variable.

.. the paragraph below could be phrased better

Of course, lines that start with ".. " are reST comments, so when the document
is rendered with docutils or Sphinx, the tests will dissapear and only the
intended document contents will remain.
