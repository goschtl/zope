.. _ignore:

Ignoring Blocks
===============

Occasionally the need arrises to ignore a block of markup that would otherwise
be parsed by a Manuel plug-in.

For example, this document has a code-block will generate a Syntax error:

    >>> import manuel
    >>> document = manuel.Document("""
    ... The following is invalid Python.
    ...
    ... .. code-block:: python
    ...
    ...     def foo:
    ...         pass
    ...
    ... """)

We can see that when executed, the SyntaxError escapes.

    >>> import manuel.codeblock
    >>> m = manuel.codeblock.Manuel()
    >>> document.process_with(m, globs={})
    Traceback (most recent call last):
      ...
      File "<memory>:4", line 2
         def foo:
                ^
    SyntaxError: invalid syntax

The :mod:`manuel.ignore` module provides a way to ignore parts of a document
using a directive ".. ignore-next-block".

Because Manuel plug-ins are executed in the order they are accumulated, we want
:mod:`manuel.ignore` to be the base Manuel object, with any others added to it.

.. code-block:: python

    import manuel.ignore
    import manuel.doctest
    m = manuel.ignore.Manuel()
    m.extend(manuel.codeblock.Manuel())
    m.extend(manuel.doctest.Manuel())

If we add an ignore marker to the block we don't want processed...

.. code-block:: python

    >>> document = manuel.Document("""
    ... The following is invalid Python.
    ... 
    ... .. ignore-next-block
    ... .. code-block:: python
    ... 
    ...     def foo:
    ...         pass
    ... """)

...the error goes away.

    >>> document.process_with(m, globs={})
    >>> print document.formatted(),


Ignoring Literal Blocks
-----------------------

Ignoring literal blocks is a little more involved:

    >>> document = manuel.Document("""
    ... Here is some invalid Python:
    ... 
    ... .. ignore-next-block
    ... 
    ... ::
    ... 
    ...    >>> lambda: print 'hi'
    ... """)

.. no need for this bit to be visible in the docs

    >>> document.process_with(m, globs={})
    >>> print document.formatted(),

.. we want to be very sure that the above example without the ignore actually
   generates an error:

    >>> document = manuel.Document(document.source.replace(
    ...     '.. ignore-next-block', ''))
    >>> document.process_with(m, globs={})
    >>> print document.formatted(),
    File "<memory>", line 8, in <memory>
    Failed example:
        lambda: print 'hi'
    Exception raised:
          ...
          File "<doctest <memory>[0]>", line 1
             lambda: print 'hi'
                         ^
         SyntaxError: invalid syntax

