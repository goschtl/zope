HEAD only (unreleased)

  New Features

    - CMFCalendar: Added extension profile.
      You can now set up CMFCalendar in one step together with a new site or
      add calendar support to an existing site using the portal_setup tool.

    - CMFSetup: Added support for extension profiles.
      Extension profiles are profile fragments used to modify base profiles.
      They can be shipped with add-on products or used for customization
      steps. Importing an extension profile adds or overwrites existing
      settings in a fine-grained way. You can't export extension profiles.
      Snapshots and exports always represent the merged settings.

    - DirectoryView and derived classes can now have metadata associated with
      them just like regular FSObject-derived objects can.

    - DirectoryView and derived classes: It is now possible to customize what 
      gets created to represent directories inside the directory view.
      Previously, the code had a fixed assumption that all directories on the 
      file system must turn into instances of 
      CMFCore.DirectoryView.DirectoryView(Surrogate). It is now possible to 
      register a class deriving from DirectoryView and have that be 
      instantiated instead.

    - CMFSetup: Sometimes it is not necessary or desirable to create a 
      snapshot upon initial site creation. Matter of fact when run in a unit 
      test situation, addConfiguredSite can throw permission errors during the
      snapshot-taking because no specific SecurityManager has been set up.
      Add new flag "snapshot" to factory.addConfiguredSite to turn off
      snapshotting if desired

    - ActionsTool: Added new way to define Actions.
      'CMF Action Category' objects can now be added to the portal_actions
      tool and 'CMF Action' objects to categories or subcategories. To
      migrate oldstyle Actions (ActionInformation objects) you can create a
      snapshot and re-import Actions using the portal_setup tool.

    - TypesTool: TypeInformation classes are now pluggable.
      Any class that implements the TypeInformation interface and is
      a registered meta type can now be used in the TypesTool.

  Bug Fixes

    - CMFCore.PortalContent: Wrong variable name in __call__ would blow up
      if no default view could be found for a piece of content.

    - CMFSetup: Reduced probability of profile ID conflicts.
      The first argument of 'registerProfile' is now 'name' instead of
      'profile_id'. The profile ID combines 'name' and 'product'.

    - CMFSetup.skins made the assumption that the CMF site can always
      acquire REQUEST and would set up the current skin with it. Added a test
      to see if REQUEST is available and if it is not, skip the step that
      sets up the current skin.

  Others

    - To document how to create a CMF release from CMF a description is now
      included in RELEASE.txt at the root of the CMF package. This text can
      guide release managers or volunteers with the appropriate release
      privileges.

    - Added DeprecationWarning to the all_cmf_tests.py script. The canonical
      way to run the tests is using "zopectl test".
      (http://www.zope.org/Collectors/CMF/272)

    - CMFDefault: Oldstyle DefaultWorkflowDefinition is no longer registered.
      So you can't accidentally add this deprecated workflow.

    - The "Access future portal content" was not used anywhere and has been
      removed. (http://www.zope.org/Collectors/CMF/240)

    - CMFDefault: Marked 'manage_addCMFSite' as deprecated.
      'CMF Site' no longer shows up in the 'Add' list. To add a new CMF site,
      select 'Configured CMF Site' instead. The 'CMFDefault Site' profile
      creates a new site like those you know from 'CMF Site'.

    - CMFDefault: Cleaned out some super-ancient code for migrating
      or fixing PTK content so it would work with CMF.

    - CatalogTool: Removed deprecated indexes and metadata.
      'Creator' was replaced by 'listCreators', 'portal_type' should be used
      instead of 'meta_type'.

    - CMFCore: Removed some deprecated aliases and constants.

    - Permissions: Removed deprecated oldstyle permission modules.

    - TypeInformation: Removed deprecated Type method.

    - PortalFolder: Removed deprecated _morphSpec() and spec arguments.

    - Portal Types: Removed deprecated _getViewFor / getActionById machinery.
      PortalContent objects might be used as methods, so __call__() still
      returns their default view.

    - CMFDefault and CMFTopic skins: Removed deprecated DTML skins and layers.

    - ActionsTool: Removed deprecated support for oldstyle Action Providers.
      If Action Providers don't implement the ActionProvider interface they
      are now ignored.

    - Workflow: Removed deprecated WorkflowMethod machinery.

CMF 1.5.x

  For a complete list see CHANGES.txt of CMF-1_5-branch.
