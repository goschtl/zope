References analysis utility
===========================

The references module provides functions and scripts for analyzing
database references.

Let's create a couple of databases.

    >>> from ZODB.FileStorage import FileStorage
    >>> fs1 = FileStorage('fs1')
    >>> fs2 = FileStorage('fs2')
    >>> databases = {}
    >>> from ZODB.DB import DB
    >>> db1 = DB(fs1, databases=databases, database_name='db1')
    >>> db2 = DB(fs2, databases=databases, database_name='db2')
    >>> c1 = db1.open()
    >>> c2 = c1.get_connection('db2')
    >>> from ZODB.tests.util import P

We create a simple chain of objects in each db.

    >>> c1.root()['p'] = P('1.p')
    >>> c1.root()['p'].p = P('1.p.p')
    >>> c2.root()['p'] = P('2.p')
    >>> c2.root()['p'].p = P('2.p.p')
    >>> from transaction import commit
    >>> commit()

We create a cross database reference:

    >>> c1.root()['p'].x = c2.root()['p'].p
    >>> commit()

Let's create a weak reference too:

    >>> import persistent.wref
    >>> c2.root()['w'] = persistent.wref.WeakRef(c2.root()['p'].p)
    >>> commit()

Now, let's be a bit abusive.  First, we'll delete the object we
created the references to.  First, we'll create a Python reference to
it.

    >>> ob = c2.root()['p'].p
    >>> del c2.root()['p'].p
    >>> commit()

Now, we'll pack  the second database:

    >>> from ZODB.tests.util import pack
    >>> pack(db2)

and be evil by putting the object back. :)

    >>> c2.root()['p'].p = ob
    >>> del ob
    >>> commit()

    >>> c1.cacheMinimize()
    >>> c2.cacheMinimize()

Now, if we try to access the deleted object, we'll get a POSKeyError:

    >>> c2.root()['p'].p
    Traceback (most recent call last):
    ...
    POSKeyError: 0x02

    >>> c1.root()['p'].x
    Traceback (most recent call last):
    ...
    POSKeyError: 0x02

    >>> c2.root()['w']()
    Traceback (most recent call last):
    ...
    POSKeyError: 0x02

OK, so we got these errors.  We know why because we created them on
purpose. In practice, this isn't the case.  The references module can
help us figure out what's going on.

    >>> import zc.fsutil.references

The references function computes a data structure from a storage
iterator:

    >>> refs1 = zc.fsutil.references.references(fs1.iterator())

This data structure has information about all of the object ids that
either had data or were references.

    >>> from pprint import pprint
    >>> pprint(refs1, width=1)
    {'0': 
        present: True
        from_: 
        ,
     '1': 
        present: True
        from_: '0'
        ,
     '2': 
        present: True
        from_: '1'
        ,
     ('db2', '2'): 
        present: False
        from_: '1'
        }

There's an entry for each object referenced.  Each entry is a
object with 3 attributes:

present
   a flag indicating whether the oid is present in the database

from_
   a set of oids that refer to this oid

Note that object 1 is refered to by object 0 and refers to object 2
and to object 2 in the second database.  It is present in the
database.  The object in db2 is, of course, not present.

Also note that the object ids are actually hex numbers.  This isn't
apparent in the example because the numbers are so small.

The references_script function is intended to be used as a setuptools
entry point.  We'll call it directly, passing command line arguments,
which are the name of an input file and the name of an output data file:

    >>> zc.fsutil.references.references_script(['fs2', 'fs2.dat'])

The data file is just a pickle file:

    >>> import cPickle
    >>> refs2 = cPickle.Unpickler(open('fs2.dat')).load()
    >>> pprint(refs2, width=1)
    {'0': 
        present: True
        from_: 
        ,
     '1': 
        present: True
        from_: '0'
        ,
     '2': 
        present: False
        from_: '0', '1'
        }

In database 2, we see that object 2 is not present. We see that it is
refered to by object 0 and 1.

We can query these data structures using Python.  For example, to find
missing objects (and the in-database objects that reference them):

    >>> [(oid, data) for (oid, data) in refs1.iteritems()
    ...    if not data.present and isinstance(oid, str)
    ...    ]
    []

    >>> [(oid, data) for (oid, data) in refs2.iteritems()
    ...    if not data.present and isinstance(oid, str)
    ...    ]
    [('2', 
        present: False
        from_: '0', '1'
        )]


Here we see the broken weak reference from object 0 and the broken
ordinary reference from object 1.

Our data structure can't tell us about broken cross-database references
directly.

For large databases, we may need to avoid consuming lots of memory on
the database machine.  We can use a collection script that doesn't
accumulate data in memory and the use a load function to load the
data:

    >>> zc.fsutil.references.collect_script(['fs2', 'fs2.dat'])
    >>> zc.fsutil.references.load('fs2.dat')
    {'1': 
        present: True
        from_: '0'
        , '0': 
        present: True
        from_: 
        , '2': 
        present: False
        from_: '0', '1'
        }

You can pass multiple pairs of files.

    >>> zc.fsutil.references.collect_script(['fs1', 'fs1.dat', 
    ...                                      'fs2', 'fs2.dat'])
    >>> zc.fsutil.references.load('fs1.dat')
    {'1': 
        present: True
        from_: '0'
        , '0': 
        present: True
        from_: 
        , '2': 
        present: True
        from_: '1'
        , ('db2', '2'): 
        present: False
        from_: '1'
        }

    >>> zc.fsutil.references.load('fs2.dat')
    {'1': 
        present: True
        from_: '0'
        , '0': 
        present: True
        from_: 
        , '2': 
        present: False
        from_: '0', '1'
        }
