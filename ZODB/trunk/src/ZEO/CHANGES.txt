Zope Enterprise Objects (ZEO) Revision History

  ZEO 0.4

    Bugs fixed

      - The new (in 0.3) logic to switch to an ordinary user when
        started as root was executed too late so that some files were
        incorrectly owned by root. This caused ZEO clients to fail
        when the cache files were rotated.

      - There were some unusual error conditions that were not handled
        correctly that could cause clients to fail.  This was detected
        only when ZEO was put into production on zope.org.

      - The cache files weren't rotated on reads. This could cause the
        caches to grow way beyond their target sizes.

      - Exceptions raised in the servers asynchronous store handler
        could cause the client and server to get out of sync.

      - Connection and disconnection events weren't logged on the
        server.

    Features added

      - ClientStorage objects have two new constructor arguments,
        min_disconnect_poll and max_disconnect_poll to set the minimum
        and maximum times to wait, in seconds, before retrying to
        reconnect when disconnected from the ZEO server.

      - A call to get database info on startup was eliminated in
        favor of having the server send the information
        automatically. This eliminates a round-trip and, therefore
        speeds up startup a tiny bit.

      - Database size info is now sent to all clients (asynchronously)
        after a pack and after a transaction commit, allowing all
        clients to have timely size information.

      - Added client logging of connection attempts.

      - Added a misc subdirectory with sample storage server start and
        stop scripts and with a sample custom_zodb.py module.

  ZEO 0.3.0

    Bugs fixed

      - Large transactions (e.g. ZCatalog updates) could cause
        spurious conflict errors that could, eventually, make it
        impossible to modify some objects without restarting Zope.

      - Temporary non-persistent cache files were not removed at the
        end of a run.

    Features added

      - On Unix, when the storage server start script is run as root,
        the script will switch to a different user (nobody by
        default). There is a new '-u' option that can be used to
        specify the user.

      - On Unix the server will gracefully close served storages when
        the server is killed with a SIGTERM or SIGHUP. If a
        FileStorage is being served, then an index file will be
        written.

  ZEO 0.2.3

    Bugs fixed

      - Versions didn't work. Not even close. :|
 
      - If a client was disconnected from a server during transaction
        commit, then, when the client was reconnected to the server,
        attempts to commit transactions caused the client to hang.

      - The server would fail (and successfully automatically restart)
        if an unpickleable exception was raised.

  ZEO 0.2.2

    Bugs fixed

      - The storage server didn't fully implement a new ZODB storage
        protocol. This caused serving of FileStorages to fail in Zope
        2.2.1, since FileStorages now use this protocol.

      - In the start.py start script

        o The '-S' option did not allow spaces between the option and it's
          argument.  

        o The '-S' option did not work with FileStorages.

        o The README file didn't mention the '-S' option.

  ZEO 0.2.1

    Bugs fixed

      - ZEO clients didn't work properly (effectively at all) on
        Solaris or Windows NT.

      - An error in the handling of the distributed transaction lock
        could cause a client to stop writing and eventually hang if
        two clients tried to commit a transaction at the same time.

      - Extra (harmless) messages were sent from the server 
        when invalidating objects during a commit.

      - New protocols (especially 'loadSerial'), used for looking at 
        DTML historical versions, were not implemented.

    Features

      - The '-S' option was added to the storage server startup script
        to allow selection of one or more storages to serve.     

  ZEO 0.2 

    This release is expected to be close to beta quality. Initially, the
    primary goals of this release were to:

      - Correct some consistency problems that had been observed in
        0.1 on starup.

      - Allow ZEO clients to detect, survive, and recover from
        disconnection from the ZEO server.

    Based on some feedback from some folks who tried 0.1, improving
    write performance was made a priority.

    Features

      - The ZEO Client now handles server failures gracefully:

        o The client with a persistent cache can generally startup
	  even if the server is not running, assuming that it has at
	  least a minimal number of objects in the cache.

        o The client will continue to function even if the server
          connection is interuppted.

        o Server availability is detected by the client (which tries
          to connect to the server every few minutes). A disconnected
          client will automatically reconnect to an available server.

        o When the client is disconnected, write transactions cannot
          be performed.  Reads fail for objects that are not in the
          cache.

      - Performance enhancements

        The speed of write-intensive operations have been improved
	approximately 70%.  When using Unix domain sockets for
	client/server communication, ZEO transactions take roughly 2-3
	times as long as FileStorage transactions to commit.
	(This was based on some tests. Your mileage may vary.)

      - Packing support was added. Note that packing is done
        asynchrounously. The client returns immediately from a pack
        call. The server packs in a thread and sends updated
        statistics to the client when packing is completed.

      - Support for Unix-domain sockets was added.

      - Pickles sent to the server are now checked to make sure that
        they don't contain unapproved instance or global-variable
        (function) pickles.

    Bugs fixed

      - Data could be badly inconsistent when a persistent cache
        was started, due to a bug in the cache initialization logic.
      
      - The application was allowed to begin operation while the cache
        was being verified. This could lead to harmful inconsistencies.

    Changes made to Zope to support ZEO

      - A number of changes were made to ZODB to support asynchronous
        storage during transaction commit.

      - Normally Zope updates the database during startup to reflect
        product changes. This behavior is now suppressed when the
        ZEO_CLIENT environment variable is set. It doesn't make sense
        for many clients to update the database for the same products.

      - The asyncore module was modified to add support for multiple
        asyncore loops. This change was applied to asyncore in the
        Zope and the (official, owned by Sam Rushing) medusa CVS
        trees.

      - A new module, ThreadedAsync.py has been added in the Zope
        lib/python directory.  This module provides notification to
        async objects (like ZEO clients) to let them know when the
        asyncore main loop has started. This was needed to enable use
        of async code before the main loop starts.

  ZEO 0.1 (aka "iteration 1")

    This was an initial alpha of ZEO that demonstrated basic
    functionalities. It lacked robustness and has some performance
    problems on writes.

