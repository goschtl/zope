============
ObjectWidget
============

The ObjectWidget is about rendering a schema's fields as a single widget.


There are way too many preconditions to exercise the ObjectWidget as it
relies heavily on the from and widget framework.
It renders the sub-widgets in a sub-form.

In order to not overwhelm you with our set of well-chosen defaults,
all the default component registrations have been made prior to doing those
examples:

  >>> from z3c.form import testing
  >>> testing.setupFormDefaults()



  >>> from z3c.form.testing import IMySubObject
  >>> from z3c.form.testing import IMySecond
  >>> from z3c.form.testing import MySubObject
  >>> from z3c.form.testing import MySecond

  >>> import zope.component

  >>> from z3c.form.object import registerFactoryAdapter
  >>> registerFactoryAdapter(IMySubObject, MySubObject)
  >>> registerFactoryAdapter(IMySecond, MySecond)

  >>> from z3c.form.error import MultipleErrorViewSnippet
  >>> zope.component.provideAdapter(MultipleErrorViewSnippet)


As for all widgets, the objectwidget must provide the new ``IWidget``
interface:

  >>> from zope.interface.verify import verifyClass
  >>> from z3c.form import interfaces
  >>> from z3c.form.browser import object

  >>> verifyClass(interfaces.IWidget, object.ObjectWidget)
  True

The widget can be instantiated only using the request:

  >>> from z3c.form.testing import TestRequest
  >>> request = TestRequest()
  >>> widget = object.ObjectWidget(request)

Before rendering the widget, one has to set the name and id of the widget:

  >>> widget.id = 'widget-id'
  >>> widget.name = 'widget.name'

Also, stand-alone widgets need to ignore the context:

  >>> widget.ignoreContext = True

There is no life for ObjectWidget without a schema to render:

  >>> widget.update()
  Traceback (most recent call last):
  ...
  AttributeError: 'NoneType' object has no attribute 'schema'

This schema is specified by the field:

  >>> from z3c.form.widget import FieldWidget
  >>> from z3c.form.testing import IMySubObject
  >>> import zope.schema
  >>> field = zope.schema.Object(
  ...     __name__='subobject',
  ...     title=u'my object widget',
  ...     schema=IMySubObject)

Apply the field nicely with the helper:

  >>> widget = FieldWidget(field, widget)

We also need to register the templates for the widget and request:

  >>> import zope.component
  >>> from zope.pagetemplate.interfaces import IPageTemplate
  >>> from z3c.form.testing import getPath
  >>> from z3c.form.widget import WidgetTemplateFactory

  >>> zope.component.provideAdapter(
  ...     WidgetTemplateFactory(getPath('object_input.pt'), 'text/html'),
  ...     (None, None, None, None, interfaces.IObjectWidget),
  ...     IPageTemplate, name=interfaces.INPUT_MODE)

  >>> zope.component.provideAdapter(
  ...     WidgetTemplateFactory(getPath('object_display.pt'), 'text/html'),
  ...     (None, None, None, None, interfaces.IObjectWidget),
  ...     IPageTemplate, name=interfaces.DISPLAY_MODE)

We can now render the widget:

  >>> widget.update()
  >>> print widget.render()
  <html>
    <body>
      <div class="object-widget required">
        <div class="label">
          <label for="subobject-widgets-foofield">
            <span>My foo field</span>
            <span class="required">*</span>
          </label>
        </div>
        <div class="widget">
          <input class="text-widget required int-field"
          id="subobject-widgets-foofield" name="subobject.widgets.foofield"
          type="text" value="1,111">
        </div>
        <div class="label">
          <label for="subobject-widgets-barfield">
            <span>My dear bar</span>
          </label>
        </div>
        <div class="widget">
          <input class="text-widget int-field" id="subobject-widgets-barfield"
          name="subobject.widgets.barfield" type="text" value="2,222">
        </div>
        <input name="subobject-empty-marker" type="hidden" value="1">
      </div>
    </body>
  </html>


As you see all sort of default values are rendered.

Let's provide a more meaningful value:

  >>> from z3c.form.testing import MySubObject
  >>> v = MySubObject()
  >>> v.foofield = 42
  >>> v.barfield = 666


  >>> widget.ignoreContext = False
  >>> widget.value = v

  >>> widget.update()

  >>> print widget.render()
  <html>
    <body>
      <div class="object-widget required">
        <div class="label">
          <label for="subobject-widgets-foofield">
            <span>My foo field</span>
            <span class="required">*</span>
          </label>
        </div>
        <div class="widget">
          <input class="text-widget required int-field"
          id="subobject-widgets-foofield" name="subobject.widgets.foofield"
          type="text" value="42">
        </div>
        <div class="label">
          <label for="subobject-widgets-barfield">
            <span>My dear bar</span>
          </label>
        </div>
        <div class="widget">
          <input class="text-widget int-field" id="subobject-widgets-barfield"
          name="subobject.widgets.barfield" type="text" value="666">
        </div>
        <input name="subobject-empty-marker" type="hidden" value="1">
      </div>
    </body>
  </html>

Let's fill in some values via the request:

  >>> widget.request = TestRequest(form={'subobject.widgets.foofield':u'2',
  ...                                    'subobject.widgets.barfield':u'999'})
  >>> widget.update()
  >>> print widget.render()
  <html>
    <body>
      <div class="object-widget required">
        <div class="label">
          <label for="subobject-widgets-foofield">
            <span>My foo field</span>
            <span class="required">*</span>
          </label>
        </div>
        <div class="widget">
          <input class="text-widget required int-field"
          id="subobject-widgets-foofield" name="subobject.widgets.foofield"
          type="text" value="2">
        </div>
        <div class="label">
          <label for="subobject-widgets-barfield">
            <span>My dear bar</span>
          </label>
        </div>
        <div class="widget">
          <input class="text-widget int-field" id="subobject-widgets-barfield"
          name="subobject.widgets.barfield" type="text" value="999">
        </div>
        <input name="subobject-empty-marker" type="hidden" value="1">
      </div>
    </body>
  </html>


Error handling is next. Let's use the value "bad" (an invalid integer literal)
as input for our internal (sub) widget.

  >>> widget.request = TestRequest(form={'subobject.widgets.foofield':u'2',
  ...                                    'subobject.widgets.barfield':u'bad'})


  >>> widget.update()
  >>> print widget.render()
  <html>
    <body>
      <div class="object-widget required">
        <div class="label">
          <label for="subobject-widgets-foofield">
            <span>My foo field</span>
            <span class="required">*</span>
          </label>
        </div>
        <div class="widget">
          <input class="text-widget required int-field"
          id="subobject-widgets-foofield" name="subobject.widgets.foofield"
          type="text" value="2">
        </div>
        <div class="label">
          <label for="subobject-widgets-barfield">
            <span>My dear bar</span>
          </label>
        </div>
        <div class="error">
          <div class="error">The entered value is not a valid integer literal.</div>
        </div>
        <div class="widget">
          <input class="text-widget int-field" id="subobject-widgets-barfield"
          name="subobject.widgets.barfield" type="text" value="bad">
        </div>
        <input name="subobject-empty-marker" type="hidden" value="1">
      </div>
    </body>
  </html>






In forms
========

Do all that fun in add and edit forms too:


We have to provide an adapter first:

  >>> zope.component.provideAdapter(object.ObjectFieldWidget)
  >>> import z3c.form.object
  >>> zope.component.provideAdapter(z3c.form.object.ObjectConverter)

We define an interface containing a subobject, and an addform for it:

  >>> from z3c.form import form, field
  >>> from z3c.form.testing import MyObject, IMyObject

Note, that creating an object will print some information about it:

  >>> class MyAddForm(form.AddForm):
  ...     fields = field.Fields(IMyObject)
  ...     def create(self, data):
  ...         print "MyAddForm.create", str(data)
  ...         return MyObject(**data)
  ...     def add(self, obj):
  ...         self.context[obj.name] = obj
  ...     def nextURL(self):
  ...         pass

We create the form and try to update it:

  >>> request = TestRequest()
  >>> myaddform =  MyAddForm(root, request)

  >>> myaddform.update()

As usual, the form contains a widget manager with the expected widget

  >>> myaddform.widgets.keys()
  ['subobject', 'name']
  >>> myaddform.widgets.values()
  [<ObjectWidget 'form.widgets.subobject'>, <TextWidget 'form.widgets.name'>]

The addform has our ObjectWidget which in turn contains a subform:

  >>> myaddform.widgets['subobject'].subform
  <z3c.form.object.ObjectSubForm object at ...>

Which in turn contains the sub-widgets:

  >>> myaddform.widgets['subobject'].subform.widgets.keys()
  ['foofield', 'barfield']

If we want to render the addform, we must give it a template:

  >>> import os
  >>> from zope.app.pagetemplate import viewpagetemplatefile
  >>> from z3c.form import tests
  >>> def addTemplate(form):
  ...     form.template = viewpagetemplatefile.BoundPageTemplate(
  ...         viewpagetemplatefile.ViewPageTemplateFile(
  ...             'simple_edit.pt', os.path.dirname(tests.__file__)), form)
  >>> addTemplate(myaddform)

Now rendering the addform renders the subform as well:

  >>> print myaddform.render()
  <html xmlns="http://www.w3.org/1999/xhtml">
    <body>
      <form action=".">
        <div class="row">
          <label for="form-widgets-subobject">my object</label>
          <div class="object-widget required">
            <div class="label">
              <label for="subobject-widgets-foofield">
                <span>My foo field</span>
                <span class="required">*</span>
              </label>
            </div>
            <div class="widget">
              <input class="text-widget required int-field"
              id="subobject-widgets-foofield" name="subobject.widgets.foofield"
              type="text" value="1,111">
            </div>
            <div class="label">
              <label for="subobject-widgets-barfield">
                <span>My dear bar</span>
              </label>
            </div>
            <div class="widget">
              <input class="text-widget int-field" id="subobject-widgets-barfield"
              name="subobject.widgets.barfield" type="text" value="2,222">
            </div>
            <input name="form.widgets.subobject-empty-marker" type="hidden"
            value="1">
          </div>
        </div>
        <div class="row">
          <label for="form-widgets-name">name</label>
          <input class="text-widget required textline-field" id="form-widgets-name" name="form.widgets.name" type="text" value="">
        </div>
        <div class="action">
          <input class="submit-widget button-field" id="form-buttons-add"
          name="form.buttons.add" type="submit" value="Add">
        </div>
      </form>
    </body>
  </html>


We don't have the object (yet) in the root:

  >>> root['first']
  Traceback (most recent call last):
  ...
  KeyError: 'first'

Let's try to add an object:

  >>> request = TestRequest(form={'subobject.widgets.foofield':u'66',
  ...                             'subobject.widgets.barfield':u'99',
  ...                             'form.widgets.name':u'first',
  ...                             'form.widgets.subobject-empty-marker':u'1',
  ...                             'form.buttons.add':'Add'})
  >>> myaddform.request = request
  >>> myaddform.update()
  MyAddForm.create {'subobject': <z3c.form.testing.MySubObject object at ...>,
  'name': u'first'}

Wow, it got added:

  >>> root['first']
  <z3c.form.testing.MyObject object at ...>

  >>> root['first'].subobject
  <z3c.form.testing.MySubObject object at ...>

Field values need to be right:

  >>> root['first'].subobject.foofield
  66
  >>> root['first'].subobject.barfield
  99

Let's try to edit that newly added object:

  >>> class MyEditForm(form.EditForm):
  ...     fields = field.Fields(IMyObject)

  >>> editform = MyEditForm(root['first'], TestRequest())
  >>> addTemplate(editform)
  >>> editform.update()

Watch for the widget values in the HTML:

  >>> print editform.render()
  <html xmlns="http://www.w3.org/1999/xhtml">
    <body>
      <form action=".">
        <div class="row">
          <label for="form-widgets-subobject">my object</label>
          <div class="object-widget required">
            <div class="label">
              <label for="subobject-widgets-foofield">
                <span>My foo field</span>
                <span class="required">*</span>
              </label>
            </div>
            <div class="widget">
              <input class="text-widget required int-field"
              id="subobject-widgets-foofield" name="subobject.widgets.foofield"
              type="text" value="66">
            </div>
            <div class="label">
              <label for="subobject-widgets-barfield">
                <span>My dear bar</span>
              </label>
            </div>
            <div class="widget">
              <input class="text-widget int-field" id="subobject-widgets-barfield"
              name="subobject.widgets.barfield" type="text" value="99">
            </div>
            <input name="form.widgets.subobject-empty-marker" type="hidden"
            value="1">
          </div>
        </div>
        <div class="row">
          <label for="form-widgets-name">name</label>
          <input class="text-widget required textline-field" id="form-widgets-name"
          name="form.widgets.name" type="text" value="first">
        </div>
        <div class="action">
          <input class="submit-widget button-field" id="form-buttons-apply"
          name="form.buttons.apply" type="submit" value="Apply">
        </div>
      </form>
    </body>
  </html>

Let's modify the values:

  >>> request = TestRequest(form={'subobject.widgets.foofield':u'43',
  ...                             'subobject.widgets.barfield':u'55',
  ...                             'form.widgets.name':u'first',
  ...                             'form.widgets.subobject-empty-marker':u'1',
  ...                             'form.buttons.apply':'Apply'})

They are still the same:

  >>> root['first'].subobject.foofield
  66
  >>> root['first'].subobject.barfield
  99

  >>> editform.request = request
  >>> editform.update()

Until we update the form:

  >>> root['first'].subobject.foofield
  43
  >>> root['first'].subobject.barfield
  55

After the update the form says that the values got updated and renders the new
values:

  >>> print editform.render()
  <html xmlns="http://www.w3.org/1999/xhtml">
    <body>
      <i>Data successfully updated.</i>
      <form action=".">
        <div class="row">
          <label for="form-widgets-subobject">my object</label>
          <div class="object-widget required">
            <div class="label">
              <label for="subobject-widgets-foofield">
                <span>My foo field</span>
                <span class="required">*</span>
              </label>
            </div>
            <div class="widget">
              <input class="text-widget required int-field"
              id="subobject-widgets-foofield" name="subobject.widgets.foofield"
              type="text" value="43">
            </div>
            <div class="label">
              <label for="subobject-widgets-barfield">
                <span>My dear bar</span>
              </label>
            </div>
            <div class="widget">
              <input class="text-widget int-field" id="subobject-widgets-barfield"
              name="subobject.widgets.barfield" type="text" value="55">
            </div>
            <input name="form.widgets.subobject-empty-marker" type="hidden"
            value="1">
          </div>
        </div>
        <div class="row">
          <label for="form-widgets-name">name</label>
          <input class="text-widget required textline-field" id="form-widgets-name"
          name="form.widgets.name" type="text" value="first">
        </div>
        <div class="action">
          <input class="submit-widget button-field" id="form-buttons-apply"
          name="form.buttons.apply" type="submit" value="Apply">
        </div>
      </form>
    </body>
  </html>

Let's make a nasty error, by typing 'bad' instead of an integer:

  >>> request = TestRequest(form={'subobject.widgets.foofield':u'99',
  ...                             'subobject.widgets.barfield':u'bad',
  ...                             'form.widgets.name':u'first',
  ...                             'form.widgets.subobject-empty-marker':u'1',
  ...                             'form.buttons.apply':'Apply'})

  >>> editform.request = request
  >>> editform.update()

Watch for the error message in the HTML:
it has to appear at the field itself and at the top of the form:

  >>> print editform.render()
  <html xmlns="http://www.w3.org/1999/xhtml">
    <body>
      <i>There were some errors.</i>
      <ul>
        <li>
        my object:
          <div class="error">The entered value is not a valid integer literal.</div>
        </li>
      </ul>
      <form action=".">
        <div class="row">
          <b>
            <div class="error">The entered value is not a valid integer literal.</div>
          </b>
          <label for="form-widgets-subobject">my object</label>
          <div class="object-widget required">
            <div class="label">
              <label for="subobject-widgets-foofield">
                <span>My foo field</span>
                <span class="required">*</span>
              </label>
            </div>
            <div class="widget">
              <input class="text-widget required int-field"
              id="subobject-widgets-foofield" name="subobject.widgets.foofield"
              type="text" value="99">
            </div>
            <div class="label">
              <label for="subobject-widgets-barfield">
                <span>My dear bar</span>
              </label>
            </div>
            <div class="error">
              <div class="error">The entered value is not a valid integer literal.</div>
            </div>
            <div class="widget">
              <input class="text-widget int-field" id="subobject-widgets-barfield"
              name="subobject.widgets.barfield" type="text" value="bad">
            </div>
            <input name="form.widgets.subobject-empty-marker" type="hidden"
            value="1">
          </div>
        </div>
        <div class="row">
          <label for="form-widgets-name">name</label>
          <input class="text-widget required textline-field" id="form-widgets-name"
          name="form.widgets.name" type="text" value="first">
        </div>
        <div class="action">
          <input class="submit-widget button-field" id="form-buttons-apply"
          name="form.buttons.apply" type="submit" value="Apply">
        </div>
      </form>
    </body>
  </html>

The object values must stay at the old ones:

  >>> root['first'].subobject.foofield
  43
  >>> root['first'].subobject.barfield
  55

Let's make more errors:
Now we enter 'bad' and '999999', where '999999' hits the upper limit of the field.

  >>> request = TestRequest(form={'subobject.widgets.foofield':u'999999',
  ...                             'subobject.widgets.barfield':u'bad',
  ...                             'form.widgets.name':u'first',
  ...                             'form.widgets.subobject-empty-marker':u'1',
  ...                             'form.buttons.apply':'Apply'})

  >>> editform.request = request
  >>> editform.update()

Both errors must appear at the top of the form:

  >>> print editform.render()
  <html xmlns="http://www.w3.org/1999/xhtml">
    <body>
      <i>There were some errors.</i>
      <ul>
        <li>
        my object:
          <div class="error">Value is too big</div>
          <div class="error">The entered value is not a valid integer literal.</div>
        </li>
      </ul>
      <form action=".">
        <div class="row">
          <b>
            <div class="error">Value is too big</div>
            <div class="error">The entered value is not a valid integer literal.</div>
          </b>
          <label for="form-widgets-subobject">my object</label>
          <div class="object-widget required">
            <div class="label">
              <label for="subobject-widgets-foofield">
                <span>My foo field</span>
                <span class="required">*</span>
              </label>
            </div>
            <div class="error">
              <div class="error">Value is too big</div>
            </div>
            <div class="widget">
              <input class="text-widget required int-field"
              id="subobject-widgets-foofield" name="subobject.widgets.foofield"
              type="text" value="999999">
            </div>
            <div class="label">
              <label for="subobject-widgets-barfield">
                <span>My dear bar</span>
              </label>
            </div>
            <div class="error">
              <div class="error">The entered value is not a valid integer literal.</div>
            </div>
            <div class="widget">
              <input class="text-widget int-field" id="subobject-widgets-barfield"
              name="subobject.widgets.barfield" type="text" value="bad">
            </div>
            <input name="form.widgets.subobject-empty-marker" type="hidden"
            value="1">
          </div>
        </div>
        <div class="row">
          <label for="form-widgets-name">name</label>
          <input class="text-widget required textline-field" id="form-widgets-name"
          name="form.widgets.name" type="text" value="first">
        </div>
        <div class="action">
          <input class="submit-widget button-field" id="form-buttons-apply"
          name="form.buttons.apply" type="submit" value="Apply">
        </div>
      </form>
    </body>
  </html>

And of course, the object values do not get modified:

  >>> root['first'].subobject.foofield
  43
  >>> root['first'].subobject.barfield
  55


Simple but often used use-case is the display form:

  >>> editform = MyEditForm(root['first'], TestRequest())
  >>> addTemplate(editform)
  >>> editform.mode = interfaces.DISPLAY_MODE
  >>> editform.update()
  >>> print editform.render()
  <html xmlns="http://www.w3.org/1999/xhtml">
    <body>
      <form action=".">
        <div class="row">
          <label for="form-widgets-subobject">my object</label>
          <div class="object-widget required">
            <div class="label">
              <label for="subobject-widgets-foofield">
                <span>My foo field</span>
                <span class="required">*</span>
              </label>
            </div>
            <div class="widget">
              <span class="text-widget required int-field"
              id="subobject-widgets-foofield">43</span>
            </div>
            <div class="label">
              <label for="subobject-widgets-barfield">
                <span>My dear bar</span>
              </label>
            </div>
            <div class="widget">
              <span class="text-widget int-field"
              id="subobject-widgets-barfield">55</span>
            </div>
          </div>
        </div>
        <div class="row">
          <label for="form-widgets-name">name</label>
          <span class="text-widget required textline-field"
          id="form-widgets-name">first</span>
        </div>
        <div class="action">
          <input class="submit-widget button-field"
          id="form-buttons-apply" name="form.buttons.apply" type="submit" value="Apply">
        </div>
      </form>
    </body>
  </html>
