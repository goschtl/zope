ContentProviders
----------------

We want to mix fields and content providers.

This allow to enrich the form by interlacing html snippets produced by content
providers.

For instance, we might want to include the table of results in a search form.

We might also need to insert html close to a widget as a handle used when
improving UI with Ajax.

Adding html outside the widgets avoids the systematic need of 
subclassing or changing the full widget rendering.

Test setup
----------
Before we can use a widget manager, the ``IFieldWidget`` adapter
has to be registered for the ``ITextLine`` field::

  >>> import zope.component
  >>> import zope.interface
  >>> from z3c.form import interfaces, widget
  >>> from z3c.form.browser import text
  >>> from z3c.form.testing import TestRequest

  >>> @zope.component.adapter(zope.schema.TextLine, TestRequest)
  ... @zope.interface.implementer(interfaces.IFieldWidget)
  ... def TextFieldWidget(field, request):
  ...     return widget.FieldWidget(field, text.TextWidget(request))

  >>> zope.component.provideAdapter(TextFieldWidget)

  >>> from z3c.form import converter
  >>> zope.component.provideAdapter(converter.FieldDataConverter)
  >>> zope.component.provideAdapter(converter.FieldWidgetDataConverter)

We define a simple test schema with fields::

  >>> import zope.interface
  >>> import zope.schema

  >>> class IPerson(zope.interface.Interface):
  ...
  ...     id = zope.schema.TextLine(
  ...         title=u'ID',
  ...         description=u"The person's ID.",
  ...         required=True)
  ...
  ...     fullname = zope.schema.TextLine(
  ...         title=u'FullName',
  ...         description=u"The person's name.",
  ...         required=True)
  ...

We will insert a content provider between the fields. 
We define a test content provider that prints extra help text::

  >>> from zope.contentprovider.provider import ContentProviderBase
  >>> class ExtendedHelp(ContentProviderBase):
  ...
  ...   def update(self):
  ...       self.person = self.context.id
  ...
  ...   def render(self):
  ...       return '<div class="ex-help">Help about person %s</div>' % self.person

Form definition
--------------- 

The meat of the tests begins here.

We define a form as usual by inheriting from ``form.Form``::

  >>> from z3c.form import field, form
  >>> from zope.interface import implements

To insert content providers, the following steps are needed :

  1. the form class must implement ``IFieldsAndContentProviderForm``
  2. the class must have a ``contentProviders`` attribute that is an instance
  of the ``ContentProviders`` class.

::

  >>> from z3c.form.contentprovider import ContentProviders
  >>> from z3c.form.interfaces import IFieldsAndContentProviderForm

  >>> class PersonForm(form.Form):
  ...     implements(IFieldsAndContentProviderForm)
  ...     fields = field.Fields(IPerson)
  ...     ignoreContext = True
  ...     contentProviders = ContentProviders()
  ...     contentProviders['longHelp'] = ExtendedHelp
  ...     contentProviders['longHelp'].position = 1

  >>> request = TestRequest()
  >>> class Person(object):
  ...    id = 'james'
  ...    fullname = 'James Bond'
  >>> context = Person()
  >>> personForm = PersonForm(context, request)

  >>> from z3c.form.contentprovider import FieldWidgetsAndProviders
  >>> manager = FieldWidgetsAndProviders(personForm, request, context)
  >>> manager.ignoreContext = True
  >>> manager.update()
  >>> widgets = manager._data
  >>> ids = widgets.keys()
  >>> ids.sort()
  >>> ids
  ['fullname', 'id', 'longHelp']
  >>> widgets['longHelp']
  <ExtendedHelp object at ...>
  >>> widgets['id']
  <TextWidget 'form.widgets.id'>
  >>> widgets['fullname']
  <TextWidget 'form.widgets.fullname'>
  >>> manager.get('longHelp').render()
  '<div class="ex-help">Help about person james</div>'

We can also define content provider by adaptation::

  >>> from zope.component import provideAdapter
  >>> from zope.contentprovider.interfaces import IContentProvider
  >>> from z3c.form.interfaces import IFormLayer
  >>> provideAdapter(ExtendedHelp,
  ...                (zope.interface.Interface,
  ...                 IFormLayer,
  ...                 zope.interface.Interface),
  ...                provides=IContentProvider, name='longHelp')

  >>> class AdaptedPersonForm(form.Form):
  ...     implements(IFieldsAndContentProviderForm)
  ...     prefix = 'form.'
  ...     fields = field.Fields(IPerson)
  ...     ignoreContext = True
  ...     contentProviders = ContentProviders(['longHelp'])
  ...     contentProviders['longHelp'].position = 2

  >>> from z3c.form.contentprovider import FieldWidgetsAndProviders
  >>> manager = FieldWidgetsAndProviders(personForm, request, context)
  >>> manager.ignoreContext = True
  >>> manager.update()
  >>> widgets = manager._data
  >>> ids = widgets.keys()
  >>> ids.sort()
  >>> ids
  ['fullname', 'id', 'longHelp']
  >>> widgets['longHelp']
  <ExtendedHelp object at ...>
  >>> widgets['id']
  <TextWidget 'form.widgets.id'>
  >>> widgets['fullname']
  <TextWidget 'form.widgets.fullname'>
  >>> manager.get('longHelp').render()
  '<div class="ex-help">Help about person james</div>'

Rendering the form
------------------

Once the update is complete we can render the form. Since we have not
specified a template yet, we have to do this now. We have prepared a small and
very simple template as part of this example:

  
  >>> import os
  >>> from z3c.form import ptcompat as viewpagetemplatefile
  >>> from z3c.form import tests
  >>> def personTemplate(form):
  ...     form.template = viewpagetemplatefile.bind_template(
  ...         viewpagetemplatefile.ViewPageTemplateFile(
  ...             'simple_edit_with_providers.pt', 
  ...             os.path.dirname(tests.__file__)), form)
  >>> personTemplate(personForm)

To enable form updating, all widget adapters must be registered::
  
  >>> from z3c.form.testing import setupFormDefaults
  >>> setupFormDefaults()

Let's update the form before rendering it.

  >>> personForm.update()

Because ``personFrom`` implements ``IFieldsAndContentProviderForm``, 
computed widgets is a ``FieldWidgetsAndProviders`` instance.

  >>> personForm.widgets
  <z3c.form.contentprovider.FieldWidgetsAndProviders object at ...>

Let's now render the page::

  >>> print personForm.render()
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <html xmlns="http://www.w3.org/1999/xhtml">
    <body>
      <form action=".">
        <div class="row">
          <label for="form-widgets-id">ID</label>
          <input id="form-widgets-id" name="form.widgets.id"
                 class="text-widget required textline-field"
                 value="" type="text" />
        </div>
        <div class="row">
          <div class="ex-help">Help about person james</div>
        </div>
        <div class="row">
          <label for="form-widgets-fullname">FullName</label>
          <input id="form-widgets-fullname"
                 name="form.widgets.fullname"
                 class="text-widget required textline-field"
                 value="" type="text" />
        </div>
      </form>
    </body>
  </html>

