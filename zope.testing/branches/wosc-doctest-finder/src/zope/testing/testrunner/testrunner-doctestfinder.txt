==================
 Finding doctests
==================

parse_directive_from_string
---------------------------

Looks for a markerstring in a string and returns the found value or
`None`. A markerstring has the form:

.. <directive>:: <value>

    >>> text = """Some text
    ...
    ... .. mydirective:: foo
    ...
    ... Some other text
    ... """
    >>> from zope.testing.testrunner.doctest import parse_directive_from_string
    >>> parse_directive_from_string('mydirective', text)
    u'foo'

    If the directive can't be found, None is returned:

    >>> parse_directive_from_string('not-present', text) is None
    True

It does not matter whether the marker string starts at the beginning
of a line. Also several whitespaces between the marker string and the
applied value are accepted. The tag in the marker can be written with
upper or lower case letters or both in a wild mix:

    >>> text = """Some text
    ...
    ...    ..   TeSt-lAyEr::        foo
    ...
    ... Some other text
    ... """
    >>> parse_directive_from_string('test-Layer', text)
    u'foo'


parse_directive_from_file
-------------------------

Similar to parse_directive_from_string, but searches a file instead of a string.

    >>> text = """Some text
    ...
    ... .. mydirective::        foo
    ...
    ... Some other text
    ... """
    >>> import tempfile
    >>> ignore, tmpfile = tempfile.mkstemp()
    >>> open(tmpfile, 'w').write(text)

    >>> from zope.testing.testrunner.doctest import parse_directive_from_file
    >>> parse_directive_from_file('mydirective', tmpfile)
    u'foo'
    >>> parse_directive_from_file('not-present', tmpfile) is None
    True


Finding files
-------------

    >>> import os.path, sys
    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')
    >>> defaults = [
    ...     '--path', directory_with_tests,
    ...     '--tests-pattern', '^sampletestsf?$',
    ...     '--doctests-pattern', '\.txt$',
    ...     ]

    >>> sys.argv = 'test -u'.split()
    >>> from zope.testing import testrunner
    >>> testrunner.run_internal(defaults)
