       ##############################################################################
       #
       # Copyright (c) 2007 Zope Corporation and Contributors.
       # All Rights Reserved.
       #
       # This software is subject to the provisions of the Zope Public License,
       # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
       # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
       # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
       # FOR A PARTICULAR PURPOSE.
       #
       ##############################################################################
       """REST publication and publisher factories
       
       $Id: http.py 72310 2007-02-01 21:39:01Z mkerrin $
    1: """
    1: import cgi
    1: import zope.interface
    1: from zope.app.publication.interfaces import IPublicationRequestFactory
    1: from zope.app.publication.http import HTTPPublication
    1: from zope.publisher.http import HTTPRequest
       
    1: from z3c.rest import interfaces
       
    2: class RESTRequest(HTTPRequest):
    1:     zope.interface.implements(interfaces.IRESTRequest)
       
    1:     __slots__ = (
               'parameters', # Parameters sent via the query string.
               )
       
    1:     def __init__(self, body_instream, environ, response=None):
   39:         self.parameters = {}
   39:         super(RESTRequest, self).__init__(body_instream, environ, response)
       
    1:     def processInputs(self):
               'See IPublisherRequest'
   35:         if 'QUERY_STRING' not in self._environ:
   31:             return
               # Parse the query string into our parameters dictionary.
    4:         self.parameters = cgi.parse_qs(
                   self._environ['QUERY_STRING'], keep_blank_values=1)
               # Since the parameter value is always a list (sigh), let's at least
               # detect single values and store them.
   11:         for name, value in self.parameters.items():
    7:             if len(value) == 1:
    6:                 self.parameters[name] = value[0]
       
    1:     def keys(self):
               'See Interface.Common.Mapping.IEnumerableMapping'
    7:         d = {}
    7:         d.update(self._environ)
    7:         d.update(self.parameters)
    7:         return d.keys()
       
    1:     def get(self, key, default=None):
               'See Interface.Common.Mapping.IReadMapping'
  300:         marker = object()
  300:         result = self.parameters.get(key, marker)
  300:         if result is not marker:
    8:             return result
       
  292:         return super(RESTRequest, self).get(key, default)
       
       
    2: class RESTView(object):
    1:     zope.interface.implements(interfaces.IRESTView)
       
    1:     def __init__(self, context, request):
   39:         self.context = context
   39:         self.request = request
       
    1:     @apply
           def __parent__():
    1:         def get(self):
    2:             return getattr(self, '_parent', self.context)
    1:         def set(self, parent):
    1:             self._parent = parent
    1:         return property(get, set)
       
       
    2: class RESTPublicationRequestFactory(object):
    1:     zope.interface.implements(IPublicationRequestFactory)
       
    1:     def __init__(self, db):
               """See zope.app.publication.interfaces.IPublicationRequestFactory"""
    2:         self.publication = HTTPPublication(db)
       
    1:     def __call__(self, input_stream, env, output_stream=None):
               """See zope.app.publication.interfaces.IPublicationRequestFactory"""
    5:         request = RESTRequest(input_stream, env)
    5:         request.setPublication(self.publication)
    5:         return request
