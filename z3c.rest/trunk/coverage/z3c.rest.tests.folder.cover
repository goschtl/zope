       ##############################################################################
       #
       # Copyright (c) 2007 Zope Corporation and Contributors.
       # All Rights Reserved.
       #
       # This software is subject to the provisions of the Zope Public License,
       # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
       # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
       # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
       # FOR A PARTICULAR PURPOSE.
       #
       ##############################################################################
       """Test REST view for folders.
       
       $Id: http.py 72310 2007-02-01 21:39:01Z mkerrin $
    1: """
    1: import lxml.etree
    1: from z3c.rest import rest
    1: from zope.app.folder import folder
    1: from zope.app.pagetemplate.viewpagetemplatefile import ViewPageTemplateFile
    1: from zope.app.publication.http import MethodNotAllowed
    1: from zope.dublincore.interfaces import IZopeDublinCore
       
    2: class FolderAPI(rest.RESTView):
           """A simple REST view for folders."""
       
    1:     template = ViewPageTemplateFile("folder.pt")
       
    1:     def __init__(self, context, request):
   31:         super(FolderAPI, self).__init__(context, request)
   93:         for param in ('noitems', 'notitle'):
   62:             if 'HTTP_DEMO_' + param.upper() in self.request:
    3:                 self.request.parameters[param] = 1
       
    1:     def GET(self):
   17:         return self.template()
       
    1:     def POST(self):
    2:         tree = lxml.etree.parse(self.request.bodyStream)
    2:         title = tree.find('title').text
    2:         dc = IZopeDublinCore(self.context)
    2:         dc.title = unicode(title)
       
           # For existing resources, PUT pretty much behaves like POST
    1:     PUT = POST
       
    1:     def NullPUT(self, nullResource):
    4:         name = nullResource.name
    4:         self.context[name] = folder.Folder()
    3:         return self.context[name]
       
    1:     def DELETE(self):
    3:         container = self.context.__parent__
    3:         if container is None:
    1:             raise MethodNotAllowed(self.context, self.request)
    2:         del container[self.context.__name__]
