       ##############################################################################
       #
       # Copyright (c) 2007 Zope Corporation and Contributors.
       # All Rights Reserved.
       #
       # This software is subject to the provisions of the Zope Public License,
       # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
       # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
       # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
       # FOR A PARTICULAR PURPOSE.
       #
       ##############################################################################
       """REST publishing interfaces.
       
       $Id: http.py 72310 2007-02-01 21:39:01Z mkerrin $
    1: """
    1: import zope.interface
    1: import zope.schema
    1: from zope.location.interfaces import ILocation
    1: from zope.publisher.interfaces import http
       
    2: class IRESTRequest(http.IHTTPRequest):
    1:     """A special type of request for handling REST-based requests."""
       
       
    2: class IRESTView(ILocation):
    1:     """A REST view"""
       
       
    2: class ILink(zope.interface.Interface):
           """An object representing a hyperlink."""
       
    1:     href = zope.schema.TextLine(
               title=u"URL",
    1:         description=u"The normalized URL of the link",
    1:         required=False)
       
    1:     title = zope.schema.TextLine(
               title=u'Title',
    1:         description=u'The title of the link',
    1:         required=False)
       
    1:     def click():
               """click the link, going to the URL referenced"""
       
       
    2: class IRESTClient(zope.interface.Interface):
           """A REST client.
       
           This client provides a high-level API to access RESTful Web APIs. The
           interface is designed to resemble the test browser API as much as
           practical.
           """
       
    1:     connectionFactory = zope.schema.Field(
               title=u"Connection Facotry",
    1:         description=(u'A callable that creates an `httplib`-compliant '
                            u'connection object.'),
    1:         required=True)
       
    1:     requestHeaders = zope.schema.Dict(
               title=u"Request Headers",
    1:         description=(u"A set of headers that will be sent in every request."),
    1:         required=True)
       
    1:     url = zope.schema.URI(
               title=u"URL",
    1:         description=(u"The URL the browser is currently showing. It is "
                            u"always a full, absolute URL."),
    1:         required=True)
       
    1:     headers = zope.schema.List(
               title=u"Response Headers",
    1:         description=(u'A list of all headers that have been returned '
                            u'in the last request.'),
    1:         required=True)
       
    1:     contents = zope.schema.Text(
               title=u"Contents",
    1:         description=u"The complete response body of the HTTP request.",
    1:         required=True)
       
    1:     status = zope.schema.Int(
               title=u"Status",
    1:         description=u"The status code of the last response.",
    1:         min=0,
    1:         required=True)
       
    1:     reason = zope.schema.TextLine(
               title=u"Reason",
    1:         description=u"A short explanation of the status of the last response.",
    1:         required=True)
       
    1:     fullStatus = zope.schema.TextLine(
               title=u"Full Status",
    1:         description=u"The status code and reason of the last response.",
    1:         required=True)
       
    1:     def open(url='', data=None, params=None, headers=None, method='GET'):
               """Open a URL and retrieve the result.
       
               The `url` argument can either be a full URL or a URL relative to the
               previous one. If no URL is specified, then the previous URL will be
               used.
       
               The `data` is the contents of the request body. It is used to send
               information to the server.
       
               The `params` describe additional query parameters that will be added
               to the request. Query string parameters are frequently used by RESTive
               APIs to provide additional return value options.
       
               The `headers` specify additional request headers that are specific for
               this particular request.
       
               The `method` specifies the HTTP method or verb to use to access the
               resource on the server. While there are only a few methods in RFC
               2616, an string is allowed, since any particular API can extend the
               set of allowed methods.
               """
       
    1:     def get(url='', params=None, headers=None):
               """Make a GET request to the server.
       
               For argument details see ``open()``.
               """
       
    1:     def put(url='', data='', params=None, headers=None):
               """Make a PUT request to the server.
       
               For argument details see ``open()``.
               """
       
    1:     def post(url='', data='', params=None, headers=None):
               """Make a POST request to the server.
       
               For argument details see ``open()``.
               """
       
    1:     def delete(url='', params=None, headers=None):
               """Make a DELETE request to the server.
       
               For argument details see ``open()``.
               """
       
    1:     def setCredentials(username, password):
               """Set the credentials.
       
               This method adds the necessary information to authenticate the user. A
               common example is basic auth, which inserts the `Authentication`
               request header.
               """
       
    1:     def goBack(count=1):
               """Go back in history by a certain amount of visisted pages.
       
               The ``count`` argument specifies how far to go back. It is set to 1 by
               default.
               """
       
    1:     def reload():
               """Reload the current resource.
       
               All arguments, including the HTTP method, parameters and additional
               headers are honored.
               """
       
    1:     def getLink(title=None, url=None, index=0):
               """Return an ILink of the found link.
       
               This method assumes that the current content type of the response body
               is XML.
       
               The link is found by the arguments of the method.  Only one can be
               used at a time:
       
                 o ``title`` -- The title or a sub-string thereof of the link.
       
                 o ``url`` -- The URL the link is going to.
       
               If multiple matching links are found, the `index` specifies which one
               to use.
               """
       
    1:     def xpath(expr, nsmap=None, single=False):
               """Returns the result of an XPath search expression.
       
               This method assumes that the current content type of the response body
               is XML.
       
               The `expr` argument is the actual XPath expression. If the expression
               is incorrect, an unspecified error must be raised.
       
               The `nsmap` is a mapping from the short version to the full URL of
               each XML namespace used in the expression.
       
               If `single` is set to ``True``, then only one result is returned,
               instead of a list. If the XPath expression results in more than one
               result, a ``ValueError`` must be raised.
               """
       
       
    2: class IPublisherRESTClient(IRESTClient):
           """An extension to the REST client to support test-specific features."""
       
    1:     handleErrors = zope.schema.Bool(
               title=u"Handle Errors",
    1:         description=(u"Describes whether server-side errors will be handled "
                            u"by the publisher. If set to ``False``, the error will "
                            u"progress all the way to the test, which is good for "
                            u"debugging."),
    1:         default=True,
    1:         required=True)
