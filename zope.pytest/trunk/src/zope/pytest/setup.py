import os
from zope.configuration import xmlconfig, config
from zope.component.hooks import setHooks
from zope.testing.cleanup import cleanUp
from zope import component
from zope.event import notify
from zope.app.publication.zopepublication import ZopePublication
from zope.app.publication.httpfactory import HTTPPublicationRequestFactory

import zope.processlifetime

from zope.app import wsgi

from ZODB.DB import DB
from ZODB.DemoStorage import DemoStorage
import ZODB.interfaces

import transaction
import sys


def create_app(request, site_root):
    """Get a WSGI publisher application.

    Returns a :class:`zope.app.wsgi.WSGIPublisherApplication` with
    `site_root` stored in the root folder under the name ``test``.

    This function is meant to be used as setup/teardown handler
    deploying a ``pytest_funcarg__`` function.

    It sets up a ZODB connection to a ZODB DemoStorage and adds
    finalizers (`tear_down`-functionality for people from other
    testing frameworks) to shutdown the whole setup after the test
    session.

    The `request` parameter is expected to be a py.test
    :class:`FuncargRequest` (not an HTTP request or similar) which is
    generated by py.test while running tests.
    
    The :attr:`handle_errors` attribute of the returned application is
    set to ``False`` so that errors are handled by the server.

    To make use of this setup, you have to configure the environment
    properly before. Most notably you have to register basic
    components that subscribe to IDatabaseOpenedEvents, etc. This can
    normally be done using :func:`configure` or :func:`setup_config`.
    """
    db = setup_db()
    connection = setup_connection(db)
    root = setup_root(connection)
    root['test'] = site_root

    wsgi_app = wsgi.WSGIPublisherApplication(
        db,
        HTTPPublicationRequestFactory,
        True)

    transaction.commit()

    def finalize():
        teardown_root(root)
        teardown_connection(connection)
        teardown_db(db)

    request.addfinalizer(finalize)

    # turn this off to let the errors be handled by the server
    # this is useful for testing the server's error handling
    wsgi_app.handleErrors = False

    return wsgi_app

def configure(request, module, zcml):
    def setup_function():
        return setup_config(module, zcml)

    return request.cached_setup(setup=setup_function,
                                teardown=teardown_config,
                                scope='session')

def setup_config(package, zcml_file):
    zcml_file = os.path.join(os.path.dirname(package.__file__),
                             zcml_file)

    setHooks()
    context = config.ConfigurationMachine()
    xmlconfig.registerCommonDirectives(context)

    return xmlconfig.file(zcml_file,
                          package=package,
                          context=context, execute=True)

def teardown_config(config):
    cleanUp()

def setup_db():
    name = 'main'
    storage = DemoStorage(name)
    db = DB(storage, database_name=name)
    db.setActivityMonitor(ZODB.ActivityMonitor.ActivityMonitor())

    # DB are registered as utilities
    component.provideUtility(db, ZODB.interfaces.IDatabase, name)

    # And we send a event that our DB is available
    notify(zope.processlifetime.DatabaseOpened(db))

    return db

def teardown_db(db):
    # Need to unregister DB
    base = component.getGlobalSiteManager()
    base.unregisterUtility(
        db, ZODB.interfaces.IDatabase, 'main')
    db.close()

def setup_connection(db):
    return db.open()

def teardown_connection(connection):
    transaction.abort()
    connection.close()

def setup_root(connection):
    return connection.root()[ZopePublication.root_name]

def teardown_root(root):
    pass

