Simple most-recently-used cache
===============================

An mru cache is a simple mapping object that has a limited size. To
create an mru cache, we call the MRU constructor passing a size an an
optional eviction callback.  The eviscion callback is called just
before an item is evicted.

    >>> def evicted(key, value):
    ...     print 'evicted', key, value
    >>> from zc.FileStorage.mru import MRU
    >>> cache = MRU(5, evicted)
    >>> len(cache), list(cache)
    (0, [])

We add items to the cache as we would any mapping object:

    >>> cache[1] = 'one'
    >>> cache[2] = 'two'
    >>> cache[3] = 'three'
    >>> cache[4] = 'four'
    >>> cache[1]
    'one'
    >>> cache.get(3)
    'three'

    >>> len(cache), list(cache)
    (4, [3, 1, 4, 2])

Note the order of the keys. 3 and 1 are first because we accessed them most
recently.  4 is next because it was added last and an add counts as an
access.

Let's add some more values:

    >>> cache[5] = 'five'
    >>> cache[6] = 'six'
    evicted 2 two
    >>> cache[7] = 'seven'
    evicted 4 four

    >>> len(cache), list(cache)
    (5, [7, 6, 5, 3, 1])

    >>> cache.get(4)

