Blob File Implementation
========================

This implementation of zope.app.file.interfaces.IFile takes advantage
of the new ZODB blob support and tries to be completely backward compatible to
the existing file implementation in zope.app.file.

Let's assume that you have already an existing database with zope.app.file
content types:

    >>> root = getRootFolder()
    >>> from zope.app.file import File, Image
    
    >>> from z3c.blobfile import testing
    >>> root[u'file'] = File('A text file', contentType='text/plain')
    >>> root[u'image'] = Image(testing.zptlogo)
    
Note that we cannot assume that these objects exist in isolation. Many of
them probably are annotated, indexed, some even may be registered as utility
etc.

Therefore we need a very conservative evolution strategy. We simply replace
the __class__ attribute and the data section. We will not test all relations
to all other objects, since this is largely application dependent. Here
we only take the ZopeDublinCore timestamps as an example that our evolution
step leaves as many things untouched as possible. 

    >>> from zope.dublincore.interfaces import IZopeDublinCore
    >>> import datetime
    
    >>> IZopeDublinCore(root[u'file']).created = datetime.datetime.utcnow()
    >>> t1 = IZopeDublinCore(root[u'file']).created 
    >>> IZopeDublinCore(root[u'file']).title = u'No evolution'

Now we perform the basic evolution steps:
    
    >>> from z3c.blobfile.generations.evolve1 import evolveZopeAppFile
    >>> evolveZopeAppFile(root)
  
The file data remain the same ...

    >>> root[u'file'].data
    'A text file'
    >>> root[u'file'].contentType
    'text/plain'
    
    >>> root[u'image'].data == testing.zptlogo
    True
    
and so are the annotations:

    >>> IZopeDublinCore(root[u'file']).created == t1
    True
    >>> IZopeDublinCore(root[u'file']).title
    u'No evolution'
    
IMPORTANT: If your application needs to be aware of the hidden type change, 
you must provide your own evolution procedure.


Compatibility with zope.app.file.File
-------------------------------------

The following tests mimic exactly the tests of the zope.app.file package.

Let's test the constructor:

    >>> file = File()
    >>> file.contentType
    ''
    >>> file.data
    ''

    >>> file = File('Foobar')
    >>> file.contentType
    ''
    >>> file.data
    'Foobar'

    >>> file = File('Foobar', 'text/plain')
    >>> file.contentType
    'text/plain'
    >>> file.data
    'Foobar'

    >>> file = File(data='Foobar', contentType='text/plain')
    >>> file.contentType
    'text/plain'
    >>> file.data
    'Foobar'


Let's test the mutators:

    >>> file = File()
    >>> file.contentType = 'text/plain'
    >>> file.contentType
    'text/plain'

    >>> file.data = 'Foobar'
    >>> file.data
    'Foobar'

    >>> file.data = None
    Traceback (most recent call last):
    ...
    TypeError: Cannot set None data on a file.


Let's test large data input:

    >>> file = File()

Insert as string:

    >>> file.data = 'Foobar'*60000
    >>> file.getSize()
    360000
    >>> file.data == 'Foobar'*60000
    True

Insert data as FileChunk:

    >>> from zope.app.file.file import FileChunk
    >>> fc = FileChunk('Foobar'*4000)
    >>> file.data = fc
    >>> file.getSize()
    24000
    >>> file.data == 'Foobar'*4000
    True

Insert data from file object:

    >>> import cStringIO
    >>> sio = cStringIO.StringIO()
    >>> sio.write('Foobar'*100000)
    >>> sio.seek(0)
    >>> file.data = sio
    >>> file.getSize()
    600000
    >>> file.data == 'Foobar'*100000
    True


Last, but not least, verify the interface:

    >>> from zope.interface.verify import verifyClass
    >>> zope.app.file.interfaces.IFile.implementedBy(File)
    True
    >>> verifyClass(zope.app.file.interfaces.IFile, File)
    True


Test of Filerepresentation Adapters
-----------------------------------

    >>> from zope.app.file.file import FileReadFile
    >>> file = File()
    >>> content = "This is some file\\ncontent."
    >>> file.data = content
    >>> file.contentType = "text/plain"
    >>> FileReadFile(file).read() == content
    True
    >>> FileReadFile(file).size() == len(content)
    True

    >>> from zope.app.file.file import FileWriteFile
    >>> file = File()
    >>> content = "This is some file\\ncontent."
    >>> FileWriteFile(file).write(content)
    >>> file.data == content
    True
