=================
JavaScript Events
=================

Events
======

z3c.formjs.jsevent provides tools for working with javascript events.

  >>> from z3c.formjs import interfaces as jsinterfaces
  >>> from z3c.formjs import jsevent

All the javascript event types are reproduced in python:

  >>> jsevent.CLICK
  <JSEvent "click">
  >>> jsevent.DBLCLICK
  <JSEvent "dblclick">
  >>> jsevent.CHANGE
  <JSEvent "change">
  >>> jsevent.LOAD
  <JSEvent "load">
  >>> jsevent.BLUR
  <JSEvent "blur">
  >>> jsevent.FOCUS
  <JSEvent "focus">
  >>> jsevent.KEYDOWN
  <JSEvent "keydown">
  >>> jsevent.KEYUP
  <JSEvent "keyup">
  >>> jsevent.MOUSEDOWN
  <JSEvent "mousedown">
  >>> jsevent.MOUSEMOVE
  <JSEvent "mousemove">
  >>> jsevent.MOUSEOUT
  <JSEvent "mouseout">
  >>> jsevent.MOUSEOVER
  <JSEvent "mouseover">
  >>> jsevent.MOUSEUP
  <JSEvent "mouseup">
  >>> jsevent.RESIZE
  <JSEvent "resize">
  >>> jsevent.SELECT
  <JSEvent "select">
  >>> jsevent.SUBMIT
  <JSEvent "submit">

These are actually objects that implement IJSEvent.

  >>> jsinterfaces.IJSEvent.providedBy(jsevent.CLICK)
  True

You can create your own by just instantiating a new ``JSEvent``
object:

  >>> MyEvent = jsevent.JSEvent("myevent")
  >>> MyEvent
  <JSEvent "myevent">

These are also provided as utilities so they can be looked up by name.

  >>> import zope.component
  >>> zope.component.getUtility(jsinterfaces.IJSEvent, 'click')
  <JSEvent "click">

Just to make sure, we'll see if all of these are in fact registered as
utilities.

  >>> for event in ['click', 'dblclick', 'change', 'load', 'blur', 'focus',
  ...	            'keydown', 'keyup', 'mousedown', 'mousemove',
  ...               'mouseout', 'mouseover', 'mouseup', 'resize',
  ...               'select', 'submit']:
  ...    e = zope.component.getUtility(jsinterfaces.IJSEvent, event)
  ...    if not jsinterfaces.IJSEvent.providedBy(e):
  ...        print "This shouldn't be printed in the test."

These events have javascript handlers which can be dynamically
generated so we will define a handler using a function.

  >>> def simpleHandler(form, id):
  ...     return ('alert("Some event was called '
  ...                    'for the element with id %s '
  ...                    'and for the form %s");'
  ...                    % (id, form))

Another aspect of javascript events is that they get attached to a
specific dom element using an id.  So let us make an imaginary dom
element id.

  >>> id = "form-field-age"

Different javascript libraries handle events in different ways, so we
have to specify which javascript library we want to use to handle the
events so as to render the javascript correctly.  This is done using
browser layers.  The formjs framework implements renderers for
jquery.  The renderers are registered as adapters as follows.

  >>> import zope.component
  >>> from z3c.formjs import jqueryrenderer
  >>> zope.component.provideAdapter(jqueryrenderer.JQueryEventRenderer)

  >>> from z3c.formjs.testing import TestRequest
  >>> from jquery.layer import IJQueryJavaScriptBrowserLayer
  >>> request = TestRequest()
  >>> IJQueryJavaScriptBrowserLayer.providedBy(request)
  True

  >>> renderer = zope.component.getMultiAdapter(
  ...     (jsevent.CLICK, request), jsinterfaces.IJSEventRenderer)
  >>> renderer.render(simpleHandler, id, None)
  '$("#form-field-age").bind("click", function(){alert("Some event was
  called for the element with id form-field-age and for the form None");});'


=======
Widgets
=======

Buttons are not the only dom elements that can have events attached to
them, in reality we should be able to attach events to any element of
the form; that is, to any widget in the form.

Creating a Widget and Attaching an Event
----------------------------------------

Taking from the widget.txt file in z3c.form, we will set up a widget
with its own widget template, et cetera, to work with.

  >>> from z3c.form import widget
  >>> request = TestRequest()
  >>> age = widget.Widget(request)

  >>> age.name = 'age'
  >>> age.label = u'Age'
  >>> age.value = '39'

  >>> import tempfile
  >>> textWidgetTemplate = tempfile.mktemp('text.pt')
  >>> open(textWidgetTemplate, 'w').write('''\
  ... <input type="text" name="" value=""
  ...        tal:attributes="id view/name;
  ...                        name view/name;
  ...                        value view/value;" />\
  ... ''')

  >>> from z3c.form.widget import WidgetTemplateFactory
  >>> factory = WidgetTemplateFactory(
  ...     textWidgetTemplate, widget=widget.Widget)

  >>> from z3c.form import interfaces
  >>> age.mode is interfaces.INPUT_MODE
  True

  >>> import zope.component
  >>> zope.component.provideAdapter(factory, name=interfaces.INPUT_MODE)

Now for the magic.  We can attach events to this widget by adapting
it to ``IJSEventWidget``.  First we will create the events we want to
add to it.

  >>> def ageClickHandler(widget, id):
  ...     return 'alert("This Widget was Clicked!");'
  >>> def ageDblClickHandler(widget, id):
  ...     return 'alert("This Widget was Double Clicked!");'
  >>> events = jsevent.JSEvents(click=ageClickHandler,
  ...                           dblclick=ageDblClickHandler)
  >>> age = zope.component.getMultiAdapter(
  ...     (events, age), jsinterfaces.IJSEventsWidget)

Now we can update and render this widget.

  >>> age.update()
  >>> print age.render()
  <input type="text" name="age" value="39" id="age" />

And then render the widget's events.

  >>> zope.component.provideAdapter(jsevent.JSEventsRenderer)
  >>> request = TestRequest()
  >>> renderer = zope.component.getMultiAdapter((events, request),
  ...                                           jsinterfaces.IJSEventsRenderer)
  >>> age.id = 'age'
  >>> print renderer.render(age, None)
  $("#age").bind("click",
      function(){alert("This Widget was Clicked!");});
  $("#age").bind("dblclick",
      function(){alert("This Widget was Double Clicked!");});


Rendering Widgets with Attached Events
--------------------------------------

There is an easier way to render a bunch of widgets at a time to have
events hooked up to them.  This involves adapting the widget manager
to IJSEventWidgetManager.

Here we will create an interface for which we want to have a form.

  >>> import zope.interface
  >>> import zope.schema
  >>> class IPerson(zope.interface.Interface):
  ...
  ...     name = zope.schema.TextLine(
  ...         title=u'Name',
  ...         required=True)
  ...
  ...     gender = zope.schema.Choice(
  ...         title=u'Gender',
  ...         values=('male', 'female'),
  ...         required=False)
  ...
  ...     age = zope.schema.Int(
  ...         title=u'Age',
  ...         description=u"The person's age.",
  ...         min=0,
  ...         default=20,
  ...         required=False)

  >>> from z3c.form import field
  >>> from z3c.form import form
  >>> class PersonEditForm(form.AddForm):
  ...
  ...     fields = field.Fields(IPerson)
  ...
  ...     def ageClickEvent(self, form, id):
  ...         return 'alert("The Age was Clicked!");'
  ...
  ...     def genderChangeEvent(self, form, id):
  ...         return 'alert("The Gender was Changed!");'
  ...
  ...     def updateWidgets(self):
  ...         super(PersonEditForm, self).updateWidgets()
  ...         age = zope.component.getMultiAdapter(
  ...              (jsevent.JSEvents(click=self.ageClickEvent),
  ...               self.widgets['age']), jsinterfaces.IJSEventsWidget)
  ...         gender = zope.component.getMultiAdapter(
  ...              (jsevent.JSEvents(change=self.genderChangeEvent),
  ...               self.widgets['gender']), jsinterfaces.IJSEventsWidget)

Now we can update this form and render the widget event handler.

  >>> request = TestRequest()
  >>> edit = PersonEditForm(root, request)
  >>> edit.update()

  >>> zope.component.provideAdapter(jsevent.JSFormEventsRenderer)
  >>> print jsinterfaces.IJSFormEventsRenderer(edit).render()
  $("#form-widgets-gender").bind("change",
      function(){alert("The Gender was Changed!");});
  $("#form-widgets-age").bind("click",
      function(){alert("The Age was Clicked!");});


Attaching Events to Form Fields
-------------------------------

The above method is pretty ugly, and we would really prefer something
like what is done with buttons.  So here is how it would work.

  >>> class PersonEditForm(form.AddForm):
  ...
  ...     fields = field.Fields(IPerson)
  ...
  ...     @jsevent.handler(fields['age'])
  ...     def ageClickEvent(self, id):
  ...         return 'alert("The Age was Clicked!");'
  ...
  ...     @jsevent.handler(fields['gender'], event=jsevent.CHANGE)
  ...     def genderChangeEvent(self, id):
  ...         return 'alert("The Gender was Changed!");'

Now we can update this form and render the widget event handler.

  >>> request = TestRequest()
  >>> edit = PersonEditForm(root, request)
  >>> edit.update()
  >>> zope.component.provideAdapter(jsevent.JSFormEventsRenderer)
  >>> print jsinterfaces.IJSFormEventsRenderer(edit).render()
  $("#form-widgets-gender").bind("change",
      function(){alert("The Gender was Changed!");});
  $("#form-widgets-age").bind("click",
      function(){alert("The Age was Clicked!");});
