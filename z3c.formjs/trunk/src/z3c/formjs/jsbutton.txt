==================
JavaScript Buttons
==================

Buttons
=======

z3c.form defines buttons that always submit forms.  It is also highly
useful to have buttons in your form that modify that perform a client
side action using javascript.  z3c.formjs.button provides buttons with
javascript event hooks.

  >>> from z3c.formjs import jsbutton, jsevent
  >>> from z3c.formjs import interfaces as jsinterfaces
  >>> from z3c.formjs.testing import TestRequest

JSButton
--------

Just as in z3c.form, we can define buttons in a schema.

  >>> import zope.interface
  >>> class IButtons(zope.interface.Interface):
  ...     apply = jsbutton.JSButton(title=u'Apply')
  ...     cancel = jsbutton.JSButton(title=u'Cancel')

From the button creation aspect, everything works exactly as in
z3c.form.  The difference comes with the actions.  We will create a
form that provides these buttons with javascript actions.

  >>> from z3c.form import button, form
  >>> from z3c.form import interfaces
  >>> class Form(form.AddForm):
  ...     buttons = button.Buttons(IButtons)
  ...     prefix = 'form'
  ...
  ...     @jsevent.handler(buttons['apply'])
  ...     def apply(self, id):
  ...         return 'alert("You Clicked the Apply Button!");'
  ...
  ...     @jsevent.handler(buttons['cancel'], event=jsevent.DBLCLICK)
  ...     def cancel(self, id):
  ...         return 'alert("You Double Clicked the Cancel Button!");'

Notice that the jsbutton.handler decorator takes the keyword argument
event, which specifies what type of javascript event this handler will
be attached to.

Now we can create the button action manager just as we do with regular
buttons

Let' now create an action manager for the button manager in the form. To do
that we first need a request and a form instance:

  >>> request = TestRequest()
  >>> addform = Form(None, request)

Action managers are instantiated using the form, request, and
context/content. A special button-action-manager implementation is avaialble
in the ``z3c.form.button`` package:

  >>> actions = button.ButtonActions(addform, request, None)
  >>> actions.update()

Once the action manager is updated, the buttons should be available as
actions:

  >>> actions.keys()
  ['apply', 'cancel']
  >>> actions['apply']
  <JSButtonAction 'form.buttons.apply' u'Apply'>

JSButton actions are locations:

  >>> apply = actions['apply']
  >>> apply.__name__
  'apply'
  >>> apply.__parent__
  <ButtonActions None>

A button action is also a button widget. The attributes translate as follows:

  >>> jsinterfaces.IButtonWidget.providedBy(apply)
  True

Next we want to display our button actions. To be able to do this, we have to
register a template for the button widget:

  >>> from z3c.formjs import testing as jstesting
  >>> from z3c.form import widget
  >>> templatePath = jstesting.getPath('button_input.pt')
  >>> factory = widget.WidgetTemplateFactory(templatePath, 'text/html')

  >>> from zope.pagetemplate.interfaces import IPageTemplate
  >>> zope.component.provideAdapter(factory,
  ...     (zope.interface.Interface, TestRequest, None, None,
  ...      jsinterfaces.IButtonWidget),
  ...     IPageTemplate, name='input')

A widget template has many discriminators: context, request, view, field, and
widget. We can now render each action:

  >>> print actions['apply'].render()
  <input type="button" id="form-buttons-apply"
         name="form.buttons.apply" class="buttonWidget"
         value="Apply" />

  >>> print actions['cancel'].render()
  <input type="button" id="form-buttons-cancel"
         name="form.buttons.cancel" class="buttonWidget"
         value="Cancel" />

Another way to render the events is completely separate from the
buttons themselves.

  >>> request = TestRequest()
  >>> addform = Form(None, request)
  >>> addform.update()
  >>> zope.component.provideAdapter(jsevent.JSFormEventsRenderer)
  >>> print jsinterfaces.IJSFormEventsRenderer(addform).render()
  $("#form-buttons-apply").bind("click",
      function(){alert("You Clicked the Apply Button!");});
  $("#form-buttons-cancel").bind("dblclick",
      function(){alert("You Double Clicked the Cancel Button!");});
