Zope transactions and sqlalchemy
================================

When a zope transaction is used also a sqlalchemy transaction must be
activated. "z3c.zalchemy" installs a data manager every time a new zope
transaction is created. 

Create a utility to provide a database :

  >>> import os
  >>> from zope.component import provideUtility
  >>> from z3c.zalchemy.datamanager import AlchemyEngineUtility
  >>> engineUtility = AlchemyEngineUtility('database',
  ...                                      'sqlite:///%s'%dbTrFilename,
  ...                                      echo=False)
  >>> provideUtility(engineUtility)

Setup a sqlalchemy table and class :

  >>> import sqlalchemy
  >>> import z3c.zalchemy
  >>> aTable = sqlalchemy.Table(
  ...     'aTable',
  ...     z3c.zalchemy.metadata,
  ...     sqlalchemy.Column('id', sqlalchemy.Integer,
  ...         sqlalchemy.Sequence('atable_id'), primary_key = True),
  ...     sqlalchemy.Column('value', sqlalchemy.Integer),
  ...     redefine=True,
  ...     )
  >>> class A(object):
  ...   pass
  >>> A.mapper = sqlalchemy.mapper(A, aTable)

Now start a zope transaction :

  >>> import transaction
  >>> txn = transaction.begin()

Get a thread local session :

  >>> session = z3c.zalchemy.getSession()

  >>> z3c.zalchemy.createTable('aTable')

Multiple calls to getSession return the same session :

  >>> session == z3c.zalchemy.getSession()
  True

Create an object and add it to the session :

  >>> a=A()
  >>> session.save(a)
  >>> a.id is None
  True

We flush the object so that it gets a primary key.

  >>> session.flush([a])
  >>> a.id is None
  False

  >>> a.value = 1

  >>> transaction.commit()

After the commit we can get a new session from zalchemy outside of a
transaction.
We can tell zalchemy to create a new transaction if there is none active.
But we need to commit the transaction manually.

  >>> session2 = z3c.zalchemy.getSession(True)
  >>> session == session2
  False
  >>> a=A()
  >>> session2.save(a)
  >>> a.value = 2
  >>> transaction.commit()


Handling multiple threads
-------------------------

  >>> import threading

A different thread must get a different session :

  >>> log = []
  >>> def differentSession():
  ...     global session
  ...     log.append(('differentSession',session == z3c.zalchemy.getSession()))
  ...

  >>> thread = threading.Thread(target=differentSession)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [('differentSession', False)]

A different Thread must be able to operate on the engine :

  >>> log = []
  >>> def modifyA():
  ...     txn = transaction.begin()
  ...     session = z3c.zalchemy.getSession()
  ...     obj = session.get(A, 1)
  ...     obj.value+= 1
  ...     log.append(('modifyA', obj.value))
  ...     transaction.commit()
  ...

  >>> thread = threading.Thread(target=modifyA)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [('modifyA', 2)]

Nested Threads :

  >>> log = []

  >>> def nested():
  ...     txn = transaction.begin()
  ...     session = z3c.zalchemy.getSession()
  ...     obj = session.get(A, 1)
  ...     thread = threading.Thread(target=modifyA)
  ...     thread.start()
  ...     thread.join()
  ...     obj.value+= 1
  ...     log.append(('nested', obj.value))
  ...     transaction.commit()
  ...

  >>> thread = threading.Thread(target=nested)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [('modifyA', 3), ('nested', 3)]


Aborting transactions
---------------------

  >>> session = z3c.zalchemy.getSession(True)
  >>> a=session.get(A, 1)
  >>> v = a.value
  >>> a.value += 1
  >>> session.flush([a])
  >>> transaction.abort()

  >>> session = z3c.zalchemy.getSession(True)
  >>> a=session.get(A, 1)
  >>> a.value
  3
  
  >>> a.value == v
  True

