=====================
Configuration example
=====================

The example defines an article. The article has a text and a note part.


Step 1: Logical Domain Model
----------------------------

Define the logical domain types and their inheritance. The logical model of our 
domain consist of three types. We use marker interfaces to show their 
inheritance relationships.

    >>> class IText(interface.Interface):
    ...     """Logical text marker"""

    >>> class INote(interface.Interface):
    ...     """Logical note marker"""

    >>> class IArticle(IText, INote):
    ...     """Logical article marker"""
    

Step 2: Building Blocks
-----------------------

In the generic model these components may be configurations or annotations.

    >>> class ITextConfig(interface.Interface):
    ...     """The text configuration"""
    ...     body = schema.Text(title=u"Text body")

    >>> class INoteConfig(interface.Interface):
    ...     """The note configuration"""
    ...     body = schema.Text(title=u"Text body")

    >>> class IArticleInitializationConfiguration(interface.Interface):
    ...     """The articleconfiguration used for initialization only"""
    ...     text = schema.Text(title=u"Text body")
    ...     note = schema.Text(title=u"Note body", required=False)

    >>> registerDirective('''
    ... <generic:keyface
    ...     keyface="example.ITextConfig"
    ...     type="zope.generic.configuration.IConfigurationType"
    ...     />
    ... ''') 

    >>> registerDirective('''
    ... <generic:keyface
    ...     keyface="example.INoteConfig"
    ...     type="zope.generic.configuration.IConfigurationType"
    ...     />
    ... ''')

    >>> registerDirective('''
    ... <generic:keyface
    ...     keyface="example.IArticleInitializationConfiguration"
    ...     type="zope.generic.configuration.IConfigurationType"
    ...     />
    ... ''')

Step 3: Implement Specific Handlers and the type-specific default data
----------------------------------------------------------------------

    >>> from zope.generic.informationprovider.api import queryInformation
    >>> from zope.generic.informationprovider.api import provideInformation
    >>> from zope.generic.informationprovider.api import deleteInformation
    >>> from zope.generic.type.api import queryTypeConfiguration

Let's implement the initializer of the article. Initializers are called from
``__init__``. Initializers are used to add additional logic at the 
initialization process.

    >>> def articleInitializer(context, *pos, **kws):
    ...     """Initializer Policy chosen:
    ...     - look up article configuration
    ...     - if there isn't any defined use the base types configuration
    ...     - raises an exception if no configurationis defined
    ...     """
    ...     # looks up the allready configured data on the object
    ...     article_config = queryInformation(context, 
    ...         IArticleInitializationConfiguration)
    ...     if article_config is None:
    ...         text_config = queryTypeConfiguration(context, ITextConfig)
    ...         note_config = queryTypeConfiguration(context, INoteConfig)
    ...         text, note = text_config.text, note_config.text
    ...     else:
    ...         text, note = article_config.text, article_config.note
    ...
    ...     provideInformation(context, ITextConfig, {'body': text})
    ...     provideInformation(context, INoteConfig, {'body': note})
    ...     deleteInformation(context, IArticleInitializationConfiguration)
 
    >>> from zope.generic.configuration.api import ConfigurationData
    
    >>> textDefaults = ConfigurationData(ITextConfig, 
    ...     {'body': u"This is the default text."})

    >>> noteDefaults = ConfigurationData(INoteConfig, 
    ...     {'body': u"This is the default note."})

    >>> articleTextDefaults = ConfigurationData(ITextConfig, 
    ...     {'body': u"This is the default article."})
    >>> articleNoteDefaults = ConfigurationData(INoteConfig, 
    ...     {'body': u""})


    >>> registerDirective('''
    ... <generic:type
    ...     keyface="example.IText"
    ...     class='zope.generic.type.api.Object'
    ...     >
    ...    <initializer
    ...         keyface='example.ITextConfig'
    ...    />
    ...    <configuration
    ...        keyface='example.ITextConfig'
    ...        configuration='example.textDefaults'
    ...    />
    ... </generic:type>
    ... ''')

    >>> registerDirective('''
    ... <generic:type
    ...     keyface="example.INote"
    ...     class='zope.generic.type.api.Object'
    ...     >
    ...    <initializer
    ...         keyface='example.INoteConfig'
    ...    />
    ...    <configuration
    ...        keyface='example.INoteConfig'
    ...        configuration='example.noteDefaults'
    ...    />
    ... </generic:type>
    ... ''')

    >>> registerDirective('''
    ... <generic:type
    ...     keyface="example.IArticle"
    ...     class='zope.generic.type.api.Object'
    ...     >
    ...    <initializer
    ...         keyface='example.IArticleInitializationConfiguration'
    ...         handler="example.articleInitializer"
    ...    />
    ...    <configuration
    ...        keyface='example.ITextConfig'
    ...        configuration='example.articleTextDefaults'
    ...    />
    ...    <configuration
    ...        keyface='example.INoteConfig'
    ...        configuration='example.articleNoteDefaults'
    ...    />
    ... </generic:type>
    ... ''')


Step 4: Enjoy your logical domain...
------------------------------------

To create an article we use the logical domain interface

    >>> from zope.generic.type.api import createObject

    >>> article = createObject(IArticle, text="First version of article.")
    
    >>> IArticle.providedBy(article)
    True

    >>> queryInformation(article, ITextConfig).body
    'First version of article.'
    
    >>> queryInformation(article, IArticleInitializationConfiguration).text
    Traceback (most recent call last):
    ...
    AttributeError: 'NoneType' object has no attribute 'text'
    
    #>>> IText(article, None)
    #>>> INote(article, None)
    