Sharing Index
=============

The sharing index supports "security-filtered search".  A sharing
index keeps track of the principals that have the read priviledge for
objects.  The index can then provide a set of all of the objects a
principal can access, taking the principal's groups into account.

Sharing indexes adapt their inputs to ISharing.  For illustrative
purposes, we'll provide objects that provide ISharing directly.  We'll
only bother implementing the methods that the sharing index actually
uses:

    >>> from zope import interface
    >>> import zc.sharing.sharing
    >>> from zc.sharing import interfaces
    >>> zc.sharing.sharing.definePrivilege(0, "Read")
    >>> class SampleDoc:
    ...      interface.implements(interfaces.IBaseSharing)
    ...
    ...      def __init__(self, *principal_ids):
    ...          self.principal_ids = principal_ids
    ...
    ...      def getPrincipals(self):
    ...          return self.principal_ids
    ...
    ...      def getBinaryPrivileges(self, principal_id):
    ...          if principal_id in self.principal_ids:
    ...              return 2
    ...          return 0


Now we can try indexing some documents.  First we instantiate an index.
The one required argument is the privilege id of the privilege to be
used for the index.

    >>> import zc.sharing.index
    >>> index = zc.sharing.index.Index(1)

By default, zc.sharing indices use the 32-bit BTree family.  

    >>> import BTrees
    >>> index.family is BTrees.family32
    True

If your intid source is 32-bit, use the default; if it is 64-bit,
specify BTrees.family64.

When this document is run as a test, it is run twice, once with the 32 bit
family and once with the 64 bit family.  This is represented with the `family`
argument below, as we reinstantiate a new index and populate it.

    >>> index = zc.sharing.index.Index(1, family)

    >>> index.index_doc(1, SampleDoc('bob', 'Everyone'))
    >>> index.index_doc(2, SampleDoc('bob'))
    >>> index.index_doc(3, SampleDoc('sally', 'Editors'))
    >>> index.index_doc(4, SampleDoc('sally', 'Reviewers'))
    >>> index.index_doc(5, SampleDoc('sally'))
    >>> index.index_doc(6, SampleDoc('sally', 'Everyone'))
    >>> index.index_doc(7, SampleDoc('Workers'))

[#whitebox_family_test]_

Now, we can search it to find the documents accessable to a principal.
First we'll define a principal class.  Principals have a groups
attribute that has the groups that the principal is contained in
directly:

    >>> class Principal:
    ...     def __init__(self, id, *groups):
    ...         self.id, self.groups = id, (groups + ('Everyone', ))

The sharing index determines all of the groups a principal is in
by loading information about their groups from an authentication
utility.  We'll provide one that knows about our groups:

    >>> from zope import component
    >>> from zope.app.security.interfaces import IAuthentication
    >>> class Authentication:
    ...     interface.implements(IAuthentication)
    ...     def getPrincipal(self, id):
    ...         if id in ('Editors', 'Reviewers'):
    ...             return Principal(id, 'Workers')
    ...         else:
    ...             return Principal(id) 

    >>> component.provideUtility(Authentication())

    >>> r = index.apply(Principal('sally', 'Editors', 'Reviewers'))
    >>> r.__class__ is family.IF.Set
    True

    >>> list(r)
    [1, 3, 4, 5, 6, 7]

    >>> list(index.apply(Principal('fred')))
    [1, 6]

If we modify a document, so that different principals have access:

    >>> index.index_doc(4, SampleDoc('fred', 'Reviewers'))

Then the results change accordingly:

    >>> list(index.apply(Principal('sally', 'Editors')))
    [1, 3, 5, 6, 7]

    >>> list(index.apply(Principal('fred')))
    [1, 4, 6]

And if we remove documents:

    >>> index.unindex_doc(1)
    >>> index.unindex_doc(4)

    >>> list(index.apply(Principal('sally', 'Editors')))
    [3, 5, 6, 7]

    >>> list(index.apply(Principal('fred')))
    [6]

Of course, if we clear the index:

    >>> index.clear()
    >>> list(index.apply(Principal('sally', 'Editors')))
    []

    >>> list(index.apply(Principal('fred')))
    []

.. [#whitebox_family_test] Let's actually look at the internal data
    structures: the correct family members are created.
    
    >>> isinstance(index.principal_documents, family.OO.BTree)
    True
    >>> isinstance(index.document_principals, family.IO.BTree)
    True
