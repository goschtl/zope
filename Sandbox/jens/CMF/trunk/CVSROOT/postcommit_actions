#!/usr/bin/env python

"""Apply actions dictated by traffic_table.py to checkins as they occur.

An optional leading arg "--verbose" argument says operate verbosely.

We expect to be invoked from loginfo with "%{CVSROOT} %{sVv}".  The %{sVv}
format string is expanded into a single argument passed in, containing
multiple space-delimited parts.  The first part is the path of repository
directory, then a comma-concatenated string for each file being checked in,
consisting of the file name, the old version number, then the new one, like
so: file-name,old-version,new-version.  (See the CVS Gnu INFO file for the
node 'loginfo' for more format-string details.)

Currently the actions are emailing checkin messages and doing an rsync 
to the public repository."""

mail_cmd = "/bin/mail -v"

VERBOSE = 1
SCRIPT = "postcommit_actions"           # Changes to args[0], when obtained.

import sys, os
import re, string

sVv_re = re.compile("(.*),([^,]+),([^,]+)")

def main(args):
    """Grok the args and the traffic_table and process accordingly."""

    global VERBOSE, SCRIPT

    if VERBOSE:
        complain("Initial args: %s\n", args)

    if (len(args) < 2
        or (args[1] == "--verbose" and (len(args) != 3))):
        usage(); raise SystemExit, 1

    # Identify all the args - see usage() for expected layout.
    SCRIPT = args[0]; del args[0]
    if args[0] == "--verbose":
        VERBOSE = 1
        del args[0]

    # The %{sVv} args are passed in as a single token - have to split them.
    args = string.split(args[0])

    repo = args[0]; del args[0]
    subjs = map(grok_file, args)

    if VERBOSE:
        complain("CWD: %s, Repo: %s, ", os.getcwd(), repo)
        complain("Subjects: %s\n", subjs)

    got = find_entries(repo)
    for entry in got:
        (nm, expr, addrs, accts) = entry
        if addrs:
            do_mail(nm, repo, addrs, subjs)
        if accts:
            do_sync(repo, accts, subjs)

    do_chmod(subjs)

def find_entries(repo):
    """Return all traffic_table entries that trigger for repo."""
    import traffic_table
    got = []
    for t in traffic_table.table:
        if re.search(t[1], repo):
            got.append(t)
    return got

def do_mail(name, repo, addrs, subjs):
    """Send notice about checkin to addresses dictated by traffic table."""
    fnames = string.join(map(lambda x: x[0], subjs), ",")
    if VERBOSE:
        complain("Notice to %s for %s / %s\n", addrs, repo, fnames)
    # The message contents are on stdin, just _yearning_ to be sent...-)
    subject = "CVS: %s %s" % (repo, fnames)
    os.system("%s -s '%s' %s" % (mail_cmd,
                                 subject,
                                 string.join(addrs, ",")))

def do_sync(repo, accts, subjs):
    """Instigate repository mirror synchronize."""
    #/usr/bin/rsync --verbose --archive --delete test dccvs@www.zope.org
    if VERBOSE:
        fnames = string.join(map(lambda x: x[0], subjs), ",")
        complain("Sync for %s of %s/ %s / %s\n",
                 accts, os.environ["CVSROOT"], repo, fnames)

def do_chmod(subjs):
    fnames = map(lambda x: x[0], subjs)
    if VERBOSE:
        complain("Doing chmod on files: %s\n", fnames)
    os.system("echo chmod g+w %s" % string.join(fnames, " "))

def grok_file(s):
    """Separate "file,old-version,new-version"."""
    m = sVv_re.match(s)
    if not m:
        raise ValueError, "'%s' not in file,old-vers,new-vers format" % s
    return m.groups()

def usage():
    complain("Usage: %s repository-path file,oldv,newv [f2,o2,n2 ...]\n",
             SCRIPT)

def complain(msg, *args):
    sys.stderr.write(msg % args)

if __name__ == "__main__":
    main(sys.argv)

