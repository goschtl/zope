#!/usr/bin/env python

"""Apply actions dictated by traffic_table.py to checkins as they occur.

Normal operation is to fork into the background with stderr and stdout
redirected to append to the file named by the OUTPUT_LOG config var - so
that the user doesn't have to wait for the checkin message to be collected
and sent or for the rsync to complete.  (We can't simply fork into the
background, because clients like emacs VC will hang waiting the close of
sys.stdin, sys.stderr, sys.stdout, etc. - on the order of minutes.)

Options:

 --verbose - operate in verbose mode, with output to OUTPUT_LOG in the
             detached copy, and to stdout before the detach (and forever if 
             --wait specified)

 --recurse - remote repository sync recurses into all subject dirs offspring

 --dryrun - do not actually do any of the activities

 --wait - do not fork into the background (and leave output in stdout/stderr)

 --syncrepo - syncronize the mirror, don't do other activities - good for
              initting the remote copy or rectifying gaps that crept in.
              The rsync will be verbose when doing --syncrepo.

 --syncall - do --syncrepo for all entries in the traffic table.

 --msgfile MSGFILENM - internal - get log message from MSGFILENM (and delete)

We expect to be invoked from loginfo with %{CVSROOT} %{sVv}: CVS expands
the loginfo %{sVv} into a single command-line token (bizarrely enough)
containing multiple, space-delimited parts:

  - The first part is the path of repository directory

  - Then comes a comma-concatenated string for each file being checked in,
    consisting of:

    - The file name,
    - The old version number, then
    - the new one, like so:

      filename,1.52,1.53

\(See the CVS Gnu INFO file for loginfo for more format-string details.)

Currently the actions are:

 - do a g+w chmod of the subject files - unset CHMOD_GW to disable this
 - email checkin messages to designated recipients
 - do an rsync of the repository to the public repository host.

... with settings for the latter two configured in the traffic_table.py
module.

Note that any intervening directories between the CVSROOT and the root of
the repository project directory will not be created on the mirror by the
rsync procedure - they must be created somehow else.  Though this can be
inconvenient, it is beneficial in that it provides a sort of sanity check
on the target directories."""

import sys, os, tempfile
import string
import getopt

try:
    import re
    got_re = 1
except ImportError:
    import regex
    got_re = 0

import traffic_table

# OUTPUT_LOG must be writable by anyone whose checkins will invoke this
# script in order for their logging to happen.
OUTPUT_LOG = "/cvs-repository/cvs-postcommit_actions.log"

# Set CVSMASTER to the email address of someone managing your CVS mirroring.
CVSMASTER = "klm@digicool.com"

# Zero CHMOD_GW this if you don't want automatic chmod g+w of files that were
# checked in. 
CHMOD_GW = 1

MAIL_CMD = "/bin/mail"
SSH_EXE_PATH = RSYNC_EXE_PATH = ["/bin", "/usr/bin", "/usr/local/bin"]

# IDENTITY_FILE must be readable by anyone doing a checkin that uses the
# rsync mechanism.  It's better to have it group readable, and everyone
# that needs in the group - world readable opens up the rsync privilege to
# everyone on the system.
# XXX It may make sense to have a fallback to individual people's identity
#     files when no central one exists.

IDENTITY_ACCT = "dccvs"
IDENTITY_FILE = "/cvs-repository/cvsidentity"
KNOWN_HOSTS_FILE = "/cvs-repository/cvs-known_hosts"


WAIT = 0                                # Fork unless waiting is requested.
RECURSE = 0                             # '--recurse' option
DRYRUN = 0                              # '--dryrun' option
VERBOSE = 0                             # '--verbose' option
SYNCREPO = 0                            # '--syncrepo' option
MSGFILENM = ""                          # '--msgfile' option (value of arg)
SCRIPT = "postcommit_actions"           # Will b set to argv[0], when obtained.

if got_re:
    sVv_re = re.compile("(.*),([^,]+),([^,]+)")
else:
    sVv_re = regex.compile("\\(.*\\),\\([^,]+\\),\\([^,]+\\)")

def main(args):
    """Grok the args and the traffic_table and process accordingly."""

    global SCRIPT, DRYRUN, VERBOSE, RECURSE, WAIT, MSGFILENM, SYNCREPO

    orig_args = args[:]

    SCRIPT = args[0]
    try:
        opts, args = getopt.getopt(args[1:], "", ["verbose", "dryrun",
                                                  "recurse", "wait",
                                                  "msgfile=", "syncrepo",
                                                  "syncall",
                                                  ])
    except getopt.error, err:
        complain("%s\n", err)
        raise SystemExit, 1

    only_sync = 0
    sync_all = 0

    for opt, val in opts:
        if opt == "--verbose":
            VERBOSE = 1
            complain("%s: VERBOSE mode...\n", SCRIPT)
        elif opt == "--dryrun":
            DRYRUN = 1
            complain("%s: DRYRUN mode...\n", SCRIPT)
        elif opt == "--recurse":
            RECURSE = 1
            complain("%s: FULL-DEPTH RECURSE mode...\n", SCRIPT)
        elif opt == "--wait":
            WAIT = 1
            complain("%s: WAIT mode - continuing in foreground...\n", SCRIPT)
        elif opt == "--msgfile":
            # This is internal, for the script to pass itself a file.
            MSGFILENM = val
        elif opt == "--syncrepo":
            SYNCREPO = 1
            RECURSE = 1
            WAIT = 1
            only_sync = 1
        elif opt == "--syncall":
            SYNCREPO = 1
            RECURSE = 1
            WAIT = 1
            only_sync = 1
            sync_all = 1
        else:
            complain("Unrecognized option '%s'\n", opt)
            raise SystemExit, 1
    if VERBOSE:
        complain("Initial args: %s '%s'\n",
                 string.join(orig_args[:-1], " "),
                 orig_args[-1])

    if not sync_all and len(args) != 1:
        usage(); raise SystemExit, 1

    doing_directory = 0
    no_files = 1
    if sync_all:
        entries = all_entries()
        repo = "DEBUG"
        subjs = "<everything>"
    else:
        # The %{sVv} args are passed in as a single token - have to split them.
        split_args = string.split(args[0])
        repo = split_args[0]

        if len(split_args) == 0:
            subjs = ["<no files>", "", ""]
        elif len(split_args) == 1:
            subjs = split_args + ["", ""]
        elif split_args[1] == "-":
            subjs = split_args
            doing_directory = 1
        else:
            no_files = 0
            subjs = map(grok_file, split_args[1:])

        if VERBOSE:
            complain("CWD: %s, Repo: %s, ", os.getcwd(), repo)
            complain("Subjects: %s\n", subjs)

        if not WAIT:
            detach(orig_args)

        entries = find_entries(repo)

    if CHMOD_GW and not only_sync:
        if doing_directory:
            do_chmod(['.'])
        elif not no_files:
            do_chmod(subjs)

    for entry in entries:
        path, addrs = entry['path'], entry['addrs']
        excludes, remote = entry['excludes'], entry['remote']
        if addrs and not only_sync:
                do_mail(path, repo, addrs, subjs,
                        doing_directory=doing_directory, no_files=no_files)
        if remote:
            do_sync(path, repo, remote, subjs, excludes, recurse=RECURSE,
                    doing_directory=doing_directory, no_files=no_files)
    if not entries and only_sync:
            note_failure("*** --syncrepo invalid - no repository"
                         " for %s in config file.\n",
                         repo)

    if VERBOSE:
        complain("Done.\n")

    if failures:
        handle_failures(orig_args)

def detach(args):
    """Fork us into the background, with stdout and stderr to OUTPUT_LOG.

    We have to disconnect std io (in, out, and err) and run the program in
    the background - which we do using some shell wizardry."""
    global MSGFILENM

    doctored_args = [args[0]]
    doctored_args.append("--wait")
    if not MSGFILENM:
        tempfile.mktemp()           # Throw one away, to get initial template.
        tempfile.tempdir = "/tmp"
        tempfile.template = "cvs-log" + tempfile.template
        msgfile = open(tempfile.mktemp(), 'w')
        msgfile.write(sys.stdin.read())
        msgfile.close()
        MSGFILENM = msgfile.name
    doctored_args.append("--msgfile")
    doctored_args.append(MSGFILENM)
    for i in args[1:]:
        doctored_args.append('"%s"' % i)
    cmd = (("( exec 1>>%s 2>&1; " + string.join(doctored_args, " ") +  " &)")
           % OUTPUT_LOG)
    
    if VERBOSE:
        complain("Reexecing detached, cmd:\n\t%s\n", cmd)

    os.system(cmd)
    loosen_file(OUTPUT_LOG)

    os._exit(0)

def all_entries():
    return find_entries(all=1)

def find_entries(repo=None, all=None):
    """Return dictionary of traffic_table entries qualified by repo regexp.

    all == 1 means return all entries, regardless of repo arg."""
    entries = []
    for t in traffic_table.table:
        if all:
            is_match = 1
        elif got_re:
            is_match = re.search(t['path'], repo)
        else:
            is_match = (regex.search(t['path'], repo) != -1)
        if is_match:
            if not t.has_key('excludes'):
                t['excludes'] = []
            if not t.has_key('remote'):
                try:
                    t['remote'] = traffic_table.remote
                except AttributeError:
                    raise AttributeError, ("traffic_table must have default"
                                           " repo setting or explicit repo"
                                           " values on all entries")
            if t.has_key('addrs'):
                if type(t['addrs']) == type(""):
                    # Be lenient - listify string args.
                    t['addrs'] = [t['addrs']]
            entries.append(t)
    if VERBOSE > 1:
        complain("Resolved table entry:\n  %s\n", entries)
    return entries

def do_mail(name, repo, addrs, subjs, doing_directory=0, no_files=0):
    """Send notice about checkin to addresses dictated by traffic table."""
    if VERBOSE:
        complain("Notice to %s for %s / %s\n", addrs, repo, subjs)
    # The message contents are on stdin, just _yearning_ to be sent...-)
    subject = "CVS: %s " % name
    if doing_directory or no_files:
        subject = subject + string.join(subjs, " ")
    else:
        subject = subject + " -"
        for fn, old, new in subjs:
            subject = subject + " %s:%s" % (fn, new)
    cmd = ("%s%s%s %s -s '%s' %s" % ((VERBOSE and "set -x; ") or "",
                                     (DRYRUN and "echo Would do: ") or "",
                                     MAIL_CMD,
                                     (VERBOSE and "-v") or "",
                                     subject,
                                     string.join(addrs, ",")))
    if MSGFILENM:
        cmd = cmd + "< %s" % MSGFILENM

    if VERBOSE:
        complain("%sDoing mail cmd:\n\t%s\n",
                 ((DRYRUN and "NOT ") or ""), cmd)
    result = os.system(cmd)
    if result:
        note_failure("*** Mail returned %s...", result)

    if MSGFILENM:
        os.unlink(MSGFILENM)

def do_sync(path, repo, remote, subjs=None, excludes=None, recurse=0,
            doing_directory=0, no_files=0):
    """Syncronize repository to mirror.

    The repository directory containing the subjects is synced.  (In fact,
    the actual setting of subjs doesn't matter.)  If recurse is set, then
    the recursion extends to full depth below the repo dir (and the
    activity is conducted in the foreground)."""

    RSYNC_EXE = get_command("rsync", RSYNC_EXE_PATH)
    if not RSYNC_EXE:
        note_failure("*** Rsync executable not found, skipping it!")
        return
    SSH_EXE = get_command("ssh", SSH_EXE_PATH)
    if not SSH_EXE:
        note_failure("*** Ssh executable not found, skipping rsync!")
        return

    if VERBOSE:
        if doing_directory:
            fnames = "<.>"
        elif no_files:
            fnames = "<>"
        else:
            fnames = string.join(map(lambda x: x[0], subjs), ",")
        complain("Sync for %s to %s; of %s/ %s / %s\n",
                 path, remote, os.environ["CVSROOT"], repo, fnames)

    ssh_fragment = ('--rsh="%s -o UserKnownHostsFile=%s %s -i %s -l %s"'
                    % (SSH_EXE, KNOWN_HOSTS_FILE, (VERBOSE and "-v") or "",
                       IDENTITY_FILE, IDENTITY_ACCT))
    
    if excludes:
        specific_excludes = ''
        for i in excludes:
            specific_excludes = (specific_excludes
                                 + ' --exclude "%s"' % i)
    else:
        specific_excludes = ''

    cmd = (RSYNC_EXE
           + " %s " % ssh_fragment
           + " --update"                # Preserve newer files
           + " --recursive"
           + ' --exclude "#cvs.*"'      # Do not dup cvs lock files
           + ' --exclude ".#*"'         # Do not dup cvs backup files
           + specific_excludes          # empty if None specified
           + " --links"                 # preserve soft-links
           + " --hard-links"            #    "     hard-links
           + " --perms"                 #    "     permissions
           + " --times"                 #    "     times
           + " --sparse"                # handle sparse files efficiently
           + " --delete"                # keep remote directory in sync
           #+ " --compress"              # (more compression context than ssh)
           )
    if VERBOSE or SYNCREPO:
        cmd = cmd + " --verbose"

    if not recurse:
        cmd = cmd + ' --exclude "/*/*"'

    try:
        repodir = remote['repodir'] % path
    except TypeError:
        repodir = remote['repodir']

    # Special case for individual file targets:
    if os.path.isfile("%s/%s,v" % (os.environ["CVSROOT"], path)):
        trailing_slash_or_comma_v_1 = ",v"
        trailing_slash_or_comma_v_2 = ",v"
    elif doing_directory or recurse:
        # We must have the slash on the origin dir arg, or it'll be nested
        # in target:
        trailing_slash_or_comma_v_1 = "/"
        # If we don't have slash on target dir arg, it'll be created if
        # it's not already there:
        trailing_slash_or_comma_v_2 = ""
    else:
        trailing_slash_or_comma_v_1 = "/"
        trailing_slash_or_comma_v_2 = "/"

    cmd = ("%s%s %s/%s%s %s:%s/%s%s" % ((VERBOSE and "set -x; ") or "",
                                        cmd,
                                        os.environ["CVSROOT"], path,
                                        trailing_slash_or_comma_v_1,
                                        remote['host'], repodir, path,
                                        trailing_slash_or_comma_v_2))
    if VERBOSE:
        complain("%sDoing rsync cmd:\n\t%s\n",
                 ((DRYRUN and "NOT ") or ""), cmd)
    elif SYNCREPO:
        complain("%sDoing syncrepo rsync of %s\n", 
                 ((DRYRUN and "NOT ") or ""), path)

    if DRYRUN:
        print "Would do:\n\t", cmd
        result = 0
    else:
        result = os.system(cmd)
    if result:
        note_failure("*** Rsync returned %s...", result)

def do_chmod(subjs):
    fnames = []
    for i in subjs:
        if len(i) == 3 and i[2] != "NONE":
            fnames.append(i[0])
    if not fnames:
        fnames = ["."]
    cmd = ("%s%schmod g+w %s" % ((VERBOSE and "set -x; ") or "",
                                 (DRYRUN and "echo would do: ") or "",
                                 string.join(fnames, " ")))
    if VERBOSE:
        complain("Reexecing, cmd:\n\t%s\n", cmd)
    result = os.system(cmd)
    if result:
        note_failure("*** Chmod returned %s...", result)

def loosen_file(fname):
    """Relax permissions on (newly created) file so others can use it too."""
    try:
        os.chmod(fname, 0777)
    except os.error, err:
        pass

def grok_file(s):
    """Separate "file,old-version,new-version"."""
    m = sVv_re.match(s)
    if got_re:
        if not m:
            raise ValueError, "'%s' not in file,old-vers,new-vers format" % s
        return m.groups()
    else:
        # regex instead of re.
        if m == -1:
            raise ValueError, "'%s' not in file,old-vers,new-vers format" % s
        return sVv_re.group(1, 2, 3)

failures = 0
def note_failure(msg, *args):
    """Register a failure for handle_failures to announce at the end."""
    global failures
    failures = 1
    apply(complain, (msg,) + args)

def handle_failures(argstring):
    """On serious failures, send the complaints log to CVSMASTER."""
    import time

    if os.environ.has_key('LOGNAME'):
        user = os.environ['LOGNAME']
    elif os.environ.has_key('USER'):
        user = os.environ['USER']
    else:
        user = '<unidentified user>'

    if os.path.isfile(OUTPUT_LOG):
        log_file_expr = ("\n\tSee log file for application errors:\n\t\t%s"
                         % OUTPUT_LOG)
    else:
        log_file_expr = ""

    complain("Sending complaints log to CVSMASTER %s\n", CVSMASTER)
    complain("Time stamp: %s\n", time.ctime(time.time()))
    complain("Fatal failures in %s:%s\n\tCheckin by: %s\n\tInvocation: %s\n\n",
             SCRIPT, log_file_expr, user, argstring)

    cmd = ('%s %s -s "CVS errors in %s for %s" %s'
           % (MAIL_CMD, ((VERBOSE and "-v") or ""), SCRIPT, user, CVSMASTER))
    f = os.popen(cmd, 'w')
    f.write("Serious errors encountered during CVS postcommit actions,\n")
    f.write("the log is below with orienting details at the bottom.\n\n")
    f.write(string.join(complaints, ""))
    return f.close()

def usage():
    complain("Usage: %s [options] ", SCRIPT)
    complain('"repopath file,oldv,newv [f2,o2,n2 ...]"\n')
    complain("(Note that repo-path and files must be"
             " quoted so they are a single token.)\n")

def get_command(cmd, path):
    """Get a valid exe for cmd on path."""
    for d in path:
        maybe = os.path.join(d, cmd)
        if os.path.isfile(maybe):
            return maybe
    note_failure("No usable %s executable found.\n", `cmd`)
    

complaints = []
def complain(msg, *args):
    global complaints
    complaints.append(msg % args)
    sys.stderr.write(msg % args)
    sys.stderr.flush()

if __name__ == "__main__":
    main(sys.argv)

