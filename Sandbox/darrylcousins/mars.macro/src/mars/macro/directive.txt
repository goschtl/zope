========================
Mars Template Directives
========================

Directives specific to this package
-----------------------------------

* mars.macro.macro(name):
  The name of the macro to be used. This allows us to reference 
  the named  macro defined with metal:define-macro if we use a 
  different IMacroDirective name.

* mars.macro.view(class_or_interface):
  The view for which the macro should be used',
  Default: IBrowserView

* mars.macro.content_type(name):
  The content type identifies the type of data.
  Default: text/html

Also the mars.layer directive may be used
-----------------------------------------

* mars.layer.layer(class_or_interface):
  The layer for which the template should be available.
  This directive can be used at module level
  Default: zope.publisher.browser.interfaces.IDefaultBrowserLayer

Relevant grok directives
------------------------

* grok.template(path):
  This is used different to IGrokDirectives.template. It looks up the file
  containing the page template using the path relative to the current module, if
  not found it tries `path` as an absolute path, if not found GrokError is
  raised. The file should end in extensions ``.pt`` or ``.html``.
  **Required**

* grok.name(name):
  The macro name which this macro is registered for. The macro name can be the
  same defined in metal:define-macro but does not have to be the same. If no
  macro attribute is given the name is used as the name defined in
  metal:define-macro. If you need to register a macro under a different name as
  the defined one, you can use the macro attribute which have to reference the
  metal.define-macro name. The TALES expression calls macros by this name and
  returns the macro within the same name or with the name defined in the macro
  attribute.
  Default: or **Required**?

* grok.context(class_or_interface):
  The context for which the macro should be used. Usually should be
  defined.
  Default: zope.interface.Interface
