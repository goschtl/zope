=========
Mars Form
=========

The ``FormView`` class is a mixin for z3c.form views.

Set up
------

First some imports.

  >>> import zope.component
  >>> import zope.interface
  >>> from zope.pagetemplate.interfaces import IPageTemplate
  >>> import mars.template
  >>> import grok
  >>> import os, tempfile
  >>> temp_dir = tempfile.mkdtemp()
  >>> from z3c.form import form, field
  >>> from z3c.formui import layout
  >>> from zope.traversing.browser import absoluteURL

We need a request object to use in the tests, we use z3c.form testing request
because it implements IFormLayer.

  >>> from z3c.form.testing import TestRequest
  >>> request = TestRequest()

Form View
---------

FormView is useful with z3c.form (see mars.formdemo for examples). It provides
neither a ``render`` nor a ``__call__`` method but may be used with z3c.form as
in the following example.

To give us an object to work with we define a new interface including text attribute:

  >>> import zope.schema
  >>> class IDocument(zope.interface.Interface):
  ...     """A document."""
  ...     text = zope.schema.TextLine(title=u'Text', description=u'Text attr.')

Also define a content object whcih implements the interface:

  >>> class Document(object):
  ...     zope.interface.implements(IDocument)
  ...     text = None
  >>> document = Document()

Now create and grok an add form.

  >>> class Add(mars.form.FormView, layout.AddFormLayoutSupport, form.AddForm):
  ...     """ A sample add form."""
  ...     grok.context(zope.interface.Interface)
  ... 
  ...     label = u'Document Add Form'
  ...     fields = field.Fields(IDocument)

In functional testing we can use z3c.formui defaults to render the form. Here we
need a simple template for the form.
   
  >>> template = os.path.join(temp_dir, 'template.pt')
  >>> open(template, 'w').write('''
  ...   <tal:block repeat="widget view/widgets/values">
  ...   <div class="widget" tal:content="structure widget/render">
  ...   </div>
  ...   </tal:block>
  ... ''')

  >>> class Template(mars.template.TemplateFactory):
  ...     grok.context(Add)
  ...     grok.template(template) 

Grok our form and template
    
  >>> from mars.form.meta import FormViewGrokker
  >>> FormViewGrokker().grok('', Add, module_info, config)
  True

  >>> from mars.template.meta import TemplateFactoryGrokker
  >>> TemplateFactoryGrokker().grok('', Template, module_info, config)
  True
  >>> config.execute_actions()

  >>> view = zope.component.getMultiAdapter((document, request),
  ...                                       name='add')

We can now render the add form.

  >>> view.update()
  >>> print view.render()
  <div class="widget"><input type="text" id="form-widgets-text"
       name="form.widgets.text"
       class="text-widget required textline-field" value="" />
  </div>

Form as a pagelet
-----------------

Forms also may act as pagelets for which we need a layout template to render the form into.

  >>> layout = os.path.join(temp_dir, 'layout.pt')
  >>> open(layout, 'w').write('''
  ...   <html>
  ...     <body>
  ...       <div class="layout" tal:content="structure provider:pagelet">
  ...         here comes the content
  ...       </div>
  ...     </body>
  ...   </html>
  ... ''')

  >>> from zope.publisher.interfaces.browser import IBrowserPage
  >>> class Layout(mars.template.LayoutFactory):
  ...     """layout template for `home`"""
  ...     grok.context(IBrowserPage)
  ...     grok.template(layout) 
    
  >>> from mars.template.meta import LayoutFactoryGrokker
  >>> LayoutFactoryGrokker().grok('', Layout, module_info, config)
  True
  >>> config.execute_actions()

We need to register the content provider ``pagelet`` before we
can use them. This is usually registered by inclusion of z3c.pagelet in
site.zcml

  >>> from zope.contentprovider.interfaces import IContentProvider
  >>> from z3c.pagelet import provider
  >>> zope.component.provideAdapter(provider.PageletRenderer,
  ...     provides=IContentProvider, name='pagelet')


  >>> print view()
  <html>
    <body>
      <div class="layout">
  <div class="widget"><input type="text" id="form-widgets-text"
       name="form.widgets.text"
       class="text-widget required textline-field" value="" />
  </div>
  </div>
    </body>
  </html>


Cleanup
-------

  >>> import shutil
  >>> shutil.rmtree(temp_dir)

