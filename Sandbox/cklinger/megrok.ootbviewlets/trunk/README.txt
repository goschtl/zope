=========================================================
Documentation About Project Features Generated by ZBoiler
=========================================================

ZBoiler (http://zboiler.com) was used to generate the boiler plate
code for this project.  To build your project, run these commands::

  $ python bootstrap.py
  $ ./bin/buildout

What happens next depends on the features you used to generate your
project.  Check out more information about each feature below.



Metadata
--------

The Metadata feature sets up the setup.py file which is what
setuptools uses to generate distributable python eggs.



Restructured Text Documentation
-------------------------------

The ReSTructured Text Documentation feature hooks up scripts
for generating html (or latex for that matter) documentation
from ReSTructured text files using Sphinx.  There are a few
pieces involved in this hookup:

  #. ``buildout.cfg`` **part section**

       This looks something like::

         [docs]
         recipe = z3c.recipe.sphinxdoc
         eggs = yourproject [docs]
                z3c.recipe.sphinxdoc
         default.css =
         layout.html =

       This buildout part section will generate a script in the
       bin directory called ``docs`` which you can run liket his::

         $ ./bin/docs

       Documentation will be put into the ``parts/docs/`` directory, with
       one directory for each package specified in the eggs parameter of
       the docs section.  See the documentation for z3c.recipe.sphinxdoc
       for more information.  It can be found at

         http://pypi.python.org/pypi/z3c.recipe.sphinxdoc

  #. ``setup.py extras_require`` **section**

       For the docs to build correctly, there must be a ``docs`` section in
       ``extras_require`` that pulls in the Sphinx dependencies.

  #. ``index.txt`` **file in project src**

       An ``index.txt`` file will be added to the src directory.  This
       serves as the root document used by Sphinx to generate all the
       documentation.  See the Sphinx documentation for what sort of things
       you can put in here at

         http://sphinx.pocoo.org/



ZPL Header
----------

The Zope Public License file header looks something like this::

  ##############################################################################
  #
  # Copyright (c) 2009 None.
  # All Rights Reserved.
  #
  # This software is subject to the provisions of the Zope Public License,
  # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
  # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
  # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
  # FOR A PARTICULAR PURPOSE.
  #
  ##############################################################################



Python Interpreter
------------------

The Python Interpreter feature creates an alias to whatever python
interpreter you want inside your project's bin/ directory.
Furthermore, it adds your project and all its egg dependencies to the
python path.  After running buildout from your project directory you
can start up the interpreter as normal::

  $ ./bin/python

  >>> from myproject import mymodule
  >>> form a.dependency import something



Automated Tests
---------------

The Automated Testing feature generates boiler plate code for running
unittests, specifically in the form of DocTests.  Here are the various
pieces generated by the Automated Testing Feature:

  1. **new buildout.cfg sections**

       Three new sections are added to the buildout.cfg file. Each
       correspond to executable scripts in the bin/ directory.  There is
       a test runner which you can run with this command::

         $ ./bin/test

       There are many command line options that can be used by the test
       runner.  See them all by running::

         $ ./bin/test --help

       You can also generate coverage reports for the tests with the command::

         $ ./bin/coverage-test

       This runs the same test runner as ``./bin/test`` buts adds on the
       options for generating coverage reports which are always a little
       painful to remember.  By default, this will put all the reports in
       a ``coverage/`` directory. After you have generated the coverage
       reports, you render them into nice color-coded html pages with
       this command::

         $ ./bin/coverage-report

  2. **new setup.py extras_require section**

       In order to support the test runner, a new extras_require section
       called ``test`` is added to the ``setup.py`` file.  This pulls in
       z3c.coverage and zope.testing.

  3. **``tests`` module**

       The test runner will search through your project src for modules
       starting with the name ``test``.  The Automated Testing feature
       adds a sub package named ``tests`` to the project source, and adds
       a python module called ``test_doc.py`` into the tests module.  The
       test_doc module hooks up the test suite that references the doc
       tests.

