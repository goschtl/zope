
Queryobject
===========

Where is it used:
* output of the parser
* input of the queryoptimizer
* output of the queryoptimizer
* input of the rewriter

These classes make up the representation of the query.
Instances of the classes are placed in a tree.
This tree organization is needed in first place for the optimization.
It is a lot easier to look for a pattern is a sub-tree and replace that subtree.

To make life easier we'll use the parser to produce our sample queryobject
trees:

    >>> from ocql.parser.queryparser import QueryParser

Let's take a fairly simple one:

    >>> head = QueryParser("set [ c in ICourse; c.credits <= 3 | c.code ]")(None)
    >>> head
    Head(Query(<type 'set'>,
    In(Identifier(c), Identifier(ICourse));
    Le(Property(Identifier(c), Identifier(credits)),
    Constant(3)), Property(Identifier(c), Identifier(code))))

There is always a Head element, which contains the complete tree:

    >>> head.tree
    Query(<type 'set'>,
    In(Identifier(c), Identifier(ICourse));
    Le(...), Property(...))

All tree elements know about their child elements:

    >>> head.tree.children
    [In(Identifier(c), Identifier(ICourse)), Le(...), Property(...)]

And all child elements know about their parents:

    >>> head.tree.__parent__
    Head(...)

They also know their 'name' or 'role':

    >>> head.tree.__name__
    'tree'

Though built-in types don't get into the tree:
(as you might noticed, this is also not in children list)

    >>> head.tree.collection_type
    <type 'set'>

    >>> head.tree.collection_type.__parent__
    Traceback (most recent call last):
    ...
    AttributeError: type object 'set' has no attribute '__parent__'
