
I'm sorry, but I'm lazy here, in reality we would have to create
stubs for all ocql.queryobject classes and use those...
But it's a lot faster to reuse the parser and the existing classes.

Add queries first to parser.txt doctest, after they pass there they can be
added here.

    >>> from ocql.parser.queryparser import QueryParser
    >>> from ocql.qoptimizer.qoptimizer import QueryOptimizer
    >>> from ocql.rewriter.rewriter import Rewriter

    >>> from ocql.testing.database import TestMetadata


    >>> qo = QueryParser("set [ | 1 ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Single(<type 'set'>, `1`))

    >>> qo = QueryParser("list [ | 1 ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Single(<type 'list'>, `1`))

    >>> qo = QueryParser("set [ | 1 ] union set [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Union(<type 'set'>, Single(<type 'set'>, `1`), Single(<type 'set'>, `2`)))

    >>> for i in alg.walk():
    ...     print i
    Union(<type 'set'>, Single(<type 'set'>, `1`), Single(<type 'set'>, `2`))
    Single(<type 'set'>, `1`)
    `1`
    Single(<type 'set'>, `2`)
    `2`

    >>> qo = QueryParser("list [ | 1 ] union list [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Union(<type 'list'>, Single(<type 'list'>, `1`), Single(<type 'list'>, `2`)))

    >>> qo = QueryParser("set [ | 1 ] differ set [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Differ(<type 'set'>, Single(<type 'set'>, `1`), Single(<type 'set'>, `2`)))

    >>> qo = QueryParser("list [ | 1 ] differ list [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Differ(<type 'list'>, Single(<type 'list'>, `1`), Single(<type 'list'>, `2`)))

    >>> qo = QueryParser("set [ i in ICourse | i ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'set'>, Lambda i: Single(<type 'set'>, i), Make(<type 'set'>, <type 'set'>, ICourse)))

    >>> qo = QueryParser("list [ i in ICourse | i ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'list'>, Lambda i: Single(<type 'list'>, i), Make(<type 'list'>, <type 'set'>, ICourse)))

    >>> qo = QueryParser("len(set [ i in ICourse | i ])")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Reduce(<type 'set'>, `0`, Lambda i: `1`, +, Iter(<type 'set'>, Lambda i: Single(<type 'set'>, i), Make(<type 'set'>, <type 'set'>, ICourse))))

    >>> qo = QueryParser("len(list [ i in ICourse | i ])")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Reduce(<type 'list'>, `0`, Lambda i: `1`, +, Iter(<type 'list'>, Lambda i: Single(<type 'list'>, i), Make(<type 'list'>, <type 'set'>, ICourse))))

    >>> qo = QueryParser("set [ c in ICourse; c.credits>3 | c.code ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'set'>, Lambda c: If(c.credits>`3`, Single(<type 'set'>, c.code), Empty(<type 'set'>)), Make(<type 'set'>, <type 'set'>, ICourse)))

    >>> qo = QueryParser("set [ c in ICourse; c.credits>=3 | c.code ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'set'>, Lambda c: If(c.credits>=`3`, Single(<type 'set'>, c.code), Empty(<type 'set'>)), Make(<type 'set'>, <type 'set'>, ICourse)))

    >>> qo = QueryParser("set [ c in ICourse; c.credits<3 | c.code ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'set'>, Lambda c: If(c.credits<`3`, Single(<type 'set'>, c.code), Empty(<type 'set'>)), Make(<type 'set'>, <type 'set'>, ICourse)))

    >>> qo = QueryParser("set [ c in ICourse; c.credits<=3 | c.code ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'set'>, Lambda c: If(c.credits<=`3`, Single(<type 'set'>, c.code), Empty(<type 'set'>)), Make(<type 'set'>, <type 'set'>, ICourse)))

    >>> qo = QueryParser("set [ c in ICourse; a as c.code | a ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'set'>, Lambda c: Iter(<type 'set'>, Lambda a: Single(<type 'set'>, a), Single(<type 'set'>, c.code)), Make(<type 'set'>, <type 'set'>, ICourse)))

    >>> qo = QueryParser("set [ s in IStudents; a as s.major.address.street; a=='Hillhead Street' or a=='Gibson Street' | s ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> print str(alg)
    Head(Iter(<type 'set'>, Lambda c: Iter(<type 'set'>, Lambda a: Single(<type 'set'>, a), Single(<type 'set'>, c.code)), Make(<type 'set'>, <type 'set'>, ICourse)))
