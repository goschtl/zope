
Algebra
=======

The design of the canonical algebra aims for simplicity, regularity, and
extensibility. The canonical algebra consists of a small number of collection
and non-collection operations. Some of the operations are parameterised with
functional arguments. This treatment makes the operations more regular as
variations can be captured in the functional arguments. Unlike methods found
in the object-oriented paradigm, these functions are system-defined and hence
amenable to reasoning and therefore optimisation. The use of functional
arguments together with a regular set of collection operations makes the
algebra more extensible as a new collection can be integrated by providing a
set of the regular operations. However, it should be noted that the canonical
algebra is not a minimal set of operations, some operations can be defined by
others, for example, select is introduced to capture well-known evaluation
strategies.


Following algebra operation descriptions extracted from
http://citeseer.ist.psu.edu/359340.html
Corresponding Python implementations are used in this project

The samples use simplified expressions instead of a full complicated algebra
tree to be able to focus on the meat.
But still the results should pass.

Binary Operations
~~~~~~~~~~~~~~~~~
The union and differ operations take two operands of the same collection kind
and return a resultant collection of that kind.

Union ( C1, C2 )
-----------------
The union operations combine two collections. The cardinality of each resultant
element is the sum of its cardinalities in the operand collections except in
the case of sets where all elements are unique.
Ordering, if respected, will be preserved.

    >>> from ocql.rewriter.algebra import Union
    >>> x = Union(set, set([1, 2]), set([2, 3]))
    >>> x
    Union(<type 'set'>, set([1, 2]), set([2, 3]))

    >>> run(x)
    set([1, 2, 3])

    >>> x = Union(list, [1, 2], [2, 3])
    >>> x
    Union(<type 'list'>, [1, 2], [2, 3])

    >>> run(x)
    [1, 2, 3]


Differ ( C1, C2 )
------------------
The differ operations form a collection by removing elements of the second
operand collection from the first operand collection. The cardinality of
each resultant element is the difference between its cardinality in the
first operand collection and that in the second operand collection.
Ordering, if respected, will be preserved.

    >>> from ocql.rewriter.algebra import Differ
    >>> x = Differ(set, set([1, 2]), set([2, 3]))
    >>> x
    Differ(<type 'set'>, set([1, 2]), set([2, 3]))

    >>> run(x)
    set([1])

    >>> x = Differ(list, [1, 2], [2, 3])
    >>> x
    Differ(<type 'list'>, [1, 2], [2, 3])

    >>> run(x)
    [1]


Equal ( E1, E2 )
----------------
The equal operations compare two collections of the same kind and return true
if their elements are the same.
Duplication and ordering, if respected, will be taken into account.

Not yet implemented

Unary Operations
~~~~~~~~~~~~~~~~
The operations described below are unary in the sense that each takes a
collection as one of the operands. Other operands include functions on
the elements of the operand collection and functions over results returned
by other operand functions.

Reduce ( E0, F1, Faggregate, C )
---------------------------------
The reduce operations are used to combine elements in a collection. If the
operand collection C is empty, E0 is returned. When the operand collection
is not empty, F1 is applied to each element of C and the results are supplied
pairwise to Faggregate which accumulates the results to give a single value.
E0 is used for the first pair of the C collection in the Faggregate function.

    >>> import operator
    >>> from ocql.rewriter.algebra import Reduce
    >>> x = Reduce(set, 0, 'lambda y: y+1', 'operator.add', set([1, 2, 3, 4, 5]))
    >>> x
    Reduce(<type 'set'>, 0, lambda y: y+1, operator.add, set([1, 2, 3, 4, 5]))

    >>> run(x)
    20

    >>> x = Reduce(list, 0, 'lambda y: y+1', 'operator.add', [1, 2, 3, 4, 5])
    >>> x
    Reduce(<type 'list'>, 0, lambda y: y+1, operator.add, [1, 2, 3, 4, 5])

    >>> run(x)
    20


Map ( F, C )
------------
The map operations apply the operand function F to each element in the operand
collection C and form a collection containing the results. The resultant
collection and operand collection are of the same collection kind.

Not yet implemented


Select ( F, C )
---------------
The select operation applies the operand boolean function F to each element
of the operand collection C and forms a collection of the elements for which
F returns true. The resultant collection is of the same kind as the operand
collection.

    >>> from ocql.rewriter.algebra import Select
    >>> x = Select(set, 'lambda z: z%2', set([1,2,3]))
    >>> x
    Select(<type 'set'>, lambda z: z%2, set([1, 2, 3]))

    >>> run(x)
    set([1, 3])

    >>> x = Select(list, 'lambda z: z%2', [1,2,3])
    >>> x
    Select(<type 'list'>, lambda z: z%2, [1, 2, 3])

    >>> run(x)
    [1, 3]


Make ( C )
----------
The make operations convert the operand collection from its original collection
kind to one of the three collection kinds. Conversion from bag or set to list
is non-deterministic as an arbitrary order will be assigned to the elements.

Current implementation uses this algebra class to get instances of the objects.
Therefore it cannot be run.

    >>> from ocql.rewriter.algebra import Make
    >>> x = Make(set, set([1,2]), set([2,3]))
    >>> x
    Make(<type 'set'>, set([1, 2]), set([2, 3]))

#   >>> run(x)

    >>> x = Make(list, [1,2], [2,3])
    >>> x
    Make(<type 'list'>, [1, 2], [2, 3])

#   >>> run(x)


Index( C, E )
-------------
The index operation takes a list C and returns an element of the list at
position E.

Not yet implemented


Simple Operations
------------------
The following operations take on arguments which may or may not be a collection.

Empty ( E )
-----------
The empty operations take a value and return an empty collection.

    >>> from ocql.rewriter.algebra import Empty
    >>> x = Empty(set)
    >>> x
    Empty(<type 'set'>)

    >>> run(x)
    set([])

    >>> x = Empty(list)
    >>> x
    Empty(<type 'list'>)

    >>> run(x)
    []


Single ( E )
------------
The single operations take a value and return a collection containing that value.

    >>> from ocql.rewriter.algebra import Single
    >>> x = Single(set, 1)
    >>> x
    Single(<type 'set'>, 1)

    >>> run(x)
    set([1])

    >>> x = Single(list, 1)
    >>> x
    Single(<type 'list'>, 1)

    >>> run(x)
    [1]


If( Econdition, Etrue, Efalse )
-------------------------------
The if operation is a control operation. If Econdition evaluates to true, the
value of Etrue is returned, otherwise the value of Efalse is returned.

    >>> from ocql.rewriter.algebra import If
    >>> x = If(True, 2, 3)
    >>> x
    If(True, 2, 3)

    >>> run(x)
    2


And( E1, E2 )
-------------
The and operation takes two boolean expressions and returns true if both of
them evaluate to true. This is a non-commutative operation and the operands
cannot be swapped.

Not yet implemented

Range ( E1, E2 )
----------------
The range operations generate a collection containing integers within a given range.
An empty collection is returned if the first operand expression is less than the
second one.

    >>> from ocql.rewriter.algebra import Range
    >>> x = Range(set, 1, 4)
    >>> x
    Range(<type 'set'>, 1, 4)

    >>> run(x)
    set([1, 2, 3])

    >>> x = Range(list, 1, 4)
    >>> x
    Range(<type 'list'>, 1, 4)

    >>> run(x)
    [1, 2, 3]


Iter ( F, C )
-------------
Iter function is a simple functions that can be applied to the elements of
a collection. The semantics of iter is given by rules following

(F - function, E - expression, C - collection. More details in document )
    1 - iter ( F, empty ( nil ) ) = empty ( nil )
    2 - iter ( F, single ( E ) ) = F E
    3 - iter ( F, union ( C1, C2 ) ) = union ( iter ( F, C1 ), iter ( F, C2 ) )

rule 1
------
    >>> from ocql.rewriter.algebra import Iter
    >>> x = Iter(set, 'lambda z: z', Empty(set))
    >>> x
    Iter(<type 'set'>, lambda z: z, Empty(<type 'set'>))

    >>> run(x)
    set([])

    >>> x = Iter(list, 'lambda z: z', Empty(list))
    >>> x
    Iter(<type 'list'>, lambda z: z, Empty(<type 'list'>))

    >>> run(x)
    []

rule 2
------
    >>> x = Iter(set, 'lambda z: z', Single(set, '"a"'))
    >>> x
    Iter(<type 'set'>, lambda z: z, Single(<type 'set'>, "a"))

    >>> run(x)
    set(['a'])

rule 3
------
    >>> x = Iter(set, 'lambda z: z', Union(set, set(['a']), set(['b'])))
    >>> x
    Iter(<type 'set'>, lambda z: z, Union(<type 'set'>, set(['a']), set(['b'])))

    >>> run(x)
    set(['a', 'b'])

    >>> x = Union(set, Iter(set, 'lambda z: z', Single(set, '"a"')), Iter(set, 'lambda z: z', Single(set, '"b"')))
    >>> x
    Union(<type 'set'>, Iter(<type 'set'>, lambda z: z, Single(<type 'set'>, "a")), Iter(<type 'set'>, lambda z: z, Single(<type 'set'>, "b")))

    >>> run(x)
    set(['a', 'b'])


Constant ( E )
--------------
The constant operations take a value and return a constant.

    >>> from ocql.rewriter.algebra import Constant
    >>> x = Constant(1)
    >>> x
    `1`

Identifier ( E )
----------------
The identifier operations take a value and return an identifier.

    >>> from ocql.rewriter.algebra import Identifier
    >>> x = Identifier('ocql')
    >>> x
    ocql
