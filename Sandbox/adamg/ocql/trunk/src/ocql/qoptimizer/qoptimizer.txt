
Queryobject optimizer
=====================

Input: Queryobject tree
Output: Queryobject tree

The task of the Queryobject optimizer is to do optimizations on the queryobject
tree.
Some basic optimizations can be done based on equivalence.
Those decisions can be based on static properties of the database.
Like which class is derived from which one. See the 1994 paper.
Definitely no dynamic properties can be taken into account, like objects in an index.

    >>> from ocql.qoptimizer.qoptimizer import QueryOptimizer
    >>> from ocql.interfaces import IOptimizedObjectQuery

Currently the optimizer is doing NOTHING, it just returns what it gets.
(And adds the interface IOptimizedObjectQuery)

    >>> class Dummy(object):
    ...     def __init__(self, value):
    ...          self.value = value

    >>> in_=Dummy('foo-bar')
    >>> in_.value
    'foo-bar'

    >>> out = QueryOptimizer(in_)()

    >>> print out
    <Dummy object at ...>
    >>> out.value
    'foo-bar'

    >>> IOptimizedObjectQuery.providedBy(out)
    True