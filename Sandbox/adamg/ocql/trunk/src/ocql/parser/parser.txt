

    >>> from ocql.parser.queryparser import QueryParser



    #FAILS, why?
    #>>> QueryParser("set [ ]")(None)
    #Query(<type 'set'>, , None)

    >>> QueryParser("set [ | 1 ]")(None)
    Query(<type 'set'>, , Constant(1))

    >>> QueryParser("list [ | 1 ]")(None)
    Query(<type 'list'>, , Constant(1))

    >>> QueryParser("set [ | 1 ] union set [|2]")(None)
    Union(Query(<type 'set'>, , Constant(1)), Query(<type 'set'>, , Constant(2)))

    >>> QueryParser("list [ | 1 ] union list [|2]")(None)
    Union(Query(<type 'list'>, , Constant(1)), Query(<type 'list'>, , Constant(2)))

    >>> QueryParser("set [ | 1 ] differ set [|2]")(None)
    Differ(Query(<type 'set'>, , Constant(1)), Query(<type 'set'>, , Constant(2)))

    >>> QueryParser("list [ | 1 ] differ list [|2]")(None)
    Differ(Query(<type 'list'>, , Constant(1)), Query(<type 'list'>, , Constant(2)))

    >>> QueryParser("set [ i in ICourse | i ]")(None)
    Query(<type 'set'>, In(Identifier(i), Identifier(ICourse)), Identifier(i))

    >>> QueryParser("list [ i in ICourse | i ]")(None)
    Query(<type 'list'>, In(Identifier(i), Identifier(ICourse)), Identifier(i))

    >>> QueryParser("len ( set [ i in ICourse | i ] )")(None)
    Count(Query(<type 'set'>, In(Identifier(i), Identifier(ICourse)), Identifier(i)))

    >>> QueryParser("len ( list [ i in ICourse | i ] )")(None)
    Count(Query(<type 'list'>, In(Identifier(i), Identifier(ICourse)), Identifier(i)))

    #FAILS, see raise "Help"
    #>>> QueryParser("set [ d in IDepartments; every set [ c in ICourse; some c.runBy == d | c.credits ] == 2 | d.name ]")(None)

    >>> QueryParser("set [ c in ICourse; c.credits > 3 | c.code ]")(None)
    Query(<type 'set'>, In(Identifier(c), Identifier(ICourse)); Gt(Property(Identifier(c), Identifier(credits)), Constant(3)), Property(Identifier(c), Identifier(code)))

    >>> QueryParser("list [ c in ICourse; c.credits > 3 | c.code ]")(None)
    Query(<type 'list'>, In(Identifier(c), Identifier(ICourse)); Gt(Property(Identifier(c), Identifier(credits)), Constant(3)), Property(Identifier(c), Identifier(code)))

    >>> QueryParser("set [ c in ICourse | c.code ]")(None)
    Query(<type 'set'>, In(Identifier(c), Identifier(ICourse)), Property(Identifier(c), Identifier(code)))
