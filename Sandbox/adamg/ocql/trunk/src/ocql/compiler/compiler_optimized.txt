
Optimized compilation
=====================

Checking here how an optimized algebra for zope indexes compiles into python code.

Actually the algebra optimizer does much of the work. It identifies the
possibility of the optimization and replaces the objects in the algebra
tree for the optimized ones.

Some support is needed from the database (metadata class).
It employs a method to support the retrieval from the index, otherwise it would
be quite difficult to do the retrieval inline.

Note: this optimization is very much preliminary.



We need some imports and setup:

    >>> from ocql.engine import OCQLEngine

    >>> import ocql.testing.utils_opt
    >>> ocql.testing.utils_opt.setupInterfaces(None)
    >>> ocql.testing.utils_opt.setupCatalog(None)

We'll use the same queries as in aoptimizer.txt.
Algebra trees get omitted as they are already checked over there.

Let's use the IUnOptimizedClass:
--------------------------------

    >>> query = "set [ i in IUnOptimizedClass | i ]"

    >>> run = OCQLEngine().compile(query)

Here is the runnable code:
It uses metadata.getAll, which simply returns all objects of an IF.

    >>> run
    RunnableQuery: reduce(set.union, map(lambda i: set([i]),
    set(metadata.getAll("IUnOptimizedClass"))), set())

    >>> result = run.execute()
    >>> sorted(list(result), key=lambda x:x.value)
    [UnOpt: 0, UnOpt: 1, UnOpt: 2, UnOpt: 3, UnOpt: 4, UnOpt: 5, UnOpt: 6,
    UnOpt: 7, UnOpt: 8, UnOpt: 9]
    >>> type(result)
    <type 'set'>

IUnOptimizedClass with a filter condition:
------------------------------------------

    >>> query = "set [ i in IUnOptimizedClass ; i.value == 5 | i.name ]"

    >>> run = OCQLEngine().compile(query)

Here is the runnable code:
It still uses metadata.getAll, because there is no index for this class and
property.

    >>> run
    RunnableQuery:
    reduce(set.union,
    map(lambda i: ((i.value==5) and (set([i.name])) or (set())),
    set(metadata.getAll("IUnOptimizedClass"))), set())

Results of the query:

    >>> result = run.execute()
    >>> result
    set([u'5'])


IOptimizedClass with a filter condition:
----------------------------------------

    >>> query = "set [ i in IOptimizedClass ; i.value == 5 | i.name ]"

    >>> run = OCQLEngine().compile(query)

Here is the runnable code:
It uses now metadata.getFromIndex as there is an index for the class and property.

    >>> run
    RunnableQuery:
    reduce(set.union,
    map(lambda i: set([i.name]),
    set(metadata.getFromIndex("IOptimizedClass", "value", "==", 5))), set())

    >>> result = run.execute()
    >>> result
    set([u'5'])


    >>> query = "set [ i in IOptimizedClass ; i.value <= 5 | i.name ]"
    >>> run = OCQLEngine().compile(query)
    >>> result = run.execute()
    >>> sorted(result)
    [u'0', u'1', u'2', u'3', u'4', u'5']

    >>> query = "set [ i in IOptimizedClass ; i.value >= 5 | i.name ]"
    >>> run = OCQLEngine().compile(query)
    >>> result = run.execute()
    >>> sorted(result)
    [u'5', u'6', u'7', u'8', u'9']


    >>> query = "set [ i in IOptimizedClass ; i.value < 5 | i.name ]"
    >>> run = OCQLEngine().compile(query)
    >>> result = run.execute()
    >>> sorted(result)
    [u'0', u'1', u'2', u'3', u'4']

    >>> query = "set [ i in IOptimizedClass ; i.value > 5 | i.name ]"
    >>> run = OCQLEngine().compile(query)
    >>> result = run.execute()
    >>> sorted(result)
    [u'6', u'7', u'8', u'9']

    >>> query = "set [ i in IOptimizedClass ; i.value != 5 | i.name ]"
    >>> run = OCQLEngine().compile(query)
    >>> result = run.execute()
    >>> sorted(result)
    [u'0', u'1', u'2', u'3', u'4', u'6', u'7', u'8', u'9']
