
I'm sorry, but I'm lazy here, in reality we would have to create
stubs for all ocql.rewriter.algebra classes and use those...
But it's a lot faster to reuse the parser and the existing classes.

    >>> from ocql.parser.queryparser import QueryParser
    >>> from ocql.qoptimizer.qoptimizer import QueryOptimizer
    >>> from ocql.rewriter.rewriter import Rewriter
    >>> from ocql.aoptimizer.aoptimizer import AlgebraOptimizer
    >>> from ocql.compiler.compiler import AlgebraCompiler

    >>> from ocql.testing.database import TestMetadata

    >>> import ocql.compiler.compiler
    >>> ocql.compiler.compiler.registerAdapters()

    >>> import ocql.rewriter.rewriter
    >>> ocql.rewriter.rewriter.registerAdapters()

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("set [ | 1 ]")(metadata)
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: set([1])

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("list [ | 1 ]")(metadata)
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: [1]

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("set [ | 1 ] union set [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: set.union(set([1]), set([2]))

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("list [ | 1 ] union list [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: ([1])+([2])

    >>> qo = QueryParser("set [ | 1 ] differ set [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: set.differ(set([1]), set([2]))

    >>> qo = QueryParser("list [ | 1 ] differ list [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: ([1])-([2])

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("set [ i in ICourse | i ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: reduce(set.union, map(lambda i: set([i]), set(metadata.getAll("ICourse"))), set())

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("list [ i in ICourse | i ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: reduce(operator.add, map(lambda i: [i], list(metadata.getAll("ICourse"))), [])

    ##bag not implemented
    ##>>> qo = QueryParser("size set [ i in ICourse | i ]")(TestMetadata())
    ##>>> opt = QueryOptimizer(qo)()
    ##>>> alg = Rewriter(opt)()
    ##>>> print str(alg)
    ##Iter(<type 'set'>,Lambda i: Single(<type 'set'>,i),Make(<type 'set'>,<type 'set'>,ICourse))

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("set [ c in ICourse | c.code ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: reduce(set.union, map(lambda c: set([c.code]), set(metadata.getAll("ICourse"))), set())

    >>> metadata = TestMetadata()
    >>> qo = QueryParser("list [ c in ICourse | c.code ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> aopt = AlgebraOptimizer(alg)(metadata)
    >>> run = AlgebraCompiler(aopt)(metadata, alg)
    >>> print str(run)
    RunnableQuery: reduce(operator.add, map(lambda c: [c.code], list(metadata.getAll("ICourse"))), [])
