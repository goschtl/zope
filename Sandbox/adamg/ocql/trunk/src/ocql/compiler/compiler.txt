
Compiler
========

Input: Algebra tree
Output: RunnableQuery (python code)

The task of the compiler is to compile the inputted algebra tree to python code.

I'm sorry, but I'm lazy here, in reality we would have to create
stubs for all ocql.rewriter.algebra classes and use those...
But it's a lot faster to reuse the parser and the existing classes.

We need some imports and setup for things to work:

    >>> from ocql.parser.queryparser import QueryParser
    >>> from ocql.qoptimizer.qoptimizer import QueryOptimizer
    >>> from ocql.rewriter.rewriter import Rewriter
    >>> from ocql.aoptimizer.aoptimizer import AlgebraOptimizer
    >>> from ocql.compiler.compiler import AlgebraCompiler

    >>> from ocql.testing.database import TestMetadata
    >>> metadata = TestMetadata()

    >>> def make(query):
    ...     qo = QueryParser(query)(metadata)
    ...     opt = QueryOptimizer(qo)()
    ...     alg = Rewriter(opt)()
    ...     aopt = AlgebraOptimizer(alg)(metadata)
    ...     run = AlgebraCompiler(aopt)(metadata, alg)
    ...     return aopt, run

We just want to see how the algebra compiles to code:

    >>> aopt, run = make("set [ | 1 ]")
    >>> aopt
    Head(Single(<type 'set'>, `1`))
    >>> run.code
    'set([1])'


    >>> aopt, run = make("list [ | 1 ]")
    >>> aopt
    Head(Single(<type 'list'>, `1`))
    >>> run.code
    '[1]'


    >>> aopt, run = make("set [ | 1 ] union set [|2]")
    >>> aopt
    Head(Union(<type 'set'>, Single(<type 'set'>, `1`), Single(<type 'set'>, `2`)))
    >>> run.code
    'set.union(set([1]), set([2]))'


    >>> aopt, run = make("list [ | 1 ] union list [|2]")
    >>> aopt
    Head(Union(<type 'list'>, Single(<type 'list'>, `1`), Single(<type 'list'>, `2`)))
    >>> run.code
    '([1]+filter(lambda x:x not in [1],[2]))'


    >>> aopt, run = make("set [ | 1 ] differ set [|2]")
    >>> aopt
    Head(Differ(<type 'set'>, Single(<type 'set'>, `1`), Single(<type 'set'>, `2`)))
    >>> run.code
    'set.difference(set([1]), set([2]))'


    >>> aopt, run = make("list [ | 1 ] differ list [|2]")
    >>> aopt
    Head(Differ(<type 'list'>, Single(<type 'list'>, `1`), Single(<type 'list'>, `2`)))
    >>> run.code
    '(filter(lambda x:x not in [2],[1]))'



    >>> aopt, run = make("set [ i in ICourse | i ]")
    >>> aopt
    Head(Iter(<type 'set'>, Lambda i: Single(<type 'set'>, i), Make(<type 'set'>, <type 'set'>, ICourse)))
    >>> run.code
    'reduce(set.union, map(lambda i: set([i]), set(metadata.getAll("ICourse"))), set())'


    >>> aopt, run = make("list [ i in ICourse | i ]")
    >>> aopt
    Head(Iter(<type 'list'>, Lambda i: Single(<type 'list'>, i), Make(<type 'list'>, <type 'set'>, ICourse)))
    >>> run.code
    'reduce(operator.add, map(lambda i: [i], list(metadata.getAll("ICourse"))), [])'



    >>> aopt, run = make("set [ c in ICourse | c.code ]")
    >>> aopt
    Head(Iter(<type 'set'>, Lambda c: Single(<type 'set'>, c.code), Make(<type 'set'>, <type 'set'>, ICourse)))
    >>> run.code
    'reduce(set.union, map(lambda c: set([c.code]), set(metadata.getAll("ICourse"))), set())'


    >>> aopt, run = make("list [ c in ICourse | c.code ]")
    >>> aopt
    Head(Iter(<type 'list'>, Lambda c: Single(<type 'list'>, c.code), Make(<type 'list'>, <type 'set'>, ICourse)))
    >>> run.code
    'reduce(operator.add, map(lambda c: [c.code], list(metadata.getAll("ICourse"))), [])'




    >>> aopt, run = make("len(set [ i in ICourse | i ])")
    >>> aopt
    Head(Reduce(<type 'set'>, `0`, Lambda i: `1`, +, Iter(<type 'set'>, Lambda i: Single(<type 'set'>, i), Make(<type 'set'>, <type 'set'>, ICourse))))
    >>> run.code
    'reduce(operator.add, map(lambda i: 1, reduce(set.union, map(lambda i: set([i]), set(metadata.getAll("ICourse"))), set())), 0)'


    >>> aopt, run = make("len(list [ i in ICourse | i ])")
    >>> aopt
    Head(Reduce(<type 'set'>, `0`, Lambda i: `1`, +, Iter(<type 'list'>, Lambda i: Single(<type 'list'>, i), Make(<type 'list'>, <type 'set'>, ICourse))))
    >>> run.code
    'reduce(operator.add, map(lambda i: 1, reduce(operator.add, map(lambda i: [i], list(metadata.getAll("ICourse"))), [])), 0)'


    >>> aopt, run = make("set [ c in ICourse; a as c.credits; a > 3 | c.code ]")
    >>> aopt
    Head(Iter(<type 'set'>, Lambda c: Iter(<type 'set'>,
    Lambda a: Single(<type 'set'>, a), Single(<type 'set'>, c.credits)),
    Make(<type 'set'>, <type 'set'>, ICourse)))
    >>> run.code
    breaks: where is a>3 'reduce(set.union, map(lambda c: reduce(set.union, map(lambda a: set([a]), set([c.credits])), set()), set(metadata.getAll("ICourse"))), set())'
