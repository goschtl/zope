
Queries in the rewriter.txt are extended to AlgebraOptimization

    >>> from ocql.aoptimizer.aoptimizer import AlgebraOptimizer
    >>> from ocql.interfaces import IOptimizedAlgebraObject
    >>> from ocql.parser.queryparser import QueryParser
    >>> from ocql.qoptimizer.qoptimizer import QueryOptimizer
    >>> from ocql.rewriter.rewriter import Rewriter

    >>> from ocql.testing.database import TestMetadata


    >>> qo = QueryParser("set [ | 1 ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> out = AlgebraOptimizer(alg)(None)
    >>> print str(out)
    Single(<type 'set'>, `1`)
 	


    >>> qo = QueryParser("set [ | 1 ] union set [|2]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> out = AlgebraOptimizer(alg)(None)
    >>> print str(out)
    Union(<type 'set'>, Single(<type 'set'>, `1`), Single(<type 'set'>, `2`))

    #Differ not implemented
    #>>> qo = QueryParser("set [ | 1 ] differ set [|2]")(TestMetadata())
    #>>> opt = QueryOptimizer(qo)()
    #>>> alg = Rewriter(opt)()
    #>>> print str(alg)
    #Union(<type 'set'>, Single(<type 'set'>, `1`), Single(<type 'set'>, `2`))


    >>> qo = QueryParser("set [ i in ICourse | i ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> out = AlgebraOptimizer(alg)(None)
    >>> print str(out)
    Iter(<type 'set'>, Lambda i: Single(<type 'set'>, i), Make(<type 'set'>, <type 'set'>, ICourse))

    >>> qo = QueryParser("set [ c in ICourse; c.credits>3 | c.code ]")(TestMetadata())
    >>> opt = QueryOptimizer(qo)()
    >>> alg = Rewriter(opt)()
    >>> out = AlgebraOptimizer(alg)(None)
    >>> print str(out)
    Iter(<type 'set'>, Lambda c: If(c.credits>`3`, Single(<type 'set'>, c.code), Empty(<type 'set'>)), Make(<type 'set'>, <type 'set'>, ICourse))

    #bag not implemented
    #>>> qo = QueryParser("size set [ i in ICourse | i ]")(TestMetadata())
    #>>> opt = QueryOptimizer(qo)()
    #>>> alg = Rewriter(opt)()
    #>>> print str(alg)
    #Iter(<type 'set'>, Lambda i: Single(<type 'set'>, i), Make(<type 'set'>, <type 'set'>, ICourse))