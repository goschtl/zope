==============================
Sending notifications by email
==============================

The email notifier sends email for each notification it handles.
Email is sent using an `IMailDelivery` object (as defined in the
`zope.app.mail` package).  We'll need to register one::

  >>> import zope.component
  >>> import zope.interface
  >>> import zope.sendmail.interfaces

  >>> class MailDelivery(object):
  ...
  ...     zope.interface.implements(
  ...         zope.sendmail.interfaces.IMailDelivery)
  ...
  ...     messages = []
  ...
  ...     def send(self, fromaddr, toaddrs, message):
  ...         self.messages.append((fromaddr, toaddrs, message))

  >>> mailer = MailDelivery()

  >>> zope.component.provideUtility(mailer)

We're also going to need to use notification interfaces::

  >>> import zc.notification.interfaces
  >>> import zc.notification.email.interfaces

The email notifier will need a way to look up email addresses for
users.  There is an implementation that looks in the principal
annotations, but let's use something even simpler to show that the
notifier itself is working::

  >>> class AddressLookup(object):
  ...
  ...    zope.interface.implements(
  ...        zc.notification.email.interfaces.IEmailLookupUtility)
  ...
  ...    addresses = {
  ...        "user1": "user1@example.net",
  ...        }
  ...
  ...    def getAddress(self, principal_id, annotations):
  ...        return self.addresses.get(principal_id)
  ...

  >>> lookup = AddressLookup()

  >>> zope.component.provideUtility(lookup)

When the notifier generates an email, it will adapt the notification
and the principal to the `IEmailView` interface.  This will produce an
adapter that is used to generate the email itself, except for the
"To:" and "From:" headers (which are generated by the notifier
itself).

Let's create a simple email view and register that as an adapter::

  >>> class SampleView(object):
  ...
  ...     zope.interface.implements(
  ...         zc.notification.email.interfaces.IEmailView)
  ...
  ...     zope.component.adapts(
  ...         zc.notification.interfaces.INotification,
  ...         zope.app.security.interfaces.IPrincipal)
  ...
  ...     def __init__(self, notification, principal):
  ...         self.notification = notification
  ...         self.principal = principal
  ...
  ...     def render(self):
  ...         return ("Subject: notification email\r\n"
  ...                 "\r\n"
  ...                 + self.notification.message.encode("ascii")
  ...                 + "\r\n")

  >>> zope.component.provideAdapter(SampleView)

Now that the operating environment has been prepared, we can create
and use the notifier::

  >>> import zc.notification.email.notifier

  >>> notifier = zc.notification.email.notifier.EmailNotifier()

The `fromAddress` attribute must be initialized before the utility can
be used::

  >>> notifier.fromAddress = "email-notifier@example.net"

We can now synthesize a notification to send::

  >>> import zope.i18nmessageid
  >>> _ = zope.i18nmessageid.MessageFactory("zc.notification.tests")

  >>> import zc.notification.notification

  >>> n = zc.notification.notification.Notification(
  ...     name="test-notification",
  ...     message=_(u"test-notification-message",
  ...               default=u"This is a test notification."))

To use the notifier, we'll need the annotations for the target user::

  >>> annotations = zope.component.getUtility(
  ...     zope.app.principalannotation.interfaces.IPrincipalAnnotationUtility)
  >>> user1 = annotations.getAnnotationsById("user1")

As with all notifiers, we can just use the `send()` method::

  >>> notifier.send(n, "user1", user1, None)

Since our test mailer collects information from the calls to its
`send()` method, we can examine what was done::

  >>> len(mailer.messages)
  1
  >>> sent = mailer.messages[0]
  >>> sent[0]
  'email-notifier@example.net'
  >>> sent[1]
  ['user1@example.net']

  >>> text = sent[2].replace("\r\n", "\n")
  >>> print text
  From: email-notifier@example.net
  To: user1@example.net
  Subject: notification email
  <BLANKLINE>
  test-notification-message
  <BLANKLINE>
