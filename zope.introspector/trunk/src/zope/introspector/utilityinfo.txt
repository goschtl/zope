Determining utilites for objects
********************************

Get informed about all local and global utilities for an object.

:Test-Layer: functional

zope.introspector provides the ``UtilityInfo`` for determining
utilities, that are available for specific contexts. Contrary to
adapters, utilities tend to be context-less. We must, however, take
care, that local utilities are only registered for objects in the same
site. 

Let's start with a simple object::

  >>> class Mammoth(object):
  ...   pass

We define a utility::

  >>> from zope.interface import Interface, implements
  >>> from zope.component import provideUtility

  >>> import persistent
  >>> from zope.app.container.contained import Contained
  >>> class ITestUtility(Interface):
  ...   pass

  >>> #class TestUtility(object):
  >>> class TestUtility(persistent.Persistent, Contained):
  ...   implements(ITestUtility)


Now we register it globally and unnamed::

  >>> provideUtility(TestUtility(), provides=ITestUtility, name='')

Make sure, the utility was really registered::

  >>> from zope.component import getUtility
  >>> getUtility(ITestUtility, name='', context=None)
  <TestUtility object at 0x...>

We create an instance of the mammoth::

  >>> manfred = Mammoth()

Using ``UtilityInfo`` we can ask for all the utilities for our
particular mammoth::

  >>> from zope.introspector import UtilityInfo
  >>> info = UtilityInfo(manfred)
  >>> from pprint import pprint
  >>> pprint(sorted(info.getAllUtilities()))
  [{'component': <zope.app.publisher.browser.menu.BrowserMenu object at 0x...>,
  ...
   {'component': <TestUtility object at 0x...>,
    'name': '',
    'provided': <InterfaceClass __builtin__.ITestUtility>,
    'registry': <BaseGlobalComponents base>},
  ...


Local Utilitites
================

If an object is stored in a local site, then we should get also the
locally registered utilities, but only those, that are in one of the
sites, the object is part of.

We now create a site, where we can register local utilities and store
objects::

  >>> from zope.app.folder import folder
  >>> local_site1 = folder.rootFolder()
  >>> getRootFolder()['local_site'] = local_site1

  >>> from zope.app.component import site
  >>> sm = site.LocalSiteManager(local_site1)
  >>> local_site1.setSiteManager(sm)

We register a utility in this site, this time a named one::

  >>> local_utility1 = TestUtility()
  >>> sm.registerUtility(local_utility1, ITestUtility, 'local_u1')

The utility is available, if we ask the local site manager directly::

  >>> sm.queryUtility(ITestUtility, 'local_u1')
  <TestUtility object at 0x...>

We place another mammoth in that site. To make it also a placefull
object, we have also to provide a ``__parent__`` attribute::

  >>> fred = Mammoth()
  >>> local_site1['fred'] = fred
  >>> fred.__parent__ = local_site1

Using UtilityInfo we can now get also this newly registered utility::

  >>> info = UtilityInfo(fred)
  >>> pprint(info.getAllUtilities())
  [{'component': <TestUtility object at 0x...>,
       'name': 'local_u1',
       'provided': <InterfaceClass __builtin__.ITestUtility>,
       'registry': <LocalSiteManager ++etc++site>},
  ...
   {'component': <TestUtility object at 0x...>,
    'name': '',
    'provided': <InterfaceClass __builtin__.ITestUtility>,
    'registry': <BaseGlobalComponents base>},
  ...]

