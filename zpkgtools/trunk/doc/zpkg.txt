====================
Configuring **zpkg**
====================

Overview and the Command Line
-----------------------------

Configuration of **zpkg** is required since **zpkg** always refers to
a `resource map` to provide information about the resource its
packaging.  Regardless of the availability of an appropriate checkout,
**zpkg** always uses the resource map to locate the components it's
adding to the release.

The **zpkg** command provides some command line options to control
configuration, and a very simple configuration file to allow
configurations to be saved.

The following command line options are provided:

-C FILE, --configuraion=FILE
  Load the configuration file `FILE` instead of the default
  configuration file.  `FILE` must exist.

-f
  Don't load any configuration file, not even the default.

-m MAP, --resource-map=MAP
  Load the resource map `MAP` before loading any map files identified in
  the configuration file.  Maps identified using **-m** take
  precedence over any identified inthe configuration file.

-n NAME, --name=NAME
  Use `NAME` as the unversioned name of the resulting distribution.
  If not specified, the name portion of the resource being distributed
  is used for the package name.

-r TAG, --revision-tag=TAG
  Generate the distribution using the CVS tag `TAG` instead of the
  ``HEAD`` tag.

-s
  Include required support packages in the distribution.  This is the
  default.

-S
  Don't include the required support packages in the distribution.
  This can be used to generate smaller distributions when the
  ``setuptools`` and ``zpkgtools`` packages are known to be available
  on target systems.

If neither **-C** nor **-f** is specified on the command line, a
default configuration file is loaded if it exists.  This is
`~/.zpkg/zpkg.conf` on Unix and `~/zpkg/zpkg.conf` on Windows (note
that there's no dot in the directory name for Windows).  The directory
containing the default configuration file can be used to store
resource maps.


Configuration File Format
-------------------------

The configuration files used by **zpkg** use a subset of the
`ZConfig`_ configuration language.

Blank lines and comments (lines that start with ``#`` as the first
non-blank character) are ignored.

Two keys are currently defined for the configuration file:
``include-support-code`` and ``resource-map``.

The ``include-support-code`` key is used to control whether **zpkg**
bundles the support code along with the resulting distribution.  The
value is a boolean, where the strings ``true`` and ``false`` can be
used in the configuration file.  If true (the default), copies of the
``zpkgtools`` and ``setuptools`` packages will be included in the
distribution (less their test code).  If false, the packages will be
assumed to be available for import on target systems.

The value for ``resource-map`` is a path or URL (including
``cvs:`` URLs) for a file that defines the map.  Relative paths are
interpreted as relative to the directory containing the configuration
file.  The ``resource-map`` key may be given any number of times;
entries in the first named map take precedence over entries of the
same name in later maps.

For example, if the configuration file `/home/fdrake/zpkg.conf`
contains::

  resource-map  local.map
  resource-map  cvs://cvs.zope.org/cvs-repository:Packages2/packages.map

**zpkg** will first load the maps in the order:

1. ``/home/fdrake/local.map``
2. ``cvs://cvs.zope.org/cvs-repository:Packages2/packages.map``


Resource Maps
-------------

A `resource map` is a mapping of typed resource names to URLs.  The
URLs will most often be ``cvs:`` or ``repository:`` URLs, but do not
have to be (well, they do for now, but presumably not forever).

Resources are identified by strings of the form:

  [ `type` ":" ] `name`

The optional `type` defaults to ``package``.

The only types known to **zpkg** are ``package`` and ``collection``.
The `name` portion may be used to represent different resources of
different types.  For example, ``collection:ZConfig`` and
``package:ZConfig`` represent two different resources.

A file representing a resource map is a simple two-column table with
the fields separated by writespace.  Blank lines and comments (lines
that start with ``#`` as the first non-blank character) are ignored.

The first field is the name of a resource, and the second field is the
URL by which it can be accessed.

Resource maps which have CVS locations of their own can contain
``repository:`` URLs; the ``cvs:`` URL of the directory containing the
map itself is used as the base for resolving ``repository:`` URLs.


.. _ZConfig: http://www.zope.org/Members/fdrake/zconfig/

Support Packages
----------------

**zpkg** creates distributions which require some additional support
packages to operate properly.  These packages are located in much the
same way that other packages are located: the resource map is
consulted to determine their location.  One difference is that if the
resource map does not define the appropriate resources, alternate
information is used to locate them.  For each of the packages,
**zpkg** first attempts to import the package; if that succeeds, the
imported version is used (the import for ``zpkgtools`` should always
succeed!).  If the import fails, **zpkg** will attempt to use the CVS
location for each package.

If the ``setuptools`` package has not been explicitly configured or
installed, retrieving it from CVS can be quite slow.  The easiest way
to improve the load time is to have a copy available on the local
system and add a resource entry for it using a ``file:`` URL::

  setuptools  file:///home/fdrake/stuff/setuptools/setuptools

(The path should identify the directory that contains the
``setuptools`` package itself, not the directory that would be on
``sys.path`` to allow it to be importable.)
