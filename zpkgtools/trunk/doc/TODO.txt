===========================
Things that need to be done
===========================

- Need name + acronym to describe what gets built, not normal words
  (Jim sez).  Zope3-Dev seems to want to call them "packages".

- Package assembler script to build sumo/combined distro (mostly done)

  - We should have some way to wildcard an entire hierarchy of packages
    in resource maps.  Something like::

      zope.*  cvs://cvs.zope.org/cvs-repository:Zope3/src/zope/

    would make the resource map for Zope 3 much more concise.
    I've started writing tests and an implementation, and Jim checked
    in an alternate implementation (with different semantics), but the
    issue needs to be re-visited.

  - The setuptools helper should only be included in distributions that
    actually need it.  This is currenly only needed when packages end up
    defining package data (common in Zope, but not for everyone).  Low
    priority.

  - CVS retriever (mostly done; need to deal with unspecified type and
    user for remote repositories)

    - can check *~/.cvspass* to see if there's an entry there

    - otherwise assume :ext: if there's a CVS_RSH setting?  or just
      always?  try anonymous :pserver: access?

    - more configuration settings?

    It's not clear these remaining issues are particularly important.

  - When building a distribution that specifies explicit inclusions,
    the packaging metadata (`*.cfg`) files should be included
    automatically.

  - Source files for extension modules should not be installed into
    the containing Python package.

  - We should have a way to express dependence on particular versions
    of Python, and a way to say which is preferred.  (This can be used
    when building an "application" distribution since that has some
    support to select from different available Python interpreters.)

  - Use delayed loading of resource maps, especially those that need to
    be retrieved from remote systems.  The basic model of the resource
    map allows this strategy to be employed effectively.  Low priority.

  - Support use of http: and https: for access to Subversion
    repositories.  Very low priority since we're using svn: and svn+ssh:
    for svn.zope.org.

  - Support different types of generated archives; bzipped tarballs,
    gzipped tarballs and ZIP archives should both be easily generated.
    Perhaps a configuration option should specify which are produced
    by default.  Low priority.

  - When installing an application bundle, it should be an error if
    the installation directory already exists and the user hasn't
    explicitly said that's ok (-f/--force).

  - Some way to transform template files on build or installation
    beyond what distutils does for scripts would be nice; it's not
    clear how to feed enough interesting information into the process.
    The use cases aren't sufficiently clear at this time.  Won't
    happen unless the use cases become clearer.

  - Consider looking for the configuration file in the current
    directory before looking in ~/.zpkg/.

- Deal with a package tree like the zope package tree that includes
  both pure-Python and non-pure packages; these could easily land in
  separate directory hierarchies for installations using a different
  $prefix and $exec_prefix.  (The ``pkgutil`` module from the standard
  library does not provide an acceptable solution due to a bug: see
  http://www.python.org/sf/935117 for more info.)

  (We're currently dealing with them by saying "use **--home** when
  installing".  This may be sufficient.)

- Fix up finddeps.py to stop searching at defined boundaries.  How to
  define these boundaries is in flux at the moment.

- Find a way to use ZConfig itself instead of the half-way
  re-implementation in ``zpkgtools.cfgparser``; it's a real pain
  having to give up %defines and some of the nicer aspects of schemas
  (or having to re-implement them).

- Expand the prototype section to the pre-proposal documenting the
  current effort; this lets people respond and offer suggestions.

- Write a new setup.py for Zope 3 to use in a checkout that uses the
  package metadata; this can happen after the ZopeX3 release.

- Documentation, documentation, documentation!
