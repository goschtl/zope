<html metal:use-macro="context/@@standard_macros/view"
    i18n:domain="zf.zscp">
  <body>
  <div metal:fill-slot="body" tal:define="global pageversion string: 0.8">
	
	  
	<div id="documentFirstHeading">Regulations (1of 8) The Zope Software Certification 
		Program and the Common Repository</div>
	<div class="section">
		<h3 class="itemOne itemHeading"><a id="the-zope-software-certification-program"
				name="the-zope-software-certification-program">2. The Zope Software
			Certification Program</a></h3>
		<p>This section describes the process for Zope-related software to receive quality
			certification.</p>
		<div class="section">
			<h4><a id="zope-community-process" name="zope-community-process">2.1.
				Zope Community Process</a></h4>
			<p>Historically, the Zope community had no development process. This was in
				part because the development of Zope 2 was controlled by Digital Creations
				(now Zope Corporation) and testing-automation tools were not available at
				that time. Also, Zope 2 lacked the necessary documentation. All this lead to
				an accepted misuse of the API and often low quality software.</p>
			<p>With the advent of Zope 3, procedures were set in place to ensure the quality
				and documentation of the code. Guided by eXtreme Programming practices,
				sprints were organized to educate the Zope community about the project and
				have high-productivity development time, proposals were introduced to
				ensure the proper discussion of a feature before implementation, and tests
				were required to ensure the overall quality of the code base. This
				development process is called the Zope Community Process.</p>
			<p>While the Zope Community Process provides an excellent method for
				developing community-driven projects like Zope 3, it (a) does not show how
				to produce simple high-quality packages, (b) measure the quality, and (c)
				communicate the state of a package to outsiders. The goal of the Zope
				Software Certification Program (ZSCP) is (a) to clearly define the levels
				of software quality using a metric system and (b) to communicate this
				information to our users, customers, and prospective customers.</p>
		</div>
		<div class="section">
			<h4><a id="audience" name="audience">2.2. Audience</a></h4>
			<p>The audience for the Zope Software Certification Program (ZSCP) is
				two-fold. On the one hand, it is desired to provide the developer with an
				overview of quality packages, on the other hand, decision makers need to be
				shown how seriously the Zope community takes the assurance of software
				quality.</p>
			<p>One common complain the Zope developers received from the Zope community was
				about the non-existent organization of Zope's third party products.
				Everybody can upload their product to zope.org, without any evaluation of
				quality, version compatibility or documentation. The goal of the ZSCP and
				its Web site is to provide a measurement of quality (see section 2.4.)
				measured as much as possible by automated tools and by minimal developer
				verification. Also, packages listed in the ZSCP <em>must</em> provide a
				set of meta-data that links the user to various online resources. (See
				section 2.5.)</p>
			<p>The message to the decision maker varies slightly based on his/her
				familiarity with Open Source and Zope in particular. To the uninitiated
				decision maker the ZSCP should send a message of technical and economic
				professionalism. The ZSCP is a viable resource to understand the software
				quality requirements and the process that enforces this quality. For more
				technically versed people, it also provides a great overview of available
				features through add-on packages. For the uninitiated decision maker it is
				also very important to know that the Zope Foundation, a
				company-independent institution, fully supports this program and its
				process.</p>
			<p>The initiated decision maker already believes in Open Source and Zope, but
				might be skeptical about other third-party packages. For him/her, the ZSCP
				provides not only a searchable list of quality packages, but also
				guidelines of what to expect of his/her developers in terms of software
				quality. Again, the support of the Zope Foundation is reassuring to him that
				the program is legitimate.</p>
		</div>
		<div class="section">
			<h4><a id="certification-levels" name="certification-levels">2.3.
				Certification Levels</a></h4>
			<p>There are 4 distinct levels for certification. They are defined in the list
				below. The specific list of quality requirements for each level is provided
				in section 2.4.</p>
			<ul>
				<li>
					<p class="first">ZSCP Listed</p>
					<p>Getting a package listed in the ZSCP system is the first step to
						obtain certification. Packages listed on the ZSCP Web site must
						adhere to the common package layout[1] and are subject to the
						automated testing as well as the quality assurance process.
						Listed packages must provide a full set of meta-data (as
						applicable) as defined in section 2.5.</p>
					<p>Packages at this level will fulfill roughly the same purpose as
						packages in the CMF/Plone Collective. It is one way to make a
						package publicly available and give it some exposure. At this
						level, the developer will not have to comply with many of the
						quality metrics. See section 2.4.</p>
					<table class="docutils footnote" frame="void" id="id1"
						rules="none">
						<colgroup>
							<col class="label"/>
							<col/>
						</colgroup>
						<tbody valign="top">
							<tr>
								<td class="label"><a name="id1">[1]</a>
								</td>
								<td>
									<p class="first last">The common package layout
										is defined in section 3.2.</p>
								</td>
							</tr>
						</tbody>
					</table>
				</li>
				<li>
					<p class="first">ZSCP Level 1 Certified</p>
					<p>To be level 1 certified, the package must fulfill the requirements
						of listed packages. Additionally, it has to provide
						documentation, tests (in doctest format), conform to the package
						and coding style guidelines, and provide migration scripts, if
						applicable.</p>
					<p>At this level, packages are considered fit for the Zope 3 core. The
						core developers reserve the right to provide or require small
						improvements.</p>
					<p>At this stage one may identify the package as &quot;ZSCP Level 1
						Certified&quot; in informal or promotional material.</p>
				</li>
				<li>
					<p class="first">ZSCP Level 2 Certified</p>
					<p>To be level 2 certified, the package must fulfill the requirements
						of level 1 certified packages. Additionally, it has to be
						demonstrated that the package integrates well into the Zope
						software stack by providing documentation in alternative
						sources (Web sites/API doc), provide standard installation
						methods and demonstrate the correct functioning of the migration
						scripts.</p>
					<p>At this stage one may identify the package as &quot;ZSCP Level 2
						Certified&quot; in informal or promotional material.</p>
				</li>
				<li>
					<p class="first">ZSCP Level 3 Certified</p>
					<p>To be level 3 certified, the package must fulfill the requirements
						of level 2 certified packages. Additionally, it has to be
						demonstrated that the package has been successfully released
						during several Zope release cycles, has an active development
						community and an up-to-date support structure and
						resources.</p>
					<p>At this stage one may identify the package as &quot;ZSCP Level 3
						Certified&quot; in informal or promotional material.</p>
				</li>
			</ul>
		</div>
		<div class="section">
			<h4><a id="quality-metrics" name="quality-metrics">2.4. Quality
				Metrics</a></h4>
			<p>The certification is meaningless without the precise definition of tasks
				that have to be accomplished for each certification level. This section
				provides a list of concrete items that have to be fulfilled for each
				certification level.</p>
			<p>Legend:</p>
			<ul class="simple">
				<li>x: A metric is required for the certification level.</li>
				<li>A: The metric check can be conducted (a)utomatically.</li>
				<li>Q: The metric check can be conducted (q)uickly by human
					inspection.</li>
				<li>D: The metric check would be (d)ifficult to conduct by human
					inspection.</li>
			</ul>
			<table border="1" class="docutils">
				<colgroup>
					<col width="58%"/>
					<col width="10%"/>
					<col width="8%"/>
					<col width="8%"/>
					<col width="8%"/>
					<col width="8%"/>
				</colgroup>
				<thead valign="bottom">
					<tr>
						<th class="head">Metric</th>
						<th class="head">Check</th>
						<th class="head">List</th>
						<th class="head">Le 1</th>
						<th class="head">Le 2</th>
						<th class="head">Le 3</th>
					</tr>
				</thead>
				<tbody valign="top">
					<tr>
						<td>Package Meta-Information Verification</td>
						<td>A</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Test Coverage</td>
						<td>A</td>
						<td>0%</td>
						<td>&gt;90%</td>
						<td>&gt;95%</td>
						<td>&gt;95%</td>
					</tr>
					<tr>
						<td>Automated Test Verification</td>
						<td>A</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Documentation-based Testing</td>
						<td>A,Q</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Supported Platforms Test Verification</td>
						<td>A,Q</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Minimal Documentation</td>
						<td>A,Q</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Complete Documentation</td>
						<td>Q</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Extensive Documentation</td>
						<td>D</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Documentation available online</td>
						<td>Q</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>APIDOC-integrated Documentation</td>
						<td>Q</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Common package structure</td>
						<td>A,Q</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Zope Coding Style Guide compliance</td>
						<td>A,D</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Conform to user interface guidelines</td>
						<td>D</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Complete dependency list</td>
						<td>A</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Standard installation method</td>
						<td>A,Q</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Release(s) with version number</td>
						<td>A,Q</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Up-to-date homepage</td>
						<td>D</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Active support mailing list</td>
						<td>D</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Released for 3+ Zope release cycles</td>
						<td>D</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Releases state required Zope version</td>
						<td>A,Q</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Multiple (3) Active Maintainers</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Data migration claimed</td>
						<td>Q</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Data migration auto-tested</td>
						<td>A</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Data migration verified</td>
						<td>D</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>x</td>
					</tr>
					<tr>
						<td>Data migration well-tested</td>
						<td>D</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>&nbsp;
						</td>
						<td>[1]</td>
					</tr>
				</tbody>
			</table>
			<table class="docutils footnote" frame="void" id="id2" rules="none">
				<colgroup>
					<col class="label"/>
					<col/>
				</colgroup>
				<tbody valign="top">
					<tr>
						<td class="label"><a name="id2">[1]</a>
						</td>
						<td>
							<div class="first system-message">
								<p class="system-message-title">System Message:
									WARNING/2 (<tt class="docutils">
									&lt;string&gt;</tt>, line 335); <em><a
										href="#id2">backlink</a></em></p>
								Duplicate explicit target name: &quot;1&quot;.</div>
							<p class="last">To verify this metric would require an
								amount of resources that the Zope Foundation and
								community cannot provide. This metric might be removed,
								if the resources cannot be found over a long period of
								time.</p>
						</td>
					</tr>
				</tbody>
			</table>
			<div class="section">
				<h5><a id="package-meta-information"
						name="package-meta-information">2.4.1. Package
					Meta-Information</a></h5>
				<p>The package must at least provide the required fields of the
					package-meta-information as specified in section 2.5. The package
					may also provide any of the optional fields and even fields that do not
					belong to the specification at all. Repositories <em>may</em> ignore
					unspecified fields.</p>
				<p>Since this <em>must</em> be an automated task, the data <em>must</em>
					conform to the repositories package meta-information format.</p>
			</div>
			<div class="section">
				<h5><a id="test-coverage" name="test-coverage">2.4.2. Test
					Coverage</a></h5>
				<p>Test coverage tools track the lines of the code that have been accessed
					during a test run. The percentage of test coverage specified for each
					certification level, represents the amount of tracked lines with
					respect to the total amount of lines written.</p>
			</div>
			<div class="section">
				<h5><a id="automated-test-verification"
						name="automated-test-verification">2.4.3. Automated Test
					Verification</a></h5>
				<p>Tests <em>must</em> be runnable via a standard test runner. The
					repository of the package <em>must</em> provide a method to run the
					tests after some change and report it to the author.</p>
			</div>
			<div class="section">
				<h5><a id="documentation-based-testing"
						name="documentation-based-testing">2.4.4.
					Documentation-based Testing</a></h5>
				<p>All tests <em>must</em> be written in form of documentation. The tool to
					implement the tests is not specified, but the tests must be part of the
					automated test verification (see section 2.4.4). In some cases it is
					not possible or practical to write documentation-based tests; in
					those cases developers <em>may</em> choose any testing framework as
					long as integrates in the automated test verification. The developer
					<em>must</em> provide a reason for not using documentation-based
					tests. Acceptable reasons include legacy code/tests and tests that do
					not verify code.</p>
			</div>
			<div class="section">
				<h5><a id="platform-test-verification"
						name="platform-test-verification">2.4.5. Platform Test
					Verification</a></h5>
				<p>All tests for a package <em>must</em> pass for all platforms the package
					supports. The list of supported platform is part of the package
					meta-information (see section 2.5.9). If <cite>All</cite> (meaning
					all platforms) has been specified, the tests must be verified on
					Windows, MacOS X, and Unix/Linux.</p>
			</div>
			<div class="section">
				<h5><a id="minimal-documentation" name="minimal-documentation">
					2.4.6. Minimal Documentation</a></h5>
				<p>The package <em>must</em> provide a basic overview of the package's API
					in a <tt class="docutils literal">
					<span class="pre">README.txt</span></tt>. It is <em>not</em>
					required to cover all edge cases. The documentation <em>must</em> be a
					set of documentation tests.</p>
			</div>
			<div class="section">
				<h5><a id="complete-documentation" name="complete-documentation">
					2.4.7. Complete Documentation</a></h5>
				<p>The documentation <em>must</em> cover all of the API, including edge
					cases. The documentation <em>may</em> be distributed over several
					documents. The documentation <em>must</em> be a set of documentation
					tests.</p>
			</div>
			<div class="section">
				<h5><a id="extensive-documentation"
						name="extensive-documentation">2.4.8. Extensive
					Documentation</a></h5>
				<p>Documentation at this level might come from many different sources,
					such as Web sites, mailing list archives, documentation tests, and
					code. All functional documentation <em>must</em> be a set of
					documentation tests.</p>
			</div>
			<div class="section">
				<h5><a id="documentation-available-online"
						name="documentation-available-online">2.4.9.
					Documentation available online</a></h5>
				<p>The documentation for the package <em>must</em> be provided through a
					Web site, which can be in the form of a home page or automatically
					generated project page. For small packages it is sufficient to make the
					documentation available via a Web site of the repository.</p>
			</div>
			<div class="section">
				<h5><a id="apidoc-integrated-documentation"
						name="apidoc-integrated-documentation">2.4.10.
					APIDOC-integrated Documentation</a></h5>
				<p>All the documentation that is distributed with the package
					<em>must</em> be available in the APIDOC documentation modules. This
					includes the following items: * Package is registered with the source
					browser. * Documentation tests are compiled as part of the APIDOC
					&quot;book&quot; module.</p>
			</div>
			<div class="section">
				<h5><a id="common-package-structure"
						name="common-package-structure">2.4.11. Common package
					structure</a></h5>
				<p>The package <em>muat</em> follow the package structure layout
					required by the repository. Inside the package code itself, Zope's
					coding styles of a package layout <em>must</em> be followed.</p>
			</div>
			<div class="section">
				<h5><a id="zope-coding-style-guide-compliance"
						name="zope-coding-style-guide-compliance">2.4.12. Zope
					Coding Style Guide compliance</a></h5>
				<p>The Zope coding style guide <em>must</em> be followed. It can be found
					at:</p>
				<p><a class="reference"
						href="http://dev.zope.org/Zope3/CodingStyle">
					http://dev.zope.org/Zope3/CodingStyle</a></p>
				<p>Additional conventions <em>may</em> be applicable, but are
					communicated to the package author(s).</p>
			</div>
			<div class="section">
				<h5><a id="conform-to-user-interface-guidelines"
						name="conform-to-user-interface-guidelines">2.4.13.
					Conform to user interface guidelines</a></h5>
				<p>If the package provides user interface components that are developed as
					part of a larger framework, the user interface code <em>must</em>
					conform to any user interface guidelines provided by this
					framework.</p>
			</div>
			<div class="section">
				<h5><a id="complete-dependency-list"
						name="complete-dependency-list">2.4.14. Complete
					dependency list</a></h5>
				<p>The package <em>must</em> provide a list of all other Python-package
					dependencies. Often packaging software requires a list of
					dependencies; this list is be sufficient, if it fulfills the
					repository layout and Zope coding style guidelines.</p>
			</div>
			<div class="section">
				<h5><a id="standard-installation-method"
						name="standard-installation-method">2.4.15. Standard
					installation method</a></h5>
				<p>The package <em>must</em> be installable via the standard
					installation method accepted by Zope. It is part of the package release
					cycle to conform to the latest installation method.</p>
			</div>
			<div class="section">
				<h5><a id="release-s-with-version-number"
						name="release-s-with-version-number">2.4.16. Release(s)
					with version number</a></h5>
				<p>The package <em>must</em> be released regaularly and have version
					numbers associated with each release.</p>
			</div>
			<div class="section">
				<h5><a id="up-to-date-homepage" name="up-to-date-homepage">2.4.17.
					Up-to-date homepage</a></h5>
				<p>The package <em>must</em> have an up-to-date homepage targetted at
					developers. Other audiences <em>may</em> also be addressed. If a
					package is very small, an auto-generated or even the repository Web
					site <em>may</em> be sufficient.</p>
			</div>
			<div class="section">
				<h5><a id="active-support-mailing-list"
						name="active-support-mailing-list">2.4.18. Active support
					mailing list</a></h5>
				<p>The package <em>must</em> provide a mailing list for developers using
					the package. Activeness will be measured by response time and quality
					to questions. For small packages it*may* be sufficient to use one of the
					general Zope mailing lists.</p>
			</div>
			<div class="section">
				<h5><a id="released-for-3-zope-release-cycles"
						name="released-for-3-zope-release-cycles">2.4.19.
					Released for 3+ Zope release cycles</a></h5>
				<p>The package <em>must</em> be released for at least 3 Zope release
					cycles. While strongly encouraged, it is <em>not</em> required that
					the package must have the same release cycle as Zope.</p>
			</div>
			<div class="section">
				<h5><a id="releases-state-required-zope-version"
						name="releases-state-required-zope-version">2.4.20.
					Releases state required Zope version</a></h5>
				<p>The release of the package <em>must</em> specify the required Zope
					version. See section 2.7 for details on release meta-data, including
					dependency specifications.</p>
			</div>
			<div class="section">
				<h5><a id="multiple-3-active-maintainers"
						name="multiple-3-active-maintainers">2.4.21. Multiple (3)
					Active Maintainers</a></h5>
				<p>The package <em>must</em> have at least three active maintainers. At
					least one active maintainer <em>must</em> always be reachable by
					certification managers.</p>
			</div>
			<div class="section">
				<h5><a id="data-migration-claimed" name="data-migration-claimed">
					2.4.22. Data migration claimed</a></h5>
				<p>If the package manages any data, it <em>must</em> provide an automated
					data migration mechanism. If no automated software can be produced,
					the package author(s) <em>must</em> provide clear instructions
					about migrating the data. In exeptional cases an argument why data
					migration cannot be provided <em>may</em> be accepted. Migration
					scripts <em>must not</em> be provided, if no data migration is
					necessary.</p>
			</div>
			<div class="section">
				<h5><a id="data-migration-auto-tested"
						name="data-migration-auto-tested">2.4.23. Data migration
					auto-tested</a></h5>
				<p>Additionally to the requirements in section 2.4.22, the data migration
					scripts <em>must</em> be tested using the standard test runner. If the
					migration script tests take an uncommonly long time to run, they
					<em>may</em> be moved to test level 2.</p>
			</div>
			<div class="section">
				<h5><a id="data-migration-verified"
						name="data-migration-verified">2.4.24. Data migration
					verified</a></h5>
				<p>The requirements of section 2.4.23 <em>must</em> be fulfilled. In
					addition, with the help of the package author(s), the migration
					manager verified that the data migration is complete and
					functional.</p>
			</div>
			<div class="section">
				<h5><a id="data-migration-well-tested"
						name="data-migration-well-tested">2.4.25. Data migration
					well-tested</a></h5>
				<p>In addition to the fulfillment of the requirements listed in 2.4.24, the
					data migration scripts <em>must</em> be tested against
					production-grade data of at least 2 projects using the package.</p>
			</div>
		</div>
		<div class="section">
			<h4><a id="id3" name="id3">2.5. Package Meta-Information</a></h4>
			<p>In order to quickly provide a developer with contextual information about a
				given package, it is necessary to clearly define the meta-data that
				<em>must</em> be available about a package. This section defines and
				explains each item.</p>
			<p>This data is compatible with the Python Package Index (PyPI).</p>
			<p>The format of the meta-data fields is as follows:</p>
			<blockquote>
				<div class="system-message">
					<p class="system-message-title">System Message: SEVERE/4 (<tt
							class="docutils">&lt;string&gt;</tt>, line 547)</p>
					<p>Unexpected section title.</p>
					<pre class="literal-block">
Sec#. Name
++++++++++
</pre>
				</div>
				<p>(Data Type, Multiplicity, Necessity)</p>
				<p>Field Description</p>
				<p>Example: example value</p>
			</blockquote>
			<p>The following data description is known as the <em>Package Meta-Data
				Version 1.0</em>.</p>
			<div class="section">
				<h5><a id="package-name" name="package-name">2.5.1.
					Package-name</a></h5>
				<p>(Bytes Line, single, required)</p>
				<p>The dotted Python path of the package.</p>
				<p>Example: <tt class="docutils literal">
					<span class="pre">zope.sample</span></tt></p>
			</div>
			<div class="section">
				<h5><a id="name" name="name">2.5.2. Name</a></h5>
				<p>(Text Line, single, required)</p>
				<p>The commonly used name of the package.</p>
				<p>Example: Sample</p>
			</div>
			<div class="section">
				<h5><a id="summary" name="summary">2.5.3. Summary</a></h5>
				<p>(Text Line, single, required)</p>
				<p>A short description or summary of the package. It is also often
					interpreted as the title.</p>
				<p>Example: The Zope Sample Package</p>
			</div>
			<div class="section">
				<h5><a id="description" name="description">2.5.4. Description</a>
					</h5>
				<p>(Text, single, optional)</p>
				<p>A detailed description of the package's functionality. While it should
					contain some detail, it should not duplicate the documentation of the
					README.txt file.</p>
				<dl class="docutils">
					<dt>Example: The sample package for Zope does provide some sample
						features that</dt>
					<dd>can be useful for developers to learn about sample data
						development. It does so by providing ...</dd>
				</dl>
			</div>
			<div class="section">
				<h5><a id="home-page" name="home-page">2.5.5. Home-page</a></h5>
				<p>(URL, single, optional)</p>
				<p>A URL to the homepage of the package.</p>
				<p>Example: <a class="reference"
						href="http://www.zope.org/Products/sample">
					http://www.zope.org/Products/sample</a></p>
			</div>
			<div class="section">
				<h5><a id="author" name="author">2.5.6. Author</a></h5>
				<p>(Text Line, multiple, required)</p>
				<p>The name of the author of the package. The value should <em>not</em>
					contain the author's E-mail address. This field can be specified
					multiple times.</p>
				<p>Example: John Doe</p>
			</div>
			<div class="section">
				<h5><a id="author-email" name="author-email">2.5.7.
					Author-email</a></h5>
				<p>(E-mail Address, multiple, required)</p>
				<p>The E-mail of the author of the package. This field can be specified
					multiple times. Any entry X of the author field is matched with entry X of
					the author email field. If this field is specified the length of the
					author field list must match the length of the author email field
					list.</p>
				<p>Example: <a class="reference" href="mailto:john&#64;doe.com">
					john&#64;doe.com</a></p>
			</div>
			<div class="section">
				<h5><a id="license" name="license">2.5.8. License</a></h5>
				<p>(Text Line, multiple, required)</p>
				<p>The software license of the package. This field can specified multiple
					times, to support dual-licensing.</p>
				<p>Example: ZPL 2.1</p>
			</div>
			<div class="section">
				<h5><a id="platform" name="platform">2.5.9. Platform</a></h5>
				<p>(Text Line, multiple, required)</p>
				<p>The operating system/platform the package is known to run on. This field
					can be specified multiple times. <tt class="docutils literal">
					<span class="pre">All</span></tt> may be used, if the package is
					available on all platforms Python is running on, i.e. the package is
					pure Python code.</p>
				<p>Example: Unix</p>
			</div>
			<div class="section">
				<h5><a id="classifier" name="classifier">2.5.10. Classifier</a>
					</h5>
				<p>(Classifier Text Line, multiple, optional)</p>
				<p>A classification entry identifying the package. This field can be
					specified multiple times.</p>
				<dl class="docutils">
					<dt>Example: Programming Language :: Python</dt>
					<dd>Topic :: Internet :: WWW/HTTP Topic :: Internet :: WWW/HTTP ::
						Dynamic Content Topic :: Software Development :: Libraries ::
						Python Modules</dd>
				</dl>
			</div>
			<div class="section">
				<h5><a id="developers-mailinglist" name="developers-mailinglist">
					2.5.11. Developers-mailinglist</a></h5>
				<p>(E-mail Address, single, optional)</p>
				<p>The E-mail address of the developer mailing list.</p>
				<p>Example: <a class="reference"
						href="mailto:sample-dev&#64;doe.com">
					sample-dev&#64;doe.com</a></p>
			</div>
			<div class="section">
				<h5><a id="users-mailinglist" name="users-mailinglist">2.5.12.
					Users-mailinglist</a></h5>
				<p>(E-mail Address, single, optional)</p>
				<p>The E-mail address of the users mailing list.</p>
				<p>Example: <a class="reference"
						href="mailto:sample-users&#64;doe.com">
					sample-users&#64;doe.com</a></p>
			</div>
			<div class="section">
				<h5><a id="issue-tracker" name="issue-tracker">2.5.13.
					Issue-tracker</a></h5>
				<p>(URL, single, optional)</p>
				<p>A URL to the issue tracker of the package, where new
					issues/bugs/requests can be reported.</p>
				<p>Example: <a class="reference"
						href="http://www.zope.org/trackers/sample/">
					http://www.zope.org/trackers/sample/</a></p>
			</div>
			<div class="section">
				<h5><a id="repository-location" name="repository-location">2.5.14.
					Repository-location</a></h5>
				<p>(URL, single, optional)</p>
				<p>The URL to the repository. The URL should be usable to actually check out
					the package.</p>
				<p>Example: svn://svn.zope.org/repos/main/sample</p>
			</div>
			<div class="section">
				<h5><a id="repository-web-location"
						name="repository-web-location">2.5.15.
					Repository-web-location</a></h5>
				<p>(URL, single, optional)</p>
				<p>The URL to the repository's browsable HTML UI.</p>
				<p>Example: <a class="reference" href="http://svn.zope.org/sample">
					http://svn.zope.org/sample</a></p>
			</div>
			<div class="section">
				<h5><a id="certification-level" name="certification-level">2.5.16.
					Certification-level</a></h5>
				<p>(Choice, single, optional)</p>
				<p>Describes the certification level of the package. The value can be one of
					the following five: None, listed, level1, level2, level3</p>
				<p>Example: level1</p>
			</div>
			<div class="section">
				<h5><a id="certification-date" name="certification-date">2.5.17.
					Certification-date</a></h5>
				<p>(Date, single, optional)</p>
				<p>The date at which the certification was received. The date should be in
					the format <tt class="docutils literal">
					<span class="pre">yyyy-mm-dd</span></tt>.</p>
				<p>Example: 2006-02-28</p>
			</div>
			<div class="section">
				<h5><a id="metadata-version" name="metadata-version">2.5.18.
					Metadata-Version</a></h5>
				<p>(Text Line, single, required)</p>
				<p>This is the version number of this package meta-data.</p>
				<p>Example: 1.1</p>
			</div>
		</div>
		<div class="section">
			<h4><a id="package-certification-data"
					name="package-certification-data">2.6. Package Certification
				Data</a></h4>
			<p>In addition to the package's meta-information, certified packages must
				also track their certification history. This section describes to
				information that needs to be stored.</p>
			<p>The following data description is known as the <em>Package Certification
				Data Version 1.0</em>.</p>
			<p>Certifications can be granted and revoked. Those activities are known as
				<em>Certification Actions</em>. You can also receive a warning. For each
				certification action the following pieces of information must be
				recorded. The same sub-section layout as in section 2.5. applies.</p>
			<div class="section">
				<h5><a id="action" name="action">2.6.1. Action</a></h5>
				<p>(Choice, single, required)</p>
				<p>The action describes whether a certification was granted or revoked.
					Upon violations (as defined in section 2.8), a certification manager
					can also issue a warning.</p>
				<p>Allowed Values: grant, revoke, warn Example: granted</p>
			</div>
			<div class="section">
				<h5><a id="source-level" name="source-level">2.6.2.
					Source-level</a></h5>
				<p>(Choice, single, required)</p>
				<p>This field describes the original certification level before this
					certification action was executed.</p>
				<p>Allowed Values: none, listed, level1, level2, level3 Example:
					listed</p>
			</div>
			<div class="section">
				<h5><a id="target-level" name="target-level">2.6.3.
					Target-level</a></h5>
				<p>(Choice, single, required)</p>
				<p>This field describes the final certification level after this
					certification action was executed.</p>
				<p>Allowed Values: none, listed, level1, level2, level3 Example:
					level1</p>
			</div>
			<div class="section">
				<h5><a id="date" name="date">2.6.4. Date</a></h5>
				<p>(Date, single, required)</p>
				<p>The date on which the certification action was executed. The field
					should be of the format <tt class="docutils literal">
					<span class="pre">yyyy-mm-dd</span></tt>.</p>
				<p>Example: 2006-02-11</p>
			</div>
			<div class="section">
				<h5><a id="certification-manager" name="certification-manager">
					2.6.5. Certification-manager</a></h5>
				<p>(Text Line, single, required)</p>
				<p>This field lists the person that executed the certification action. It
					is the full name and E-mail address of the person.</p>
				<p>Example: John Doe &lt;<a class="reference"
						href="mailto:john&#64;doe.com">john&#64;doe.com</a>
					&gt;</p>
			</div>
			<div class="section">
				<h5><a id="comments" name="comments">2.6.6. Comments</a></h5>
				<p>(Text, single, optional)</p>
				<p>This field can contain arbitrary comments about the certification
					action.</p>
				<dl class="docutils">
					<dt>Example: The authors of the Sample package have cooperated well by
						swiftly</dt>
					<dd>providing all necessary information required for the
						certification to be granted.</dd>
				</dl>
			</div>
		</div>
		<div class="section">
			<h4><a id="package-release-data" name="package-release-data">2.7.
				Package Release Data</a></h4>
			<p>Finally, all the releases of certified packages <em>must</em> be tracked.
				This section describes the data that must be recorded for each release. The
				same sub-section layout as in section 2.5. applies.</p>
			<p>The following data description is known as the <em>Package Release Data
				Version 1.0</em>.</p>
			<div class="section">
				<h5><a id="id4" name="id4">2.7.1. Name</a></h5>
				<p>(Text Line, single, required)</p>
				<p>The name under which the package will be known for this release. This
					field <em>may</em> be equivalent to the name field described in
					section 2.5.1.</p>
				<p>Example: Sample Package</p>
			</div>
			<div class="section">
				<h5><a id="version" name="version">2.7.2. Version</a></h5>
				<p>(Text Line, single, required)</p>
				<p>This field describes the version number of the release.</p>
				<p>Example: 0.9.0b2</p>
			</div>
			<div class="section">
				<h5><a id="codename" name="codename">2.7.3. Codename</a></h5>
				<p>(Text Line, single, optional)</p>
				<p>The code name of the release.</p>
				<p>Example: CoolName</p>
			</div>
			<div class="section">
				<h5><a id="id5" name="id5">2.7.4. Date</a></h5>
				<p>(Date, single, required)</p>
				<p>The date on which the release was made. The date should be in the form <tt
						class="docutils literal">
					<span class="pre">yyyy-mm-dd</span></tt>.</p>
				<p>Example: 2006-02-01</p>
			</div>
			<div class="section">
				<h5><a id="certification" name="certification">2.7.5.
					Certification</a></h5>
				<p>(Choice, single, required)</p>
				<p>The certification level of the package at the date of the release.</p>
				<p>Allowed Values: none, listed, level1, level2, level3 Example:
					level1</p>
			</div>
			<div class="section">
				<h5><a id="package" name="package">2.7.6. Package</a></h5>
				<p>(URL, single, required)</p>
				<p>The URL to the installation package file.</p>
				<p>Example: <a class="reference"
						href="http://www.zope.org/Products/SamplePackage/SamplePackage-0.9.0.tgz">
					http://www.zope.org/Products/SamplePackage/SamplePackage-0.9.0.tgz</a>
					</p>
				<p>2.7.7. Source +++++++++++++x</p>
				<p>(URL, single, optional)</p>
				<p>The URL to the repository location. It should be possible to use this URL
					to make a checkout.</p>
				<p>Example: svn://svn.zope.org/zf.sample/tags/0.9.0b2</p>
			</div>
			<div class="section">
				<h5><a id="dependency" name="dependency">2.7.8. Dependency</a></h5>
				<p>(Text Line, multiple, required)</p>
				<p>A dependency to another package. The dependency must contain the full
					name of the package and the version number. One entry of this field
					<em>must</em> be specified for each dependency.</p>
				<p>Example: Zope 3.3</p>
			</div>
			<div class="section">
				<h5><a id="announcement" name="announcement">2.7.9.
					Announcement</a></h5>
				<p>(URL, single, optional)</p>
				<p>A link to the announcement of the release.</p>
				<p>Example: <a class="reference"
						href="http://www.zope.org/Products/SamplePackage090Released">
					http://www.zope.org/Products/SamplePackage090Released</a>
					</p>
			</div>
			<div class="section">
				<h5><a id="release-manager" name="release-manager">2.7.10.
					Release-manager</a></h5>
				<p>(Text Line, single, required)</p>
				<p>The full name and E-mail address of the release manager. Both sub-fields
					should be separately be available.</p>
				<p>Example: John Doe &lt;<a class="reference"
						href="mailto:john&#64;doe.com">john&#64;doe.com</a>
					&gt;</p>
			</div>
			<div class="section">
				<h5><a id="press-contact" name="press-contact">2.7.11.
					Press-contact</a></h5>
				<p>(Text Line, single, required)</p>
				<p>The full name and E-mail address of the press contact. Both sub-fields
					should be separately be available.</p>
				<p>Example: John Doe &lt;<a class="reference"
						href="mailto:john&#64;doe.com">john&#64;doe.com</a>
					&gt;</p>
			</div>
		</div>
		<div class="section">
			<h4><a id="the-process" name="the-process">2.8. The Process</a></h4>
			<p>The main purpose of this section is to define the workflow that a package
				undergoes to change its certification level within the ZSCP. A secondary
				goal is to provide a roadmap for packages to move upstream into the Zope or
				even Python core, if applicable. With this in mind, it should be easy for the
				Zope users to find and discover packages, including their meta,
				certification and release data. Also, receiving a certification level
				should be perceived as reward for the hard work being done; an
				accomplishment the package authors should be proud of and be able to market
				it accordingly.</p>
			<p>The certification process is conducted by the Zope Foundation with the tight
				collaboration of the &quot;core developers&quot;. For lack of any other
				definition, core developers are defined as developers regularly
				contributing to the Zope core components. They are often informally
				identified by the community. The developers conducting the
				certifications are known as the <em>certification managers</em>.</p>
			<p>As defined in section 2.3., the ZSCP defines four distinct package
				certification levels. Achieving the first status of being a listed package
				is an automated process. Once the authors fulfill the package layout
				guidelines, have provided all required package meta-data and are hooked
				into the automated test runner, then listed package status will be granted
				to them from the system.</p>
			<p>For the other three certification levels, a certification manager
				<em>must</em> grant the certification level. The authors of a package have
				to demonstrate that they have fulfilled the requirements for the desired
				level. The fulfillment of the requirements is checked automatically via
				some tools, like the automated test runner and coverage checker, and by
				inspection of the certification manager.</p>
			<p>Both, the requirements and process, are developed in a way that it should be
				also simple and fast to receive certification level 1 and level 2. The
				turn-around time of a request for being granted a certification level 1 or
				level 2 should be about 1 day.</p>
			<p>The certification of level 3 will usually take some more time, since it
				requires the certification manager to inspect the code in much more detail.
				However, the certification time should not exceed a couple of weeks.</p>
			<p>Overall, it is very important for the process to have as little overhead as
				possible and make the certification process a quick, easy and fun
				experience.</p>
			<p>When packages are not maintained anymore, they may lose their
				certification. If a package is not updated for a given Zope release cycle
				once, it receives a warning. If the package is not updated for a second
				release cycle in a row, it will lose its certification and will be demoted to
				the next appropriate level. This will commonly mean that it becomes a
				&quot;listed&quot; package again. The exception is, of course, when a
				package has no changes since the last version. In those cases it is simply
				enough to verify that the package still works and to make an entry in the <tt
					class="docutils literal">
				<span class="pre">CHANGES.txt</span></tt> file to that effect.</p>
			<p>When any of the requirements listed in this document change, then the
				packages have one release cycle to upgrade to the new requirements. After
				one release cycle, the package receives a warning. If the requirements are
				not upgraded for another release cycle, the package will loose its
				certification and will be demoted to the next appropriate level.</p>
			<p>While certified packages have to fulfill the requirements of the quality
				metrics, in return there will also be some technical benefits. Packages
				that are part of the ZSCP will be automatically tested, have coverage
				reports created, and be listed on the ZSCP Web site.</p>
			<p>There is <em>no</em> fee associated with the certification. One of the goals
				of the program is to encourage developers to write better code and provide
				them with ways to measure it. The certification is a way of saying
				&quot;thank you&quot;. And for the community it is overall better to have as
				many certified packages as possible.</p>
		</div>
	</div>
	  	  	    	  