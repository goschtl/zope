======================
Data Realtion Property
======================

The data relation property allows us to attach data to the relation.

  >>> from zope import schema, interface
  >>> from zope.schema.interfaces import IObject
  >>> class IImage(interface.Interface):
  ...     name = schema.TextLine(title=u'Name')

  >>> class Image(object):
  ...     interface.implements(IImage)
  ...     def __init__(self, name):
  ...         self.name = name
  ...     def __repr__(self):
  ...         return '<image %r>' % self.name

  >>> class IChapter(interface.Interface):
  ...     document = schema.Object(IObject, title=u'Document')
  ...     content = schema.Text(title=u'Content')

  >>> class IDocument(interface.Interface):
  ...     teaser = schema.Object(IImage, title=u'Teaser Image')
  ...     chapters = schema.List(title=u"Chapters",
  ...                            value_type=schema.Object(IChapter),
  ...                            required=False,
  ...                            default=[])

  >>> class IDocumentChapterRelation(interface.Interface):
  ...     document = schema.Object(IDocument, title=u'Document')

We need the IntId utility for our relations.

  >>> from zope import component
  >>> from zope.app.intid.interfaces import IIntIds
  >>> intids = component.getUtility(IIntIds)

  >>> from lovely.relation.app import O2OStringTypeRelationships
  >>> from lovely.relation.interfaces import IO2OStringTypeRelationships
  >>> rels = O2OStringTypeRelationships()
  >>> component.provideUtility(rels, IO2OStringTypeRelationships)

We setup a relation manager for the document to teaser relation.

  >>> from lovely.relation.property import FieldRelationManager
  >>> documentTeaser = FieldRelationManager(IDocument['teaser'])
  >>> documentChapter = FieldRelationManager(
  ...                                 IDocument['chapters'],
  ...                                 IDocumentChapterRelation['document'])

And our document class uses a DataRelationProperty to refer to it's teaser.

  >>> from lovely.relation.dataproperty import DataRelationPropertyOut
  >>> class Document(object):
  ...     interface.implements(IDocument)
  ...     teaser = DataRelationPropertyOut(documentTeaser)
  ...     smallImg = DataRelationPropertyOut(
  ...                                 documentTeaser, 'Document.smallImg')
  ...     chapters = DataRelationPropertyOut(documentChapter)
  ...     def __init__(self, name):
  ...         self.name = name
  ...     def __repr__(self):
  ...         return '<document %r>' % self.name

  >>> from lovely.relation.property import RelationPropertyIn
  >>> class Chapter(object):
  ...     interface.implements(IChapter)
  ...     document = RelationPropertyIn(documentChapter)
  ...     def __init__(self, content):
  ...         self.content = content
  ...     def __repr__(self):
  ...         return '<chapter %r>' % self.content

Now we create a document and an image.

  >>> doc1 = Document(u'Doc One')
  >>> img1 = Image(u'Image One')

To assign the image to the teaser property we need to instanciate a new
relation. We do this by calling new on the class property.

  >>> rel1 = Document.teaser.new(img1)
  >>> rel1
  <DataRelationship None>

At this time the relation is not bound to the source.

  >>> rel1.source is None
  True
  >>> rel1.target
  <image u'Image One'>

We can bind it :

  >>> doc1.teaser is None
  True
  >>> doc1.teaser = rel1
  >>> doc1.teaser is rel1
  True
  >>> rel1.source
  <document u'Doc One'>

It is now possible to annotate the teaser reference.

  >>> from zope.annotation.interfaces import IAnnotatable
  >>> IAnnotatable.providedBy(rel1)
  True

To be able to do that we need something which can be annotated.

  >>> class IImagePositionParameters(interface.Interface):
  ...      x = schema.Int(title=u'x')
  ...      y = schema.Int(title=u'y')

  >>> from zope import component
  >>> class ImagePositionParameters(object):
  ...     interface.implements(IImagePositionParameters)
  ...     component.adapts(IAnnotatable)
  >>> from zope.annotation.factory import factory
  >>> posFactory = factory(ImagePositionParameters)
  >>> component.provideAdapter(posFactory)

  >>> params = IImagePositionParameters(rel1)
  >>> params
  <ImagePositionParameters ...>

Let's use a second property from the same relation manager but with another
relation type.

  >>> img2 = Image(u'Image Two')
  >>> smallImgRel = Document.smallImg.new(img2)
  >>> smallImgRel
  <DataRelationship None>
  >>> doc1.smallImgRel = smallImgRel
  >>> doc1.smallImgRel is smallImgRel
  True
  >>> doc1.teaser is rel1
  True

  >>> doc1.teaser = None
  >>> doc1.teaser is None
  True


Use of lists
------------

  >>> doc1.chapters
  []
  >>> chapter1 = Chapter(u'Chapter One')
  >>> chapterRel1 = Document.chapters.new(chapter1)
  >>> chapterRel1
  <DataRelationship None>
  >>> doc1.chapters = (chapterRel1, )
  >>> [c.target for c in doc1.chapters]
  [<chapter u'Chapter One'>]
  >>> chapter1.document
  <document u'Doc One'>

  >>> chapter2 = Chapter(u'Chapter Two')
  >>> chapterRel2 = Document.chapters.new(chapter2)
  >>> doc1.chapters = doc1.chapters + [chapterRel2]
  >>> [c.target for c in doc1.chapters]
  [<chapter u'Chapter One'>, <chapter u'Chapter Two'>]
  >>> chapter2.document
  <document u'Doc One'>

  >>> doc1.chapters = None
  >>> doc1.chapters
  []

