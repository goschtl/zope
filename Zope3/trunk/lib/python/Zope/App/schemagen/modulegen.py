from typereg import fieldRegistry

def generateModuleSource(schema_name, fields, class_name,
                         schema_history=None):
    if schema_history is None:
        schema_version = 0
    else:
        # XXX get it from schema history
        pass

    import_list = []
    field_text_list = []
    property_text_list = []
    for field_name, field in fields:
        r = fieldRegistry.represent(field)
        field_text_list.append('    %s = %s' % (field_name, r.text))
        property_text_list.append(
            "    %s = "
            "FieldProperty(%s['%s'])" % (
            field_name, schema_name, field_name))
        for import_entry in r.importList:
            import_list.append("from %s import %s" % import_entry)
    
    import_text = '\n'.join(import_list)
    field_text = '\n'.join(field_text_list)
    property_text = '\n'.join(property_text_list)
         
    text = '''\
from Interface import Interface
from Persistence import Persistent
from Zope.Schema.FieldProperty import FieldProperty

# field imports
%(import_text)s

class %(schema_name)s(Interface):
    """Autogenerated schema."""
%(field_text)s
    
class %(class_name)s(Persistent):
    """Autogenerated class for %(schema_name)s."""
    __implements__ = %(schema_name)s
    __schema_version__ = %(schema_version)s

%(property_text)s
''' % vars()
    
    return text

