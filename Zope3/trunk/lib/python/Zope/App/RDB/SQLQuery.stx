SQL Query Interface


  Examples

    1. Simple variable replacement::

       SELECT * 
         FROM Table
         WHERE id = <tal replace="attributes/id" />


    2. Two variable replacement::

       SELECT * 
         FROM Table
         WHERE id = <tal replace="attributes/id" />
           AND title = <tal replace="attributes/title" />


    3. Conditional constraint::
   
       <sql>
       SELECT *
         FROM Table
         <tal condition="python: attributes['id'] != None">
           WHERE id &le; <tal replace="attributes/id" />
         </tal>
       </sql>
    
    4. Multicommand script::

       INSERT INTO Table (id, title) VALUES (
         <tal replace="attributes/id">,
         <tal replace="attributes/title">)

       <tal replace="sql/delimiter">

       SELECT uid 
         FROM Table 
         WHERE id = <tal replace="attributes/id">


  There will be an interface called ISQLScript that provides the basic methods
  to make the script working. Most likely we are going to have at least two
  implementations of this interface::

    - SimpleSQLScript - This script cannot contain any dynamically generated
      SQL code.

    - PTSQLScript - This script's dynamic behavior is realized using regular
      Zope Page Templates and TAL.

  Note that both scripts can live in Content and Service space as well as
  being a filesystem-based view.


  SQLScript::

    class ISQLScript(Interface):
        """This interface describes the minimal methods required to implement
        an SQL script."""
    
        def getConnection():
            """Get the database connection from the service."""

        def execute(arguments):
            """Execute the query. Note that simple implementations might not
            make use of the arguments at all."""

	def setSource(source):
            """Save the source of the query."""

        def getSource():
            """Get the source of the query."""

	def __call_(**kw):
	    """Well, methods should be callable. ;)"""


  The simple SQLScript class basically implements these methods. 


  PTSQLScript::

    class IPTSQLScript(ISQLScript):
        """This interface defines a PageTemplate-based SQL Script."""

        def render(arguments):
            """Render the page template."""

        def pt_getContext(self, arguments):
	    """This is the really interesting method as it defines the
	    available namespaces for our PT-based SQL Script.

            I propose that we should have two namespaces:
        
              - arguments: This namespace contains the arguments that were
                passed to the method.

              - sql: This namespace will contain some helper functions to make
                life easier. One example would be a sql_encode method.
            """


    class PTSQLScript(AppPT, PageTemplate, Persistent):

        __implements__ = IFileContent, IPTSQLScript

	# and so on...
	