Zope3 Session Implementation
============================

Overview
--------

Sessions allow us to fake state over a stateless protocol - HTTP. We do this
by having a unique identifier stored across multiple HTTP requests, be it
a cookie or some id mangled into the URL.

The `IClientIdManager` Utility provides this unique id. It is responsible
for propagating this id so that future requests from the client get
the same id (eg. by setting an HTTP cookie). This utility is used 
when we adapt the request to the unique client id:

    >>> client_id = IClientId(request)

The `ISession` adapter gives us a mapping that can be used to store 
and retrieve session data. A unique key (the package id) is used
to avoid namespace clashes:

    >>> pkg_id = 'products.foo'
    >>> session = ISession(request)[pkg_id]
    >>> session['color'] = 'red'

    >>> session2 = ISession(request)['products.bar']
    >>> session2['color'] = 'blue'

    >>> session['color']
    'red'
    >>> session2['color']
    'blue'


Data Storage
------------
   
The actual data is stored in an `ISessionDataContainer` utility.
`ISession` chooses which `ISessionDataContainer` should be used by
looking up as a named utility using the package id. This allows
the site administrator to configure where the session data is actually
stored by adding a registration for desired `ISessionDataContainer`
with the correct name.

    >>> sdc = zapi.getUtility(ISessionDataContainer, pkg_id)
    >>> sdc[client_id][pkg_id] is session
    True
    >>> sdc[client_id][pkg_id]['color']
    'red'

If no `ISessionDataContainer` utility can be located by name using the
package id, then the unnamed `ISessionDataContainer` utility is used as
a fallback. An unnamed `ISessionDataContainer` is automatically created
for you, which may replaced with a different implementation if desired.

    >>> ISession(request)['unknown'] \
    ...     is zapi.getUtility(ISessionDataContainer)[client_id]['unknown']
    True

The `ISessionDataContainer` contains `ISessionData` objects, and
`ISessionData` objects in turn contain `ISessionPkgData` objects. You 
should never need to know this unless you are writing administrative 
views for the session machinery.

    >>> ISessionData.providedBy(sdc[client_id])
    True
    >>> ISessionPkgData.providedBy(sdc[client_id][pkg_id])
    True

The `ISessionDataContainer` is responsible for expiring session data.
The expiry time can be configured by settings its `timeout` attribute.

    >>> sdc.timeout = 1200 # 1200 seconds or 20 minutes


Restrictions
------------

Data stored in the session must be persistent or picklable.

    >>> session['oops'] = open(__file__)
    >>> import transaction
    >>> transaction.commit()
    Traceback (most recent call last):
        [...]
    TypeError: can't pickle file objects


Page Templates
--------------

    TODO: Confirm these examples work, preferably by somehow having them
    unit tested along with the rest of this document

    Session data may be accessed in page template documents using the
    TALES adaptor syntax::

        <span tal:content="request*Session/products.foo/color | default">
            green
        </span>

        <div tal:define="session request*Session/products.foo">
            <tal:x condition="not:exists:session/count">
                <tal:x condition="python: session['count'] = 1" />
            </tal:x>
            <tal:x condition="exists:session/count">
                <tal:x condition="python: session['count'] += 1" />
            </tal:x>
            <span content="session/count">6</span>
        </div>

