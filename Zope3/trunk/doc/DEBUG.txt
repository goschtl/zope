Using the Zope Debugger

  Introduction
  
    Zope3 includes a mechanism to debug an object publishing request, 
    similiar to the Zope2 
    "debug mechanism":http://www.zope.org/Members/mcdonc/HowTos/UsingTheZopeDebugger

  Setting up Environment

    Setup your PYTHONPATH environment variable to include
    src. ie (unix bash syntax)::

      cd Zope3
      export PYTHONPATH=$PWD/src:$PYTHONPATH
    
    To start interacting with the debugger you need to initialize the
    zope application::

      python2.2
      >> from zope.app import Application
      >> app = Application('path/to/zodb/', 'path/to/site.zcml')
            
  Using the Debugger

    There are several method you can call on the application object:

      - the 'publish' method executes a request as the publisher would
        and prints the response headers and body.

      - run executes a request with the publisher's normal error
        handling disabled and without outputing anything.  This
        is useful for use with Python's post-mortem. debugger

    Once you have the application object you can call its debug method
    to debug a zope object publication.

    the debug method takes several arguments, the more useful/common ones...

      - path - the url path to debug

      - basic - user:password used for http basic auth (it will be
        base64 encoded by the debug method).

      - pm - if this boolean flag is set, zope will not attempt to
        catch exceptions so the post-mortem debugger can be employed.

    So to debug publishing the root object with user foo::

       >> app.debug(path='/', basic="foo:passwd")

    Which will return the http response (including headers) to stdout.

