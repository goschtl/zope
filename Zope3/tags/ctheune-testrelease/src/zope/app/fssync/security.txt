Security Issues
===============

The Python API of zope.fssync and zope.app.fssync does not care about security.
There are neither security checks nor their natural enemies (removeSecurityProxy calls).

The web-based API however has to deal with security issues which mainly depends on the permissions 
to access serialization adapters and their read and write methods.
    
By default the permissions are set as follows:

    Read and write access to content and annotations is generally governed by the 
    zope.ManageContent permission;
    
    access to zope.app.module.manager.ModuleManager by zope.ManageCode;
    
    and access to everything else by zope.ManageSite.   
    
If you need more fine grained distinctions, e.g. differential read and write access, you must
specify the appropriate permissions for the read and write methods of the registered serialization 
adapters.

Let's start with some objects on the server side:

>>> root = getRootFolder()
>>> from zope.app.file import File
>>> serverfile1 = root[u'file1.txt'] = File('A text file', 'plain/text')
>>> serverfile2 = root[u'file2.txt'] = File('Another text file', 'plain/text')

The root folder has a SiteManager which should only be accessible to
site managers. This access is governed by the serialization adapters which are
registered as named utilities. FSSync first looks whether a class based adapter is registered
as a named utility:

>>> from zope.app.fssync.interfaces import IFSSyncFactory
>>> zope.component.getUtility(IFSSyncFactory, 'zope.app.component.site.LocalSiteManager')
Traceback (most recent call last):
...
ComponentLookupError: (<...IFSSyncFactory>, 'zope.app.component.site.LocalSiteManager')

Since the LocalSiteManager class has no special serializer FSSync uses the unnamed DefaultAdapter
which is protected by the ManageSite permission:

>>> factory = zope.component.getUtility(IFSSyncFactory)
>>> factory.__Security_checker__.get_permissions['__call__']
'zope.ManageSite'



Reading with Different Permissions
----------------------------------

The global manager has all permissions and thus is able to check out all objects:

>>> from zope.fssync.fssync import FSSync
>>> rooturl = 'http://globalmgr:globalmgrpw@localhost'
>>> admin = FSSync(network=TestNetwork(), rooturl=rooturl)

Note that the ++etc++site subtree is part of the checkout:

>>> admin.checkout(checkoutdir)
N .../root/
U .../root/++etc++site
N .../root/@@Zope/Annotations/++etc++site/
U .../root/@@Zope/Annotations/++etc++site/zope.app.dublincore.ZopeDublinCore
U .../root/file1.txt
N .../root/@@Zope/Extra/file1.txt/
U .../root/@@Zope/Extra/file1.txt/contentType
U .../root/file2.txt
N .../root/@@Zope/Extra/file2.txt/
U .../root/@@Zope/Extra/file2.txt/contentType
N .../@@Zope/Annotations/root/
U .../@@Zope/Annotations/root/zope.app.dublincore.ZopeDublinCore
U .../@@Zope/Annotations/root/zope.app.security.AnnotationPrincipalRoleManager
All done.

>>> cleanUpTree(checkoutdir)

Now we perform the same checkout with the limited permission of a content manager:

>>> rooturl = 'http://cm:cmpw@localhost'
>>> contentmanager = FSSync(network=TestNetwork(), rooturl=rooturl)
>>> contentmanager.checkout(checkoutdir)
N .../root/
U .../root/file1.txt
U .../root/file2.txt
N .../@@Zope/Annotations/root/
U .../@@Zope/Annotations/root/zope.app.dublincore.ZopeDublinCore
All done.

>>> cleanUpTree(checkoutdir)


Limited Write Permissions
-------------------------

What if we want to restrict the write access to specific users? One possibility is to introduce
new permissions, e.g. zope.app.fssync.Read and zope.app.fssync.Write which are used as 
specific permissions to call read and write methods (see ftesting.zcml).


>>> rooturl = 'http://rom:rompw@localhost'
>>> readonly = FSSync(network=TestNetwork(), rooturl=rooturl)
>>> readonly.checkout(checkoutdir)
N .../root/
U .../root/file1.txt
U .../root/file2.txt
N .../@@Zope/Annotations/root/
U .../@@Zope/Annotations/root/zope.app.dublincore.ZopeDublinCore
All done.


>>> localfile1 = os.path.join(checkoutdir, 'root', 'file1.txt')
>>> fp = open(localfile1, 'w')
>>> fp.write('A modified text file')
>>> fp.close()

>>> readonly.commit(localfile1)
Traceback (most recent call last):
...
Error: HTTP error 403 (Forbidden); error document:
...


