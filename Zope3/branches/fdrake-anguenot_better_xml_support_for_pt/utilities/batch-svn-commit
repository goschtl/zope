#! /usr/bin/env python
##############################################################################
#
# Copyright (c) 2005 Zope Corporation and Contributors.
# All Rights Reserved.
#
# This software is subject to the provisions of the Zope Public License,
# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
# FOR A PARTICULAR PURPOSE.
#
##############################################################################
"""Helper script for large collections of subversion commits."""

USAGE = """
Usage:

    %prog [file]

Perform a set of subversion commits using a listing of filenames and
checkin comments specified in 'file'.  If 'file' is not given or is
'-', standard input is used.

The input is a series of commit descriptions.  Each description is a
set of status lines as printed by the 'svn status' command, consisting
of 'A', 'M', and 'R' lines.  After each group of status lines, the
corresponding checkin comment should be written, separated from status
lines by blank lines.

The normal usage pattern is to generate an input file using the 'svn
status' command:

    $ svn status >changes

and then editing the generated file to include checkin comments.  A
short example might look like this:

    M      src/pkg/foo.py
    R      src/pkg/subpkg/utils.py

    Replace the foobar helper with an inline implementation; it wasn't
    used anywhere else.

    +      src/helpers/fastimpl.c
    M      setup.py

    Add an optimized frobnicator (the ? sign has been changed to a +
    sign, telling %(program) to call svn add before committing)

    Checkin comments can have multiple paragraphs.

    M      src/app/myalgorithm.py

    Use the new optimized frobnicator to get an order of magnitude
    more speed.

This file can then be fed into %(prog)s to generate three separate
commits, one for each different comment.

    $ %prog changes
"""

import optparse
import os
import re
import sys
import tempfile

paragraph_sep = re.compile(r"(\n\s*)+\n")
ops = re.compile(r"^([+ARMDS][+ARMDS ]{4}  [^\n]+\n)+$").match
qops = re.compile(r"^([+ARMDS?]      [^\n]+\n)+$").match

def main():
    parser = optparse.OptionParser(usage=USAGE)
    parser.add_option("-d", "--dry-run", action="store_true", dest="dryrun",
                      help="Don't actually execute anything, just print "
                      "the commands that would be executed.")
    parser.set_defaults(dryrun=False)
    options, args = parser.parse_args()
    
    if len(args) > 1:
        parser.print_usage(sys.stderr)
        return 2
    elif args:
        # read from stdin by default
        filename = args[0]
    else:
        filename = '-'

    if filename == '-':
        f = sys.stdin
    else:
        f = file(filename)

    data = f.read().rstrip()
    paragraphs = [(p.strip()+'\n') for p in paragraph_sep.split(data)]

    docfilename = tempfile.mktemp()

    p = paragraphs.pop(0)
    if not ops(p):
        if qops(p):
            raise "? found in operations!"
        raise "Should start with ops", p
    doc = []
    checkins = [(p, doc)]
    for p in paragraphs:
        if ops(p):
            if not doc:
                raise "No doc for", checkins[-1][0]
            doc = []
            checkins.append((p, doc))
        else:
            if qops(p):
                raise "? found in operations!"
            doc.append(p)

    for (p, doc) in checkins:
        for l in p.strip().split('\n'):
            if l[0] == '+':
                command = 'svn add ' + l[7:]
                print command
                if not options.dryrun:
                    os.system(command)

        files_to_commit = ' '.join([l[7:] for l in p.strip().split('\n')])

        docfile = open(docfilename, 'w')
        docfile.write(''.join(doc))
        docfile.close()

        command = 'svn commit -F %s %s' % (docfilename, files_to_commit)
        print command
        if not options.dryrun:
            os.system(command)

    os.remove(docfilename)
    return 0

if __name__ == '__main__':
    sys.exit(main())
