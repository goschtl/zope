##############################################################################
#
# Copyright (c) 2005 Zope Corporation and Contributors.
# All Rights Reserved.
#
# This software is subject to the provisions of the Zope Public License,
# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
# FOR A PARTICULAR PURPOSE.
#
##############################################################################
"""Common utilities used by the different parts of WebDAV.

$Id$
"""
__docformat__ = 'restructuredtext'

from xml.dom import minidom

from zope.interface import Interface, implements, Attribute
from zope.publisher.http import status_reasons
from zope.security.proxy import removeSecurityProxy

from zope.app import zapi
from zope.app.container.interfaces import IReadContainer


class IMultiStatus(Interface):
    """ """

    body = Attribute(u"""
    The XML DOM Document representing the currently generated by ...
    """)

    def addResponse(object, request):
        """Maybe this should be addResource
        """


class IMultiStatusResponse(Interface):
    """ """

    def addPropertyByStatus(ns, ns_prefix, property, status = 200):
        """Insert the the property element into the current response in the
        correct propstat element specified by the status.
        """

    def createEmptyElement(ns, ns_prefix, name):
        """Create an empty `name' xml element within the specific namespace
        """


class MultiStatus(object):
    implements(IMultiStatus)

    def __init__(self):
        dns = self.default_ns = 'DAV:'
        body = self.body = minidom.Document()
        ms = self.ms = body.createElementNS(dns, 'multistatus')
        ms.setAttributeNS(dns, 'xmlns', dns)
        body.appendChild(ms)

    def appendResponse(self, response):
        """
        """
        self.ms.appendChild(self.body.importNode(response, True))

    def addResponse(self, object, request):
        """Return instance of MultiStatusResponse
        """
        body = self.body
        resp = body.createElementNS(self.default_ns, 'response')
        self.ms.appendChild(resp)
        href = body.createElementNS(self.default_ns, 'href')
        resp.appendChild(href)
        resource_url = zapi.absoluteURL(object, request)
        if IReadContainer.providedBy(object):
            resource_url += '/'
        href.appendChild(body.createTextNode(resource_url))

        return MultiStatusResponse(resp, self.default_ns)


class MultiStatusResponse(object):
    """Simple utility to simplfy the creatation and modification of a
    multistatus response.
    """
    implements(IMultiStatusResponse)

    def __init__(self, resp, default_ns):
        """ resp is the current response object to manage"""
        self.status = {}
        self.response = resp
        self.default_ns = default_ns

    def addPropertyByStatus(self, ns, ns_prefix, property, status = 200):
        """
        property is a DOM element that we want to add to the response. 

        namespace is a 2-tuple of attribute name - must be of the form
        xmlns:XXXX where XXXX is a string and the uri representing the
        namespacce.

        status is a integer representing the HTTP code for this property.
        """
        if property is None:
            raise TypeError, "the property xml.dom element must not be None"

        if self.status.has_key(status):
            prop = self.status[status]
        else:
            doc = self.response.ownerDocument

            propstat = doc.createElementNS(self.default_ns, 'propstat')
            self.response.appendChild(propstat)

            prop = doc.createElementNS(self.default_ns, 'prop')
            propstat.appendChild(prop)

            sprop = doc.createElementNS(self.default_ns, 'status')
            propstat.appendChild(sprop)
            sprop.appendChild(
                doc.createTextNode('HTTP/1.1 %d %s' %(status,
                                                      status_reasons[status])))
            self.status[status] = prop

        if ns is not None and ns_prefix is not None:
            xmlns = None
            if prop.attributes is not None:
                xmlns = prop.attributes.getNamedItemNS(ns,
                                                       'xmlns:%s' % ns_prefix)

            if xmlns is None:
                prop.setAttributeNS(ns, 'xmlns:%s' % ns_prefix, ns)

        if property is not None:
            ## The DAVOpaqueNamespace adapter security proxies the returned
            ## XML DOM Element. In this case remove the security proxy.

            ## This should be fixed by using a one of the DAV Widgets for
            ## opaque properties.
            property = removeSecurityProxy(property)

            prop.appendChild(
                prop.ownerDocument.importNode(property, True))

        return prop

    def createEmptyElement(self, ns, ns_prefix, name):
        """Create an empty `name' xml element within the specific namespace
        """
        el = self.response.ownerDocument.createElementNS(ns, name)
        if ns_prefix is not None:
            el.setAttributeNS(ns, 'xmlns', ns_prefix)
        return el
