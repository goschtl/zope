=========================
The ``portlet`` Directive
=========================

The portlet directive allows you to quickly register a new portlet without much
hassle, like it was shown in the `README.txt` file. Here is a sample
directive::

  >>> from zope.configuration import xmlconfig
  >>> context = xmlconfig.string('''
  ... <configure i18n_domain="zope">
  ...   <include package="zope.portlet" file="meta.zcml" />
  ... </configure>
  ... ''')

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser" i18n_domain="zope"
  ...            package="zope.portlet.tests">
  ...   <portlet
  ...       name="testportlet"
  ...       for="*"
  ...       viewletType=".test_doc.ITestRegion"
  ...       template="test_portlet.pt"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... ''', context=context)

As you can see, the directive looks very similar to the page directive and you
are right. The portlet directive does not permit you to specify a `menu` and
`title`, since it is not sensible to have a menu item for a portlet. However,
it does support two more qualifying attributes, `view` and `region`. While view
is nearly never specified (very common default), the `region` attribute *must*
be specified. An optional `weight` attribute (not shown above) allows you to
change the position of a particular portlet relative to the others. The
default value is zero.

If we now look into the adapter registry, we will find the portlet:

  >>> class Content(object):
  ...     pass
  >>> content = Content()

  >>> from zope.publisher.browser import TestRequest
  >>> request = TestRequest()

  >>> from zope.app.publisher.browser import BrowserView
  >>> view = BrowserView(content, request)

  >>> import zope.interface
  >>> from zope.portlet.tests.test_doc import ITestRegion

  >>> import zope.component
  >>> from zope.portlet.interfaces import IPortlet
  >>> portlet = zope.component.getMultiAdapter(
  ...     (content, request, view), ITestRegion, name='testportlet')
  >>> portlet()
  u'<div>testportlet macro content</div>\n'

Let's now ensure that we can also specify a portlet class:

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser" i18n_domain="zope"
  ...            package="zope.portlet.tests">
  ...   <portlet
  ...       name="testportlet2"
  ...       for="*"
  ...       viewletType=".test_doc.ITestRegion"
  ...       template="test_portlet.pt"
  ...       class=".test_doc.TestPortlet"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... ''', context=context)

  >>> portlet = zope.component.getMultiAdapter(
  ...     (content, request, view), ITestRegion, name='testportlet2')
  >>> portlet()
  u'<div>testportlet macro content</div>\n'

Okay, so the template-driven cases wrok. But just specifying a class should
also work:

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser" i18n_domain="zope"
  ...            package="zope.portlet.tests">
  ...   <portlet
  ...       name="testportlet3"
  ...       for="*"
  ...       viewletType=".test_doc.ITestRegion"
  ...       class=".test_doc.TestPortlet2"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... ''', context=context)

  >>> portlet = zope.component.getMultiAdapter(
  ...     (content, request, view), ITestRegion, name='testportlet3')
  >>> portlet()
  u'called'

It should also be possible to specify an alternative attribute of the class to
be rendered upon calling the portlet:

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser" i18n_domain="zope"
  ...            package="zope.portlet.tests">
  ...   <portlet
  ...       name="testportlet4"
  ...       for="*"
  ...       viewletType=".test_doc.ITestRegion"
  ...       class=".test_doc.TestPortlet"
  ...       attribute="doSomething"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... ''', context=context)

  >>> portlet = zope.component.getMultiAdapter(
  ...     (content, request, view), ITestRegion, name='testportlet4')
  >>> portlet()
  u'something'


Error Scenarios
---------------

Neither the class or template have been specified:

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser" i18n_domain="zope"
  ...            package="zope.portlet.tests">
  ...   <portlet
  ...       name="testportlet"
  ...       viewletType=".test_doc.ITestRegion"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... ''', context=context)
  Traceback (most recent call last):
  ...
  ZopeXMLConfigurationError: File "<string>", line 4.2-8.8
      ConfigurationError: Must specify a class or template

The specified attribute is not ``__call__``, but also a template has been
specified:

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser" i18n_domain="zope"
  ...            package="zope.portlet.tests">
  ...   <portlet
  ...       name="testportlet"
  ...       viewletType=".test_doc.ITestRegion"
  ...       template="test_portlet.pt"
  ...       attribute="faux"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... ''', context=context)
  Traceback (most recent call last):
  ...
  ZopeXMLConfigurationError: File "<string>", line 4.2-10.8
      ConfigurationError: Attribute and template cannot be used together.

Now, we are not specifying a template, but a class that does not have the
specified attribute:

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser" i18n_domain="zope"
  ...            package="zope.portlet.tests">
  ...   <portlet
  ...       name="testportlet"
  ...       viewletType=".test_doc.ITestRegion"
  ...       class=".test_doc.TestPortlet"
  ...       attribute="faux"
  ...       permission="zope.Public"
  ...       />
  ... </configure>
  ... ''', context=context)
  Traceback (most recent call last):
  ...
  ZopeXMLConfigurationError: File "<string>", line 4.2-10.8
    ConfigurationError: The provided class doesn't have the specified attribute
