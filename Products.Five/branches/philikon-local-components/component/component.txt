(Local) components in Five
==========================

Setup
-----

We need to load some important ZCML:

  >>> from Products.Five import zcml
  >>> import Products.Five.component
  >>> zcml.load_config('meta.zcml', Products.Five)
  >>> zcml.load_config('permissions.zcml', Products.Five)
  >>> zcml.load_config('configure.zcml', Products.Five.component)

We should also create a root object:

  >>> from OFS.Application import Application
  >>> root = Application()


Turning ObjectManagers into a site
----------------------------------

Let's create a folder that we'll turn into a site:

  >>> from OFS.ObjectManager import ObjectManager
  >>> site = ObjectManager()

We need to add it to the root so that objects contained in it have a
proper acquisition chain all the way to the top:

  >>> id = root._setObject('site', site)
  >>> site = root.site

Now we make this a real site by using a view that a) sets
``IObjectManagerSite``, b) sets a traversal hook and c) gives the site
a component registration object (formerly known as site manager):

  >>> import zope.component
  >>> from zope.publisher.browser import TestRequest
  >>> request = TestRequest()
  >>> view = zope.component.getMultiAdapter((site, request),
  ...                                       name=u"components.html")
  >>> view.makeSite()

Now the site provides ``IObjectManagerSite``:

  >>> from Products.Five.component.interfaces import IObjectManagerSite
  >>> IObjectManagerSite.providedBy(site)
  True

And it has a site manager (component registry):

  >>> site.getSiteManager() #doctest: +ELLIPSIS
  <zope.component.persistentregistry.PersistentComponents object at ...>


Views on objects
----------------

Let's create a simple content object that we put into the folder
(a.k.a. the site):

  >>> from Products.Five.tests.testing.simplecontent import SimpleContent
  >>> item = SimpleContent('item', 'An item')
  >>> site._setOb('item', item)
  >>> item = site.item

Let's get a list of views (that also shows where each view is
registered at):

  >>> view = zope.component.getMultiAdapter((item, request),
  ...                                       name=u"templateviews.html")
  >>> view = view.__of__(item)
  >>> from pprint import pprint
  >>> viewnames = [reg.name for reg in view.templateViewRegistrations()]
  >>> viewnames.sort()
  >>> pprint(viewnames)
  [u'customizetemplate.html', u'templateviews.html']


Customizing views
-----------------

In the list of template-based browser views we can select one and see
the source of its template:

  >>> view = zope.component.getMultiAdapter((item, request),
  ...                                       name=u"customizetemplate.html")
  >>> view = view.__of__(item)
  >>> print view.templateSource(u'customizetemplate.html') #doctest: +ELLIPSIS
  <html metal:use-macro="context/@@standard_macros/view"
        i18n:domain="zope">
  ...
    <p i18n:translate="">This is the source of the
    <code tal:content="request/form/viewname">viewname</code>:</p>
  ...

We now hit the customize button and get a customized ZPT template:

  >>> zpt = view.doCustomizeTemplate(u'customizetemplate.html')

That actually creates a PageTemplate object in the nearest site
(perhaps later we'd like to have the option to pick which of the sites
above us should be targeted)

  >>> zpt = getattr(site, 'customizetemplate.html')
  >>> print zpt.read() #doctest: +ELLIPSIS
  <html metal:use-macro="context/@@standard_macros/view"
        i18n:domain="zope">
  ...
    <p i18n:translate="">This is the source of the
    <code tal:content="request/form/viewname">viewname</code>:</p>
  ...

It also registers this component as a view now, so when we look up the
view again, we get the customized one.  Therefore let us actually
change the template to give us some info output:

  >>> zpt.pt_edit("""
  ... context:   <tal:var replace="structure context" />
  ... container: <tal:var replace="structure container" />
  ... root:      <tal:var replace="structure root" />
  ... template:  <tal:var replace="structure nocall:template" />
  ... request:   <tal:var replace="structure python:repr(request)" />
  ... view:      <tal:var replace="structure nocall:view" />
  ... modules:   <tal:var replace="structure modules" />
  ... options:   <tal:var replace="structure options" />
  ... nothing:   <tal:var replace="structure nothing" />
  ... """, content_type=None)

In order to be able to look up the customized view now, we need to
make the site the current site:

  >>> from zope.app.component.hooks import setSite
  >>> setSite(site)

Now look it up and compare its output:

  >>> view = zope.component.getMultiAdapter((item, request),
  ...                                       name=u"customizetemplate.html")
  >>> view = view.__of__(item)
  >>> print view() #doctest: +ELLIPSIS
  context:   <SimpleContent at item>
  container: <SimpleContent at item>
  root:      <Application at >
  template:  <ZopePageTemplate at customizetemplate.html>
  request:   <zope.publisher.browser.TestRequest instance URL=http://127.0.0.1>
  view:      <Products.Five.metaclass.SimpleViewClass from .../Five/component/customizetemplate.pt object at ...>
  modules:   <Products.PageTemplates.ZRPythonExpr._SecureModuleImporter instance at ...>
  options:   {'args': ()}
  nothing:   
  <BLANKLINE>

Clean up:

  >>> from zope.app.testing.placelesssetup import tearDown
  >>> tearDown()
