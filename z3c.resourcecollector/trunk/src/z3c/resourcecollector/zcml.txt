===================================
``z3c.resourcecollector`` Directive
===================================

This package provides a new directive to use the special resource
directive. You can merge with it more .js or .css files into one.
Beware, you have to check before if your files are compatible.
There are 2 zcml directives: collector and collectorItem.
Also 2 viewlets are defined what returns the html code for inserting
the js resource or the css resource: JSCollectorViewlet, CSSCollectorViewlet. 
For versioning the urls for the resources also contains a hash code 
calculated from the files. This helps at caching the resources.

First we need to define a fake absolute URL for testing:

  >>> from zope.configuration import xmlconfig
  >>> context = xmlconfig.string('''
  ... <configure i18n_domain="zope">
  ...   <include package="z3c.resourcecollector" file="meta.zcml" />
  ... </configure>
  ... ''')
  
  >>> from zope.traversing.browser.interfaces import IAbsoluteURL
  >>> from zope import interface, component
  >>> from zope.publisher.interfaces.browser import IBrowserRequest
  >>> class FakeAbsoluteURL(object):
  ...    interface.implements(IAbsoluteURL)
  ...    component.adapts(interface.Interface, IBrowserRequest)
  ...    def __init__ (self, context, request):
  ...        pass
  ...    def __str__ (self):
  ...        return 'homeofsite'
  >>> component.provideAdapter(FakeAbsoluteURL)

Now in the zcml we can define a collector. We will add our files to this 
collector.

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser">
  ...   <include package="z3c.resourcecollector" file="meta.zcml" />
  ...   <collector
  ...    name="test.js"
  ...    type="zope.publisher.interfaces.browser.IBrowserRequest"
  ... />
  ... </configure>''')

Using getUtility we check if the collectorUtility was created:

  >>> import zope.component
  >>> from z3c.resourcecollector.interfaces import ICollectorUtility
  >>> rs = zope.component.getUtility(ICollectorUtility, "test.js")
  >>> rs 
  <z3c.resourcecollector.utility.CollectorUtility ...>
  
With getAdapter, we check if the collector was registered.

  >>> from zope import interface
  >>> class Content(object):
  ...     interface.implements(interface.Interface)
  ...     pass
  >>> content = Content()
  >>> from zope.publisher.browser import TestRequest
  >>> request = TestRequest()
  >>> jsview = zope.component.getAdapter(request,name="test.js")
  >>> jsview.__name__ = 'test.js'
  >>> jsview
  <z3c.resourcecollector.browser.CollectorResource object at ...>
  
For testing we define a fake resource type, then we create 3 fake resources.

  >>> from zope.publisher.interfaces.browser import IBrowserRequest
  >>> class FakeResource(object):
  ...     interface.implements(interface.Interface)
  ...     def browserDefault(self, request):
  ...         return getattr(self, '__call__'), ()
  ...     def __init__(self, request):
  ...         pass
  ...     def __call__(self):
  ...         return self.__name__
  >>> zope.component.provideAdapter(FakeResource,(IBrowserRequest,),name="res_test1.js")
  >>> zope.component.provideAdapter(FakeResource,(IBrowserRequest,),name="res_test2.js")
  >>> zope.component.provideAdapter(FakeResource,(IBrowserRequest,),name="res_test3.js")
  
  >>> firstresource = zope.component.getAdapter(request,name="res_test1.js")
  >>> firstresource.__name__ = "res_test1.js"
  >>> secondresource = zope.component.getAdapter(request,name="res_test2.js")
  >>> secondresource.__name__ = "res_test2.js"
  >>> thirdresource = zope.component.getAdapter(request,name="res_test1.js")
  >>> thirdresource.__name__ = "res_test3.js"
  >>> firstresource()
  'res_test1.js'
 
Using the collectorItem directive we add 2 resources to a collector

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser">
  ...   <include package="z3c.resourcecollector" file="meta.zcml" />
  ...   <collectorItem
  ...    collector="test.js"
  ...    item="res_test1.js"
  ...    weight="1"
  ...   />
  ...   <collectorItem
  ...    collector="test.js"
  ...    item="res_test2.js"
  ...    weight="2"
  ...   />
  ... </configure>''')
  
With getAdapter we find our collector, and check if it returns the merged resources

  >>> resourcecollector = zope.component.getAdapter(request,name="test.js")
  >>> resourcecollector.__name__ = "test.js"
  >>> resourcecollector.GET()
  u'res_test1.js\nres_test2.js\n'
  
Check if I can add my resourcecollector to another collector.
First create a new collector:
  
  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser">
  ...   <include package="z3c.resourcecollector" file="meta.zcml" />
  ...   <collector
  ...    name="bigtest.js"
  ...    type="zope.publisher.interfaces.browser.IBrowserRequest"
  ... />
  ... </configure>''')

Add to this collector our previous collector, and another resource:

  >>> context = xmlconfig.string('''
  ... <configure xmlns="http://namespaces.zope.org/browser">
  ...   <include package="z3c.resourcecollector" file="meta.zcml" />
  ...   <collectorItem
  ...    collector="bigtest.js"
  ...    item="test.js"
  ...    weight="2"
  ...   />
  ...   <collectorItem
  ...    collector="bigtest.js"
  ...    item="res_test3.js"
  ...    weight="1"
  ...   />
  ... </configure>''')
  
With getAdapter we find our new resource collector and check if it contains all
the resources what we added to it.

  >>> resourcecollector2 = zope.component.getAdapter(request,name="bigtest.js")
  >>> resourcecollector2.__name__ = "bigtest.js"
  >>> resourcecollector2.GET()
  u'res_test3.js\nres_test1.js\nres_test2.js\n\n'